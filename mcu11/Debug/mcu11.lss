
mcu11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002572  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002572  00002606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080007a  0080007a  00002620  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000150b  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000066ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000685f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009393  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a140  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_4>
      14:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__vector_9>
      28:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__vector_10>
      2c:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 0a 	call	0x159e	; 0x159e <main>
      8a:	0c 94 b7 12 	jmp	0x256e	; 0x256e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

#include"Buzzer.h"
#include "gpio.h"
#include "std_types.h"

void Buzzer_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);//set up buzz pin as output pin
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 0a 07 	call	0xe14	; 0xe14 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);//buzzer off
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);//buzzer on
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);//buzzer off
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:

#include <avr/io.h>
 /*Description:Initializes the DC motor by setting the direction for the motor pins
 * and stopping the motor at the beginning.
 * */
void DcMotor_Init(void) {
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FAN_IN1_PORT_ID, FAN_IN1_PIN_ID, PIN_OUTPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 0a 07 	call	0xe14	; 0xe14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(FAN_IN1_PORT_ID, FAN_IN2_PIN_ID, PIN_OUTPUT);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	67 e0       	ldi	r22, 0x07	; 7
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 0a 07 	call	0xe14	; 0xe14 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(FAN_EN1_PORT_ID, FAN_EN1_PIN_ID, PIN_OUTPUT);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 0a 07 	call	0xe14	; 0xe14 <GPIO_setupPinDirection>

	GPIO_writePin(FAN_IN1_PORT_ID, FAN_IN1_PIN_ID, LOGIC_LOW);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	66 e0       	ldi	r22, 0x06	; 6
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
	GPIO_writePin(FAN_IN1_PORT_ID, FAN_IN2_PIN_ID, LOGIC_LOW);
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	67 e0       	ldi	r22, 0x07	; 7
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
	GPIO_writePin(FAN_EN1_PORT_ID, FAN_EN1_PIN_ID, LOGIC_LOW);
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	63 e0       	ldi	r22, 0x03	; 3
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
}
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <DcMotor_Rotate>:
/*
 * Description: Controls the motor's state (Clockwise/Anti-Clockwise/Stop)
 * and adjusts the speed based on the input duty cycle.
 * */
void DcMotor_Rotate(DcMotor_State state, uint8 speed) {
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <DcMotor_Rotate+0x6>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	6a 83       	std	Y+2, r22	; 0x02
	if (state == ClockWise) {
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	88 23       	and	r24, r24
     bf4:	71 f5       	brne	.+92     	; 0xc52 <DcMotor_Rotate+0x70>
		GPIO_writePin(FAN_IN1_PORT_ID, FAN_IN1_PIN_ID, LOGIC_LOW);
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	66 e0       	ldi	r22, 0x06	; 6
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
		GPIO_writePin(FAN_IN2_PORT_ID, FAN_IN2_PIN_ID, LOGIC_HIGH);
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	67 e0       	ldi	r22, 0x07	; 7
     c04:	41 e0       	ldi	r20, 0x01	; 1
     c06:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
		speed = (uint8) ((uint32) (FAN_MAX_DUTY_CYCLE * speed) / FAN_MAX_SPEED);
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	48 2f       	mov	r20, r24
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	ca 01       	movw	r24, r20
     c12:	9c 01       	movw	r18, r24
     c14:	22 0f       	add	r18, r18
     c16:	33 1f       	adc	r19, r19
     c18:	c9 01       	movw	r24, r18
     c1a:	96 95       	lsr	r25
     c1c:	98 2f       	mov	r25, r24
     c1e:	88 27       	eor	r24, r24
     c20:	97 95       	ror	r25
     c22:	87 95       	ror	r24
     c24:	82 1b       	sub	r24, r18
     c26:	93 0b       	sbc	r25, r19
     c28:	84 0f       	add	r24, r20
     c2a:	95 1f       	adc	r25, r21
     c2c:	aa 27       	eor	r26, r26
     c2e:	97 fd       	sbrc	r25, 7
     c30:	a0 95       	com	r26
     c32:	ba 2f       	mov	r27, r26
     c34:	24 e6       	ldi	r18, 0x64	; 100
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__udivmodsi4>
     c44:	da 01       	movw	r26, r20
     c46:	c9 01       	movw	r24, r18
     c48:	8a 83       	std	Y+2, r24	; 0x02
		PWM_Timer0_Start(speed);
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <PWM_Timer0_Start>
     c50:	41 c0       	rjmp	.+130    	; 0xcd4 <DcMotor_Rotate+0xf2>
	} else if (state == Anti_ClockWise) {
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	71 f5       	brne	.+92     	; 0xcb4 <DcMotor_Rotate+0xd2>
		GPIO_writePin(FAN_IN1_PORT_ID, FAN_IN1_PIN_ID, LOGIC_HIGH);
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	66 e0       	ldi	r22, 0x06	; 6
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
		GPIO_writePin(FAN_IN2_PORT_ID, FAN_IN2_PIN_ID, LOGIC_LOW);
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	67 e0       	ldi	r22, 0x07	; 7
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
		speed = (uint8) ((uint32) (FAN_MAX_DUTY_CYCLE * speed) / FAN_MAX_SPEED);
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	48 2f       	mov	r20, r24
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	ca 01       	movw	r24, r20
     c74:	9c 01       	movw	r18, r24
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	c9 01       	movw	r24, r18
     c7c:	96 95       	lsr	r25
     c7e:	98 2f       	mov	r25, r24
     c80:	88 27       	eor	r24, r24
     c82:	97 95       	ror	r25
     c84:	87 95       	ror	r24
     c86:	82 1b       	sub	r24, r18
     c88:	93 0b       	sbc	r25, r19
     c8a:	84 0f       	add	r24, r20
     c8c:	95 1f       	adc	r25, r21
     c8e:	aa 27       	eor	r26, r26
     c90:	97 fd       	sbrc	r25, 7
     c92:	a0 95       	com	r26
     c94:	ba 2f       	mov	r27, r26
     c96:	24 e6       	ldi	r18, 0x64	; 100
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__udivmodsi4>
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8a 83       	std	Y+2, r24	; 0x02
		PWM_Timer0_Start(speed);
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <PWM_Timer0_Start>
     cb2:	10 c0       	rjmp	.+32     	; 0xcd4 <DcMotor_Rotate+0xf2>
	} else if (state == stop) {
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	69 f4       	brne	.+26     	; 0xcd4 <DcMotor_Rotate+0xf2>
		GPIO_writePin(FAN_IN1_PORT_ID, FAN_IN1_PIN_ID, LOGIC_LOW);
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	66 e0       	ldi	r22, 0x06	; 6
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
		GPIO_writePin(FAN_IN2_PORT_ID, FAN_IN2_PIN_ID, LOGIC_LOW);
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	67 e0       	ldi	r22, 0x07	; 7
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	0e 94 f5 07 	call	0xfea	; 0xfea <GPIO_writePin>
		PWM_Timer0_Start(0);
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <PWM_Timer0_Start>
	}
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <EEPROM_writeByte>:
 */

#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 adress, uint8 data) {
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <EEPROM_writeByte+0x6>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <EEPROM_writeByte+0x8>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	6b 83       	std	Y+3, r22	; 0x03
	I2C_start();
     cf0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <I2C_start>

	if (I2C_getStatus() != TWI_START) {
     cf4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	11 f0       	breq	.+4      	; 0xd00 <EEPROM_writeByte+0x22>
		return ERROR;
     cfc:	1c 82       	std	Y+4, r1	; 0x04
     cfe:	28 c0       	rjmp	.+80     	; 0xd50 <EEPROM_writeByte+0x72>
	}

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	I2C_writeByte((uint8) (0xA0 | ((adress & 0x0700) >> 7)));
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	80 70       	andi	r24, 0x00	; 0
     d06:	97 70       	andi	r25, 0x07	; 7
     d08:	88 0f       	add	r24, r24
     d0a:	89 2f       	mov	r24, r25
     d0c:	88 1f       	adc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	91 95       	neg	r25
     d12:	80 6a       	ori	r24, 0xA0	; 160
     d14:	0e 94 83 0a 	call	0x1506	; 0x1506 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_SLA_W_ACK) {
     d18:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     d1c:	88 31       	cpi	r24, 0x18	; 24
     d1e:	11 f0       	breq	.+4      	; 0xd24 <EEPROM_writeByte+0x46>
		return ERROR;
     d20:	1c 82       	std	Y+4, r1	; 0x04
     d22:	16 c0       	rjmp	.+44     	; 0xd50 <EEPROM_writeByte+0x72>
	}

	/* Send the required memory location address */
	I2C_writeByte((uint8) (adress));
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	0e 94 83 0a 	call	0x1506	; 0x1506 <I2C_writeByte>

	if (I2C_getStatus() != TWI_MT_DATA_ACK) {
     d2a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     d2e:	88 32       	cpi	r24, 0x28	; 40
     d30:	11 f0       	breq	.+4      	; 0xd36 <EEPROM_writeByte+0x58>
		return ERROR;
     d32:	1c 82       	std	Y+4, r1	; 0x04
     d34:	0d c0       	rjmp	.+26     	; 0xd50 <EEPROM_writeByte+0x72>
	}

	/* write byte to eeprom */
	I2C_writeByte(data);
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	0e 94 83 0a 	call	0x1506	; 0x1506 <I2C_writeByte>
	if (I2C_getStatus() != TWI_MT_DATA_ACK)
     d3c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     d40:	88 32       	cpi	r24, 0x28	; 40
     d42:	11 f0       	breq	.+4      	; 0xd48 <EEPROM_writeByte+0x6a>
		return ERROR;
     d44:	1c 82       	std	Y+4, r1	; 0x04
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	I2C_stop();
     d48:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <I2C_stop>

	return SUCCESS;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	8c 83       	std	Y+4, r24	; 0x04
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 adress, uint8 *data)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <EEPROM_readByte+0x6>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <EEPROM_readByte+0x8>
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	7c 83       	std	Y+4, r23	; 0x04
     d74:	6b 83       	std	Y+3, r22	; 0x03
	I2C_start();
     d76:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <I2C_start>

	if (I2C_getStatus() != TWI_START) {
     d7a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     d7e:	88 30       	cpi	r24, 0x08	; 8
     d80:	11 f0       	breq	.+4      	; 0xd86 <EEPROM_readByte+0x26>
		return ERROR;
     d82:	1d 82       	std	Y+5, r1	; 0x05
     d84:	3e c0       	rjmp	.+124    	; 0xe02 <EEPROM_readByte+0xa2>
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	I2C_writeByte((uint8) (0xA0 | ((adress & 0x0700) >> 7)));
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	80 70       	andi	r24, 0x00	; 0
     d8c:	97 70       	andi	r25, 0x07	; 7
     d8e:	88 0f       	add	r24, r24
     d90:	89 2f       	mov	r24, r25
     d92:	88 1f       	adc	r24, r24
     d94:	99 0b       	sbc	r25, r25
     d96:	91 95       	neg	r25
     d98:	80 6a       	ori	r24, 0xA0	; 160
     d9a:	0e 94 83 0a 	call	0x1506	; 0x1506 <I2C_writeByte>

	if (I2C_getStatus() != TWI_MT_SLA_W_ACK) {
     d9e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     da2:	88 31       	cpi	r24, 0x18	; 24
     da4:	11 f0       	breq	.+4      	; 0xdaa <EEPROM_readByte+0x4a>
		return ERROR;
     da6:	1d 82       	std	Y+5, r1	; 0x05
     da8:	2c c0       	rjmp	.+88     	; 0xe02 <EEPROM_readByte+0xa2>
	}

	/* Send the required memory location address */
	I2C_writeByte((uint8)(adress));
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	0e 94 83 0a 	call	0x1506	; 0x1506 <I2C_writeByte>
    /* Send the Repeated Start Bit */
    I2C_start();
     db0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <I2C_start>
    if (I2C_getStatus() != TWI_REP_START)
     db4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     db8:	80 31       	cpi	r24, 0x10	; 16
     dba:	11 f0       	breq	.+4      	; 0xdc0 <EEPROM_readByte+0x60>
    {
    	return ERROR;
     dbc:	1d 82       	std	Y+5, r1	; 0x05
     dbe:	21 c0       	rjmp	.+66     	; 0xe02 <EEPROM_readByte+0xa2>
    }

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    I2C_writeByte((uint8)((0xA0) | ((adress & 0x0700)>>7) | 1));
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	80 70       	andi	r24, 0x00	; 0
     dc6:	97 70       	andi	r25, 0x07	; 7
     dc8:	88 0f       	add	r24, r24
     dca:	89 2f       	mov	r24, r25
     dcc:	88 1f       	adc	r24, r24
     dce:	99 0b       	sbc	r25, r25
     dd0:	91 95       	neg	r25
     dd2:	81 6a       	ori	r24, 0xA1	; 161
     dd4:	0e 94 83 0a 	call	0x1506	; 0x1506 <I2C_writeByte>
    if (I2C_getStatus() != TWI_MT_SLA_R_ACK)
     dd8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     ddc:	80 34       	cpi	r24, 0x40	; 64
     dde:	11 f0       	breq	.+4      	; 0xde4 <EEPROM_readByte+0x84>
        return ERROR;
     de0:	1d 82       	std	Y+5, r1	; 0x05
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <EEPROM_readByte+0xa2>

    /* Read Byte from Memory without send ACK */
    *data = I2C_readByteWithNACK();
     de4:	0e 94 ad 0a 	call	0x155a	; 0x155a <I2C_readByteWithNACK>
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	80 83       	st	Z, r24
    if (I2C_getStatus() != TWI_MR_DATA_NACK)
     dee:	0e 94 c0 0a 	call	0x1580	; 0x1580 <I2C_getStatus>
     df2:	88 35       	cpi	r24, 0x58	; 88
     df4:	11 f0       	breq	.+4      	; 0xdfa <EEPROM_readByte+0x9a>
        return ERROR;
     df6:	1d 82       	std	Y+5, r1	; 0x05
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <EEPROM_readByte+0xa2>

    /* Send the Stop Bit */
    I2C_stop();
     dfa:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <I2C_stop>

    return SUCCESS;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	8d 83       	std	Y+5, r24	; 0x05
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	00 d0       	rcall	.+0      	; 0xe1a <GPIO_setupPinDirection+0x6>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <GPIO_setupPinDirection+0x8>
     e1c:	0f 92       	push	r0
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	6a 83       	std	Y+2, r22	; 0x02
     e26:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	88 30       	cpi	r24, 0x08	; 8
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <GPIO_setupPinDirection+0x1c>
     e2e:	d5 c0       	rjmp	.+426    	; 0xfda <GPIO_setupPinDirection+0x1c6>
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	84 30       	cpi	r24, 0x04	; 4
     e34:	08 f0       	brcs	.+2      	; 0xe38 <GPIO_setupPinDirection+0x24>
     e36:	d1 c0       	rjmp	.+418    	; 0xfda <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	3d 83       	std	Y+5, r19	; 0x05
     e40:	2c 83       	std	Y+4, r18	; 0x04
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	9d 81       	ldd	r25, Y+5	; 0x05
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <GPIO_setupPinDirection+0x3a>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <GPIO_setupPinDirection+0xc0>
     e4e:	2c 81       	ldd	r18, Y+4	; 0x04
     e50:	3d 81       	ldd	r19, Y+5	; 0x05
     e52:	22 30       	cpi	r18, 0x02	; 2
     e54:	31 05       	cpc	r19, r1
     e56:	2c f4       	brge	.+10     	; 0xe62 <GPIO_setupPinDirection+0x4e>
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	71 f0       	breq	.+28     	; 0xe7c <GPIO_setupPinDirection+0x68>
     e60:	bc c0       	rjmp	.+376    	; 0xfda <GPIO_setupPinDirection+0x1c6>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <GPIO_setupPinDirection+0x5a>
     e6c:	5f c0       	rjmp	.+190    	; 0xf2c <GPIO_setupPinDirection+0x118>
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	91 05       	cpc	r25, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <GPIO_setupPinDirection+0x66>
     e78:	85 c0       	rjmp	.+266    	; 0xf84 <GPIO_setupPinDirection+0x170>
     e7a:	af c0       	rjmp	.+350    	; 0xfda <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e82:	aa e3       	ldi	r26, 0x3A	; 58
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ea e3       	ldi	r30, 0x3A	; 58
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_setupPinDirection+0x8c>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_setupPinDirection+0x88>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	98 c0       	rjmp	.+304    	; 0xfda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     eaa:	aa e3       	ldi	r26, 0x3A	; 58
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e3       	ldi	r30, 0x3A	; 58
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_setupPinDirection+0xb4>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_setupPinDirection+0xb0>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	83 c0       	rjmp	.+262    	; 0xfda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	a1 f4       	brne	.+40     	; 0xf02 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     eda:	a7 e3       	ldi	r26, 0x37	; 55
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e7 e3       	ldi	r30, 0x37	; 55
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <GPIO_setupPinDirection+0xe4>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <GPIO_setupPinDirection+0xe0>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	6c c0       	rjmp	.+216    	; 0xfda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f02:	a7 e3       	ldi	r26, 0x37	; 55
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e3       	ldi	r30, 0x37	; 55
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_setupPinDirection+0x10c>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_setupPinDirection+0x108>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	57 c0       	rjmp	.+174    	; 0xfda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	a1 f4       	brne	.+40     	; 0xf5a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f32:	a4 e3       	ldi	r26, 0x34	; 52
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e4 e3       	ldi	r30, 0x34	; 52
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <GPIO_setupPinDirection+0x13c>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <GPIO_setupPinDirection+0x138>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	40 c0       	rjmp	.+128    	; 0xfda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f5a:	a4 e3       	ldi	r26, 0x34	; 52
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e4 e3       	ldi	r30, 0x34	; 52
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <GPIO_setupPinDirection+0x164>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <GPIO_setupPinDirection+0x160>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	2b c0       	rjmp	.+86     	; 0xfda <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	a1 f4       	brne	.+40     	; 0xfb2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f8a:	a1 e3       	ldi	r26, 0x31	; 49
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e1 e3       	ldi	r30, 0x31	; 49
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_setupPinDirection+0x194>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_setupPinDirection+0x190>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     fb2:	a1 e3       	ldi	r26, 0x31	; 49
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e3       	ldi	r30, 0x31	; 49
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_setupPinDirection+0x1bc>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_setupPinDirection+0x1b8>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <GPIO_writePin+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <GPIO_writePin+0x8>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	6a 83       	std	Y+2, r22	; 0x02
     ffc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	88 30       	cpi	r24, 0x08	; 8
    1002:	08 f0       	brcs	.+2      	; 0x1006 <GPIO_writePin+0x1c>
    1004:	d5 c0       	rjmp	.+426    	; 0x11b0 <GPIO_writePin+0x1c6>
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	84 30       	cpi	r24, 0x04	; 4
    100a:	08 f0       	brcs	.+2      	; 0x100e <GPIO_writePin+0x24>
    100c:	d1 c0       	rjmp	.+418    	; 0x11b0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3d 83       	std	Y+5, r19	; 0x05
    1016:	2c 83       	std	Y+4, r18	; 0x04
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	9d 81       	ldd	r25, Y+5	; 0x05
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <GPIO_writePin+0x3a>
    1022:	43 c0       	rjmp	.+134    	; 0x10aa <GPIO_writePin+0xc0>
    1024:	2c 81       	ldd	r18, Y+4	; 0x04
    1026:	3d 81       	ldd	r19, Y+5	; 0x05
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	2c f4       	brge	.+10     	; 0x1038 <GPIO_writePin+0x4e>
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	71 f0       	breq	.+28     	; 0x1052 <GPIO_writePin+0x68>
    1036:	bc c0       	rjmp	.+376    	; 0x11b0 <GPIO_writePin+0x1c6>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <GPIO_writePin+0x5a>
    1042:	5f c0       	rjmp	.+190    	; 0x1102 <GPIO_writePin+0x118>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <GPIO_writePin+0x66>
    104e:	85 c0       	rjmp	.+266    	; 0x115a <GPIO_writePin+0x170>
    1050:	af c0       	rjmp	.+350    	; 0x11b0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	a1 f4       	brne	.+40     	; 0x1080 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <GPIO_writePin+0x8c>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <GPIO_writePin+0x88>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	98 c0       	rjmp	.+304    	; 0x11b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1080:	ab e3       	ldi	r26, 0x3B	; 59
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	eb e3       	ldi	r30, 0x3B	; 59
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <GPIO_writePin+0xb4>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <GPIO_writePin+0xb0>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	83 c0       	rjmp	.+262    	; 0x11b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    10b0:	a8 e3       	ldi	r26, 0x38	; 56
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e8 e3       	ldi	r30, 0x38	; 56
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <GPIO_writePin+0xe4>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <GPIO_writePin+0xe0>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	6c c0       	rjmp	.+216    	; 0x11b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10d8:	a8 e3       	ldi	r26, 0x38	; 56
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e8 e3       	ldi	r30, 0x38	; 56
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_writePin+0x10c>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_writePin+0x108>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	57 c0       	rjmp	.+174    	; 0x11b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	a1 f4       	brne	.+40     	; 0x1130 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1108:	a5 e3       	ldi	r26, 0x35	; 53
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e3       	ldi	r30, 0x35	; 53
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_writePin+0x13c>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_writePin+0x138>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	40 c0       	rjmp	.+128    	; 0x11b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1130:	a5 e3       	ldi	r26, 0x35	; 53
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e3       	ldi	r30, 0x35	; 53
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_writePin+0x164>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_writePin+0x160>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	2b c0       	rjmp	.+86     	; 0x11b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	a1 f4       	brne	.+40     	; 0x1188 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1160:	a2 e3       	ldi	r26, 0x32	; 50
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e2 e3       	ldi	r30, 0x32	; 50
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_writePin+0x194>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_writePin+0x190>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	14 c0       	rjmp	.+40     	; 0x11b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1188:	a2 e3       	ldi	r26, 0x32	; 50
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_writePin+0x1bc>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_writePin+0x1b8>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <GPIO_readPin+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <GPIO_readPin+0x8>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11d2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 30       	cpi	r24, 0x08	; 8
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <GPIO_readPin+0x1c>
    11da:	84 c0       	rjmp	.+264    	; 0x12e4 <GPIO_readPin+0x124>
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <GPIO_readPin+0x24>
    11e2:	80 c0       	rjmp	.+256    	; 0x12e4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3d 83       	std	Y+5, r19	; 0x05
    11ec:	2c 83       	std	Y+4, r18	; 0x04
    11ee:	4c 81       	ldd	r20, Y+4	; 0x04
    11f0:	5d 81       	ldd	r21, Y+5	; 0x05
    11f2:	41 30       	cpi	r20, 0x01	; 1
    11f4:	51 05       	cpc	r21, r1
    11f6:	79 f1       	breq	.+94     	; 0x1256 <GPIO_readPin+0x96>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	91 05       	cpc	r25, r1
    1200:	34 f4       	brge	.+12     	; 0x120e <GPIO_readPin+0x4e>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	21 15       	cp	r18, r1
    1208:	31 05       	cpc	r19, r1
    120a:	69 f0       	breq	.+26     	; 0x1226 <GPIO_readPin+0x66>
    120c:	6b c0       	rjmp	.+214    	; 0x12e4 <GPIO_readPin+0x124>
    120e:	4c 81       	ldd	r20, Y+4	; 0x04
    1210:	5d 81       	ldd	r21, Y+5	; 0x05
    1212:	42 30       	cpi	r20, 0x02	; 2
    1214:	51 05       	cpc	r21, r1
    1216:	b9 f1       	breq	.+110    	; 0x1286 <GPIO_readPin+0xc6>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <GPIO_readPin+0x64>
    1222:	49 c0       	rjmp	.+146    	; 0x12b6 <GPIO_readPin+0xf6>
    1224:	5f c0       	rjmp	.+190    	; 0x12e4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1226:	e9 e3       	ldi	r30, 0x39	; 57
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_readPin+0x7e>
    123a:	55 95       	asr	r21
    123c:	47 95       	ror	r20
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_readPin+0x7a>
    1242:	ca 01       	movw	r24, r20
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	90 70       	andi	r25, 0x00	; 0
    1248:	88 23       	and	r24, r24
    124a:	19 f0       	breq	.+6      	; 0x1252 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	49 c0       	rjmp	.+146    	; 0x12e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1252:	19 82       	std	Y+1, r1	; 0x01
    1254:	47 c0       	rjmp	.+142    	; 0x12e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1256:	e6 e3       	ldi	r30, 0x36	; 54
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a9 01       	movw	r20, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <GPIO_readPin+0xae>
    126a:	55 95       	asr	r21
    126c:	47 95       	ror	r20
    126e:	8a 95       	dec	r24
    1270:	e2 f7       	brpl	.-8      	; 0x126a <GPIO_readPin+0xaa>
    1272:	ca 01       	movw	r24, r20
    1274:	81 70       	andi	r24, 0x01	; 1
    1276:	90 70       	andi	r25, 0x00	; 0
    1278:	88 23       	and	r24, r24
    127a:	19 f0       	breq	.+6      	; 0x1282 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	31 c0       	rjmp	.+98     	; 0x12e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	2f c0       	rjmp	.+94     	; 0x12e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1286:	e3 e3       	ldi	r30, 0x33	; 51
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a9 01       	movw	r20, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_readPin+0xde>
    129a:	55 95       	asr	r21
    129c:	47 95       	ror	r20
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_readPin+0xda>
    12a2:	ca 01       	movw	r24, r20
    12a4:	81 70       	andi	r24, 0x01	; 1
    12a6:	90 70       	andi	r25, 0x00	; 0
    12a8:	88 23       	and	r24, r24
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	19 c0       	rjmp	.+50     	; 0x12e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12b2:	19 82       	std	Y+1, r1	; 0x01
    12b4:	17 c0       	rjmp	.+46     	; 0x12e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    12b6:	e0 e3       	ldi	r30, 0x30	; 48
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <GPIO_readPin+0x10e>
    12ca:	55 95       	asr	r21
    12cc:	47 95       	ror	r20
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <GPIO_readPin+0x10a>
    12d2:	ca 01       	movw	r24, r20
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	90 70       	andi	r25, 0x00	; 0
    12d8:	88 23       	and	r24, r24
    12da:	19 f0       	breq	.+6      	; 0x12e2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12e2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <GPIO_setupPortDirection+0x6>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <GPIO_setupPortDirection+0x8>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	84 30       	cpi	r24, 0x04	; 4
    130a:	90 f5       	brcc	.+100    	; 0x1370 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3c 83       	std	Y+4, r19	; 0x04
    1314:	2b 83       	std	Y+3, r18	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	d1 f0       	breq	.+52     	; 0x1354 <GPIO_setupPortDirection+0x5e>
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <GPIO_setupPortDirection+0x3e>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <GPIO_setupPortDirection+0x54>
    1332:	1e c0       	rjmp	.+60     	; 0x1370 <GPIO_setupPortDirection+0x7a>
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	81 f0       	breq	.+32     	; 0x135e <GPIO_setupPortDirection+0x68>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	81 f0       	breq	.+32     	; 0x1368 <GPIO_setupPortDirection+0x72>
    1348:	13 c0       	rjmp	.+38     	; 0x1370 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    134a:	ea e3       	ldi	r30, 0x3A	; 58
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	80 83       	st	Z, r24
    1352:	0e c0       	rjmp	.+28     	; 0x1370 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1354:	e7 e3       	ldi	r30, 0x37	; 55
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	80 83       	st	Z, r24
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    135e:	e4 e3       	ldi	r30, 0x34	; 52
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 83       	st	Z, r24
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1368:	e1 e3       	ldi	r30, 0x31	; 49
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <GPIO_writePort+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <GPIO_writePort+0x8>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	90 f5       	brcc	.+100    	; 0x13f8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3c 83       	std	Y+4, r19	; 0x04
    139c:	2b 83       	std	Y+3, r18	; 0x03
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 05       	cpc	r25, r1
    13a6:	d1 f0       	breq	.+52     	; 0x13dc <GPIO_writePort+0x5e>
    13a8:	2b 81       	ldd	r18, Y+3	; 0x03
    13aa:	3c 81       	ldd	r19, Y+4	; 0x04
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	2c f4       	brge	.+10     	; 0x13bc <GPIO_writePort+0x3e>
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <GPIO_writePort+0x54>
    13ba:	1e c0       	rjmp	.+60     	; 0x13f8 <GPIO_writePort+0x7a>
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	81 f0       	breq	.+32     	; 0x13e6 <GPIO_writePort+0x68>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	83 30       	cpi	r24, 0x03	; 3
    13cc:	91 05       	cpc	r25, r1
    13ce:	81 f0       	breq	.+32     	; 0x13f0 <GPIO_writePort+0x72>
    13d0:	13 c0       	rjmp	.+38     	; 0x13f8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13d2:	eb e3       	ldi	r30, 0x3B	; 59
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	80 83       	st	Z, r24
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13dc:	e8 e3       	ldi	r30, 0x38	; 56
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	80 83       	st	Z, r24
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13e6:	e5 e3       	ldi	r30, 0x35	; 53
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	80 83       	st	Z, r24
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13f0:	e2 e3       	ldi	r30, 0x32	; 50
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <GPIO_readPort+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <GPIO_readPort+0x8>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1414:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	84 30       	cpi	r24, 0x04	; 4
    141a:	90 f5       	brcc	.+100    	; 0x1480 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	d1 f0       	breq	.+52     	; 0x1464 <GPIO_readPort+0x5e>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	2c f4       	brge	.+10     	; 0x1444 <GPIO_readPort+0x3e>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	61 f0       	breq	.+24     	; 0x145a <GPIO_readPort+0x54>
    1442:	1e c0       	rjmp	.+60     	; 0x1480 <GPIO_readPort+0x7a>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	81 f0       	breq	.+32     	; 0x146e <GPIO_readPort+0x68>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	81 f0       	breq	.+32     	; 0x1478 <GPIO_readPort+0x72>
    1458:	13 c0       	rjmp	.+38     	; 0x1480 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    145a:	e9 e3       	ldi	r30, 0x39	; 57
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1464:	e6 e3       	ldi	r30, 0x36	; 54
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    146e:	e3 e3       	ldi	r30, 0x33	; 51
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1478:	e0 e3       	ldi	r30, 0x30	; 48
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <I2C_init>:
#include <avr/io.h>
#include "common_macros.h"

/*=================Functions implementation=============== */

void I2C_init(const I2C_ConfigType *Config_Ptr) {
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <I2C_init+0x6>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01

	TWBR = 0x02;
    149e:	e0 e2       	ldi	r30, 0x20	; 32
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	80 83       	st	Z, r24
	TWSR = Config_Ptr->bit_rate;
    14a6:	a1 e2       	ldi	r26, 0x21	; 33
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e9 81       	ldd	r30, Y+1	; 0x01
    14ac:	fa 81       	ldd	r31, Y+2	; 0x02
    14ae:	81 81       	ldd	r24, Z+1	; 0x01
    14b0:	8c 93       	st	X, r24

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	 General Call Recognition: Off */
	TWAR = Config_Ptr->address;
    14b2:	a2 e2       	ldi	r26, 0x22	; 34
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	80 81       	ld	r24, Z
    14bc:	8c 93       	st	X, r24

	TWCR = (1 << TWEN); /* enable TWI */
    14be:	e6 e5       	ldi	r30, 0x56	; 86
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	80 83       	st	Z, r24
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <I2C_start>:

void I2C_start(void) {
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */

	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    14d8:	e6 e5       	ldi	r30, 0x56	; 86
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	84 ea       	ldi	r24, 0xA4	; 164
    14de:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    14e0:	e6 e5       	ldi	r30, 0x56	; 86
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	88 23       	and	r24, r24
    14e8:	dc f7       	brge	.-10     	; 0x14e0 <I2C_start+0x10>
	}
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <I2C_stop>:
void I2C_stop(void) {
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    14f8:	e6 e5       	ldi	r30, 0x56	; 86
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	84 e9       	ldi	r24, 0x94	; 148
    14fe:	80 83       	st	Z, r24

}
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <I2C_writeByte>:
void I2C_writeByte(uint8 data) {
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1512:	e3 e2       	ldi	r30, 0x23	; 35
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	80 83       	st	Z, r24

	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    151a:	e6 e5       	ldi	r30, 0x56	; 86
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	84 e8       	ldi	r24, 0x84	; 132
    1520:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    1522:	e6 e5       	ldi	r30, 0x56	; 86
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	88 23       	and	r24, r24
    152a:	dc f7       	brge	.-10     	; 0x1522 <I2C_writeByte+0x1c>
	}
}
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <I2C_readByteWithACK>:
uint8 I2C_readByteWithACK(void) {
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
    153c:	e6 e5       	ldi	r30, 0x56	; 86
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	84 ec       	ldi	r24, 0xC4	; 196
    1542:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    1544:	e6 e5       	ldi	r30, 0x56	; 86
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	88 23       	and	r24, r24
    154c:	dc f7       	brge	.-10     	; 0x1544 <I2C_readByteWithACK+0x10>
	}

	/* Read Data */
	return TWDR;
    154e:	e3 e2       	ldi	r30, 0x23	; 35
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
}
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <I2C_readByteWithNACK>:
uint8 I2C_readByteWithNACK(void) {
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1562:	e6 e5       	ldi	r30, 0x56	; 86
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	84 e8       	ldi	r24, 0x84	; 132
    1568:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT)) {
    156a:	e6 e5       	ldi	r30, 0x56	; 86
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	88 23       	and	r24, r24
    1572:	dc f7       	brge	.-10     	; 0x156a <I2C_readByteWithNACK+0x10>
	}

	/* Read Data */
	return TWDR;
    1574:	e3 e2       	ldi	r30, 0x23	; 35
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <I2C_getStatus>:
uint8 I2C_getStatus(void) {
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	0f 92       	push	r0
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = (TWSR & 0xF8);
    158a:	e1 e2       	ldi	r30, 0x21	; 33
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	88 7f       	andi	r24, 0xF8	; 248
    1592:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1594:	89 81       	ldd	r24, Y+1	; 0x01
}
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <main>:
void call(void);
void call2(void);
void call3(void);


int main() {
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	62 97       	sbiw	r28, 0x12	; 18
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType UART_ConfigType_2 = {
	UART_8_BIT_DATA_MODE,
	UART_DISABLE_PARITY,
	UART_1_STOP, baud_9600 };
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	9f 87       	std	Y+15, r25	; 0x0f
    15b8:	8e 87       	std	Y+14, r24	; 0x0e
    15ba:	ef e6       	ldi	r30, 0x6F	; 111
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	f9 8b       	std	Y+17, r31	; 0x11
    15c0:	e8 8b       	std	Y+16, r30	; 0x10
    15c2:	fb e0       	ldi	r31, 0x0B	; 11
    15c4:	fa 8b       	std	Y+18, r31	; 0x12
    15c6:	e8 89       	ldd	r30, Y+16	; 0x10
    15c8:	f9 89       	ldd	r31, Y+17	; 0x11
    15ca:	00 80       	ld	r0, Z
    15cc:	88 89       	ldd	r24, Y+16	; 0x10
    15ce:	99 89       	ldd	r25, Y+17	; 0x11
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	99 8b       	std	Y+17, r25	; 0x11
    15d4:	88 8b       	std	Y+16, r24	; 0x10
    15d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    15d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    15da:	00 82       	st	Z, r0
    15dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    15de:	9f 85       	ldd	r25, Y+15	; 0x0f
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	9f 87       	std	Y+15, r25	; 0x0f
    15e4:	8e 87       	std	Y+14, r24	; 0x0e
    15e6:	9a 89       	ldd	r25, Y+18	; 0x12
    15e8:	91 50       	subi	r25, 0x01	; 1
    15ea:	9a 8b       	std	Y+18, r25	; 0x12
    15ec:	ea 89       	ldd	r30, Y+18	; 0x12
    15ee:	ee 23       	and	r30, r30
    15f0:	51 f7       	brne	.-44     	; 0x15c6 <main+0x28>

	I2C_ConfigType I2C_ConfigType_1 = { 0x01, No_PRESCALLER };
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	8c 87       	std	Y+12, r24	; 0x0c
    15f6:	1d 86       	std	Y+13, r1	; 0x0d

	UART_init(&UART_ConfigType_2);
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	0e 94 48 11 	call	0x2290	; 0x2290 <UART_init>

	I2C_init(&I2C_ConfigType_1);
    1600:	ce 01       	movw	r24, r28
    1602:	0c 96       	adiw	r24, 0x0c	; 12
    1604:	0e 94 48 0a 	call	0x1490	; 0x1490 <I2C_init>
	DcMotor_Init();
    1608:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>
	Buzzer_init();
    160c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	while (1) {

		check_byte = UART_recieveByte();
    1610:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <UART_recieveByte>
    1614:	80 93 80 00 	sts	0x0080, r24
		if (check_byte == 'X') {
    1618:	80 91 80 00 	lds	r24, 0x0080
    161c:	88 35       	cpi	r24, 0x58	; 88
    161e:	19 f4       	brne	.+6      	; 0x1626 <main+0x88>
			Pass_in_EEPROM();
    1620:	0e 94 25 0b 	call	0x164a	; 0x164a <Pass_in_EEPROM>
    1624:	f5 cf       	rjmp	.-22     	; 0x1610 <main+0x72>
		} else if (check_byte == '+' || (check_byte == '-')) {
    1626:	80 91 80 00 	lds	r24, 0x0080
    162a:	8b 32       	cpi	r24, 0x2B	; 43
    162c:	21 f0       	breq	.+8      	; 0x1636 <main+0x98>
    162e:	80 91 80 00 	lds	r24, 0x0080
    1632:	8d 32       	cpi	r24, 0x2D	; 45
    1634:	19 f4       	brne	.+6      	; 0x163c <main+0x9e>
			Check_Pass();
    1636:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Check_Pass>
    163a:	ea cf       	rjmp	.-44     	; 0x1610 <main+0x72>
		} else if (check_byte == 'N') {
    163c:	80 91 80 00 	lds	r24, 0x0080
    1640:	8e 34       	cpi	r24, 0x4E	; 78
    1642:	31 f7       	brne	.-52     	; 0x1610 <main+0x72>
			Close_OR_Open();
    1644:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Close_OR_Open>
    1648:	e3 cf       	rjmp	.-58     	; 0x1610 <main+0x72>

0000164a <Pass_in_EEPROM>:
		}
	}
}

void Pass_in_EEPROM(void) {
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	60 97       	sbiw	r28, 0x10	; 16
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    1662:	18 8a       	std	Y+16, r1	; 0x10
    1664:	0c c0       	rjmp	.+24     	; 0x167e <Pass_in_EEPROM+0x34>
		stored_pass[i] = UART_recieveByte();
    1666:	88 89       	ldd	r24, Y+16	; 0x10
    1668:	08 2f       	mov	r16, r24
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <UART_recieveByte>
    1670:	f8 01       	movw	r30, r16
    1672:	e6 58       	subi	r30, 0x86	; 134
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 83       	st	Z, r24
		}
	}
}

void Pass_in_EEPROM(void) {
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    1678:	88 89       	ldd	r24, Y+16	; 0x10
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	88 8b       	std	Y+16, r24	; 0x10
    167e:	88 89       	ldd	r24, Y+16	; 0x10
    1680:	85 30       	cpi	r24, 0x05	; 5
    1682:	88 f3       	brcs	.-30     	; 0x1666 <Pass_in_EEPROM+0x1c>
		stored_pass[i] = UART_recieveByte();
	}
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    1684:	1f 86       	std	Y+15, r1	; 0x0f
    1686:	8d c0       	rjmp	.+282    	; 0x17a2 <Pass_in_EEPROM+0x158>
		EEPROM_writeByte((750 + i), (stored_pass[i]));
    1688:	8f 85       	ldd	r24, Y+15	; 0x0f
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	82 51       	subi	r24, 0x12	; 18
    1690:	9d 4f       	sbci	r25, 0xFD	; 253
    1692:	ac 01       	movw	r20, r24
    1694:	8f 85       	ldd	r24, Y+15	; 0x0f
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	fc 01       	movw	r30, r24
    169c:	e6 58       	subi	r30, 0x86	; 134
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	20 81       	ld	r18, Z
    16a2:	ca 01       	movw	r24, r20
    16a4:	62 2f       	mov	r22, r18
    16a6:	0e 94 6f 06 	call	0xcde	; 0xcde <EEPROM_writeByte>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e2       	ldi	r26, 0x20	; 32
    16b0:	b1 e4       	ldi	r27, 0x41	; 65
    16b2:	8b 87       	std	Y+11, r24	; 0x0b
    16b4:	9c 87       	std	Y+12, r25	; 0x0c
    16b6:	ad 87       	std	Y+13, r26	; 0x0d
    16b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    16bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a ef       	ldi	r20, 0xFA	; 250
    16c8:	54 e4       	ldi	r21, 0x44	; 68
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8f 83       	std	Y+7, r24	; 0x07
    16d4:	98 87       	std	Y+8, r25	; 0x08
    16d6:	a9 87       	std	Y+9, r26	; 0x09
    16d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <Pass_in_EEPROM+0xb2>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <Pass_in_EEPROM+0x130>
	else if (__tmp > 65535)
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <Pass_in_EEPROM+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	6b 85       	ldd	r22, Y+11	; 0x0b
    1716:	7c 85       	ldd	r23, Y+12	; 0x0c
    1718:	8d 85       	ldd	r24, Y+13	; 0x0d
    171a:	9e 85       	ldd	r25, Y+14	; 0x0e
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	0f c0       	rjmp	.+30     	; 0x175c <Pass_in_EEPROM+0x112>
    173e:	88 ec       	ldi	r24, 0xC8	; 200
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <Pass_in_EEPROM+0x100>
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <Pass_in_EEPROM+0xf4>
    1764:	14 c0       	rjmp	.+40     	; 0x178e <Pass_in_EEPROM+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <Pass_in_EEPROM+0x13c>
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		stored_pass[i] = 0;
    178e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	fc 01       	movw	r30, r24
    1796:	e6 58       	subi	r30, 0x86	; 134
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	10 82       	st	Z, r1

void Pass_in_EEPROM(void) {
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
		stored_pass[i] = UART_recieveByte();
	}
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    179c:	8f 85       	ldd	r24, Y+15	; 0x0f
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	8f 87       	std	Y+15, r24	; 0x0f
    17a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a4:	85 30       	cpi	r24, 0x05	; 5
    17a6:	08 f4       	brcc	.+2      	; 0x17aa <Pass_in_EEPROM+0x160>
    17a8:	6f cf       	rjmp	.-290    	; 0x1688 <Pass_in_EEPROM+0x3e>
		EEPROM_writeByte((750 + i), (stored_pass[i]));
		_delay_ms(10);
		stored_pass[i] = 0;
	}
}
    17aa:	60 96       	adiw	r28, 0x10	; 16
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <Check_Pass>:

void Check_Pass(void) {
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	a3 97       	sbiw	r28, 0x23	; 35
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
	uint8 read_pass[MAX_STORED_PASSWORD] = { 0 }, flag = 0;
    17d8:	18 a2       	std	Y+32, r1	; 0x20
    17da:	19 a2       	std	Y+33, r1	; 0x21
    17dc:	1a a2       	std	Y+34, r1	; 0x22
    17de:	1b a2       	std	Y+35, r1	; 0x23
    17e0:	1f 8e       	std	Y+31, r1	; 0x1f
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    17e2:	1e 8e       	std	Y+30, r1	; 0x1e
    17e4:	7e c0       	rjmp	.+252    	; 0x18e2 <Check_Pass+0x122>
		stored_pass[i] = UART_recieveByte();
    17e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e8:	08 2f       	mov	r16, r24
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <UART_recieveByte>
    17f0:	f8 01       	movw	r30, r16
    17f2:	e6 58       	subi	r30, 0x86	; 134
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 83       	st	Z, r24
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e2       	ldi	r26, 0x20	; 32
    17fe:	b1 e4       	ldi	r27, 0x41	; 65
    1800:	89 8f       	std	Y+25, r24	; 0x19
    1802:	9a 8f       	std	Y+26, r25	; 0x1a
    1804:	ab 8f       	std	Y+27, r26	; 0x1b
    1806:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	69 8d       	ldd	r22, Y+25	; 0x19
    180a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a ef       	ldi	r20, 0xFA	; 250
    1816:	54 e4       	ldi	r21, 0x44	; 68
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8d 8b       	std	Y+21, r24	; 0x15
    1822:	9e 8b       	std	Y+22, r25	; 0x16
    1824:	af 8b       	std	Y+23, r26	; 0x17
    1826:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <Check_Pass+0x8a>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 8b       	std	Y+20, r25	; 0x14
    1846:	8b 8b       	std	Y+19, r24	; 0x13
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <Check_Pass+0x108>
	else if (__tmp > 65535)
    184a:	6d 89       	ldd	r22, Y+21	; 0x15
    184c:	7e 89       	ldd	r23, Y+22	; 0x16
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <Check_Pass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <Check_Pass+0xea>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	89 8b       	std	Y+17, r24	; 0x11
    1894:	89 89       	ldd	r24, Y+17	; 0x11
    1896:	9a 89       	ldd	r25, Y+18	; 0x12
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <Check_Pass+0xd8>
    189c:	9a 8b       	std	Y+18, r25	; 0x12
    189e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	9c 89       	ldd	r25, Y+20	; 0x14
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <Check_Pass+0xcc>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <Check_Pass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6d 89       	ldd	r22, Y+21	; 0x15
    18b6:	7e 89       	ldd	r23, Y+22	; 0x16
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	98 8d       	ldd	r25, Y+24	; 0x18
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	98 8b       	std	Y+16, r25	; 0x10
    18ce:	8f 87       	std	Y+15, r24	; 0x0f
    18d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d2:	98 89       	ldd	r25, Y+16	; 0x10
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <Check_Pass+0x114>
    18d8:	98 8b       	std	Y+16, r25	; 0x10
    18da:	8f 87       	std	Y+15, r24	; 0x0f
	}
}

void Check_Pass(void) {
	uint8 read_pass[MAX_STORED_PASSWORD] = { 0 }, flag = 0;
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    18dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	8e 8f       	std	Y+30, r24	; 0x1e
    18e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e4:	85 30       	cpi	r24, 0x05	; 5
    18e6:	08 f4       	brcc	.+2      	; 0x18ea <Check_Pass+0x12a>
    18e8:	7e cf       	rjmp	.-260    	; 0x17e6 <Check_Pass+0x26>
		stored_pass[i] = UART_recieveByte();
		_delay_ms(10);
	}
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    18ea:	1d 8e       	std	Y+29, r1	; 0x1d
    18ec:	9c c0       	rjmp	.+312    	; 0x1a26 <Check_Pass+0x266>
		EEPROM_readByte((750 + i), &(read_pass[i]));
    18ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	82 51       	subi	r24, 0x12	; 18
    18f6:	9d 4f       	sbci	r25, 0xFD	; 253
    18f8:	ac 01       	movw	r20, r24
    18fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9e 01       	movw	r18, r28
    1902:	20 5e       	subi	r18, 0xE0	; 224
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	28 0f       	add	r18, r24
    1908:	39 1f       	adc	r19, r25
    190a:	ca 01       	movw	r24, r20
    190c:	b9 01       	movw	r22, r18
    190e:	0e 94 b0 06 	call	0xd60	; 0xd60 <EEPROM_readByte>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 e2       	ldi	r26, 0x20	; 32
    1918:	b1 e4       	ldi	r27, 0x41	; 65
    191a:	8b 87       	std	Y+11, r24	; 0x0b
    191c:	9c 87       	std	Y+12, r25	; 0x0c
    191e:	ad 87       	std	Y+13, r26	; 0x0d
    1920:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8f 83       	std	Y+7, r24	; 0x07
    193c:	98 87       	std	Y+8, r25	; 0x08
    193e:	a9 87       	std	Y+9, r26	; 0x09
    1940:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <Check_Pass+0x1a4>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <Check_Pass+0x222>
	else if (__tmp > 65535)
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <Check_Pass+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6b 85       	ldd	r22, Y+11	; 0x0b
    197e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	9e 85       	ldd	r25, Y+14	; 0x0e
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <Check_Pass+0x204>
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <Check_Pass+0x1f2>
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <Check_Pass+0x1e6>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <Check_Pass+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <Check_Pass+0x22e>
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if (read_pass[i] == stored_pass[i]) {
    19f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	ce 01       	movw	r24, r28
    19fe:	80 96       	adiw	r24, 0x20	; 32
    1a00:	fc 01       	movw	r30, r24
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	20 81       	ld	r18, Z
    1a08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	fc 01       	movw	r30, r24
    1a10:	e6 58       	subi	r30, 0x86	; 134
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	28 17       	cp	r18, r24
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <Check_Pass+0x260>
		} else {
			flag = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a1e:	07 c0       	rjmp	.+14     	; 0x1a2e <Check_Pass+0x26e>
	uint8 read_pass[MAX_STORED_PASSWORD] = { 0 }, flag = 0;
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
		stored_pass[i] = UART_recieveByte();
		_delay_ms(10);
	}
	for (uint8 i = 0; i <= MAX_STORED_PASSWORD; i++) {
    1a20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	8d 8f       	std	Y+29, r24	; 0x1d
    1a26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a28:	85 30       	cpi	r24, 0x05	; 5
    1a2a:	08 f4       	brcc	.+2      	; 0x1a2e <Check_Pass+0x26e>
    1a2c:	60 cf       	rjmp	.-320    	; 0x18ee <Check_Pass+0x12e>
		} else {
			flag = 1;
			break;
		}
	}
	if ((flag == 0) && (check_byte == '+')) {
    1a2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a30:	88 23       	and	r24, r24
    1a32:	a9 f4       	brne	.+42     	; 0x1a5e <Check_Pass+0x29e>
    1a34:	80 91 80 00 	lds	r24, 0x0080
    1a38:	8b 32       	cpi	r24, 0x2B	; 43
    1a3a:	89 f4       	brne	.+34     	; 0x1a5e <Check_Pass+0x29e>
		/*Motor on*/
		UART_sendByte('A');
    1a3c:	81 e4       	ldi	r24, 0x41	; 65
    1a3e:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_sendByte>
		DcMotor_Rotate(ClockWise, 100);
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	64 e6       	ldi	r22, 0x64	; 100
    1a46:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>

		Timer_init(&Timer_ConfigType_1);
    1a4a:	88 e6       	ldi	r24, 0x68	; 104
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <Timer_init>
		Timer_setCallBack(call,TIMER1);
    1a52:	86 e8       	ldi	r24, 0x86	; 134
    1a54:	9d e0       	ldi	r25, 0x0D	; 13
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	0e 94 0f 11 	call	0x221e	; 0x221e <Timer_setCallBack>
    1a5c:	29 c0       	rjmp	.+82     	; 0x1ab0 <Check_Pass+0x2f0>
	/*
		_delay_ms(15000);
		DcMotor_Rotate(Stop, 0);
		Close_OR_Open();
*/
	} else if ((flag == 0) && (check_byte == '-')) {
    1a5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a60:	88 23       	and	r24, r24
    1a62:	41 f4       	brne	.+16     	; 0x1a74 <Check_Pass+0x2b4>
    1a64:	80 91 80 00 	lds	r24, 0x0080
    1a68:	8d 32       	cpi	r24, 0x2D	; 45
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <Check_Pass+0x2b4>
		UART_sendByte('Z');
    1a6c:	8a e5       	ldi	r24, 0x5A	; 90
    1a6e:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_sendByte>
    1a72:	1e c0       	rjmp	.+60     	; 0x1ab0 <Check_Pass+0x2f0>
	} else if (flag == 1) {
    1a74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	d9 f4       	brne	.+54     	; 0x1ab0 <Check_Pass+0x2f0>
		count++;
    1a7a:	80 91 81 00 	lds	r24, 0x0081
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	80 93 81 00 	sts	0x0081, r24
		if (count == 3) {
    1a84:	80 91 81 00 	lds	r24, 0x0081
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	79 f4       	brne	.+30     	; 0x1aaa <Check_Pass+0x2ea>

			UART_sendByte('T');
    1a8c:	84 e5       	ldi	r24, 0x54	; 84
    1a8e:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_sendByte>
			Buzzer_on();
    1a92:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>




			Timer_init(&Timer_ConfigType_1);
    1a96:	88 e6       	ldi	r24, 0x68	; 104
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <Timer_init>
			Timer_setCallBack(call2,TIMER1);
    1a9e:	81 ea       	ldi	r24, 0xA1	; 161
    1aa0:	9d e0       	ldi	r25, 0x0D	; 13
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	0e 94 0f 11 	call	0x221e	; 0x221e <Timer_setCallBack>
    1aa8:	03 c0       	rjmp	.+6      	; 0x1ab0 <Check_Pass+0x2f0>
	/*
			_delay_ms(60000);
			Buzzer_off();
			*/
		} else {
			UART_sendByte('R');
    1aaa:	82 e5       	ldi	r24, 0x52	; 82
    1aac:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_sendByte>
		}
	}
}
    1ab0:	a3 96       	adiw	r28, 0x23	; 35
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	08 95       	ret

00001ac6 <Close_OR_Open>:

void Close_OR_Open(void) {
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
	if (PIR_getState() == LOGIC_HIGH) {
    1ace:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <PIR_getState>
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	21 f4       	brne	.+8      	; 0x1ade <Close_OR_Open+0x18>
		UART_sendByte('B');
    1ad6:	82 e4       	ldi	r24, 0x42	; 66
    1ad8:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_sendByte>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <Close_OR_Open+0x40>
	} else if (PIR_getState() == LOGIC_LOW) {
    1ade:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <PIR_getState>
    1ae2:	88 23       	and	r24, r24
    1ae4:	81 f4       	brne	.+32     	; 0x1b06 <Close_OR_Open+0x40>
		UART_sendByte('K');
    1ae6:	8b e4       	ldi	r24, 0x4B	; 75
    1ae8:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_sendByte>
		DcMotor_Rotate(Anti_ClockWise, 100);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	64 e6       	ldi	r22, 0x64	; 100
    1af0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>


		Timer_init(&Timer_ConfigType_1);
    1af4:	88 e6       	ldi	r24, 0x68	; 104
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <Timer_init>
		Timer_setCallBack(call3,TIMER1);
    1afc:	88 eb       	ldi	r24, 0xB8	; 184
    1afe:	9d e0       	ldi	r25, 0x0D	; 13
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	0e 94 0f 11 	call	0x221e	; 0x221e <Timer_setCallBack>
		/*
		_delay_ms(15000);
		DcMotor_Rotate(Stop, 0);
		*/
	}
}
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <call>:

void call(void)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	glopal_timer++;
    1b14:	80 91 82 00 	lds	r24, 0x0082
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	80 93 82 00 	sts	0x0082, r24
	if(glopal_timer == 15)
    1b1e:	80 91 82 00 	lds	r24, 0x0082
    1b22:	8f 30       	cpi	r24, 0x0F	; 15
    1b24:	59 f4       	brne	.+22     	; 0x1b3c <call+0x30>
	{
		glopal_timer = 0;
    1b26:	10 92 82 00 	sts	0x0082, r1
		Timer_deInit(TIMER1);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	0e 94 c2 10 	call	0x2184	; 0x2184 <Timer_deInit>
		DcMotor_Rotate(stop, 0);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>
		Close_OR_Open();
    1b38:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Close_OR_Open>
	}
}
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <call2>:

void call2(void)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	glopal_timer++;
    1b4a:	80 91 82 00 	lds	r24, 0x0082
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	80 93 82 00 	sts	0x0082, r24
	if(glopal_timer == 60)
    1b54:	80 91 82 00 	lds	r24, 0x0082
    1b58:	8c 33       	cpi	r24, 0x3C	; 60
    1b5a:	39 f4       	brne	.+14     	; 0x1b6a <call2+0x28>
	{
		glopal_timer = 0;
    1b5c:	10 92 82 00 	sts	0x0082, r1
		Timer_deInit(TIMER1);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	0e 94 c2 10 	call	0x2184	; 0x2184 <Timer_deInit>
		Buzzer_off();
    1b66:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
	}
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <call3>:

void call3(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	glopal_timer++;
    1b78:	80 91 82 00 	lds	r24, 0x0082
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	80 93 82 00 	sts	0x0082, r24
	if(glopal_timer == 15)
    1b82:	80 91 82 00 	lds	r24, 0x0082
    1b86:	8f 30       	cpi	r24, 0x0F	; 15
    1b88:	49 f4       	brne	.+18     	; 0x1b9c <call3+0x2c>
	{
		glopal_timer = 0;
    1b8a:	10 92 82 00 	sts	0x0082, r1
		Timer_deInit(TIMER1);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	0e 94 c2 10 	call	0x2184	; 0x2184 <Timer_deInit>
		DcMotor_Rotate(stop, 0);
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <DcMotor_Rotate>
	}
}
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <PIR_init>:
#include"std_types.h"
#include <avr/io.h>



void PIR_init(void) {
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    // Set PIR_PIN as input
    DDRD &= ~(1 << PIR_PIN); // Clear the bit to set as input
    1baa:	a1 e3       	ldi	r26, 0x31	; 49
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e1 e3       	ldi	r30, 0x31	; 49
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8b 7f       	andi	r24, 0xFB	; 251
    1bb6:	8c 93       	st	X, r24
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <PIR_getState>:

uint8 PIR_getState(void) {
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	0f 92       	push	r0
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    // Read the state of the PIR sensor
    return (PIND & (1 << PIR_PIN)) ? 1 : 0; // Return 1 if motion detected, otherwise 0
    1bc8:	e0 e3       	ldi	r30, 0x30	; 48
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	84 70       	andi	r24, 0x04	; 4
    1bd4:	90 70       	andi	r25, 0x00	; 0
    1bd6:	19 82       	std	Y+1, r1	; 0x01
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <PIR_getState+0x22>
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <PWM_Timer0_Start>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle) {
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	0f 92       	push	r0
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0 set with zero because it PWM
	 * to select fast PWM mode can set WGM00 and WGM01
	 * to (nin-inverting mode) COM01 set to 1
	 * use 64 pre_scaler by write 1 to CS00 and CS01
	 * */
	SET_BIT(TCCR0, WGM00);
    1bf6:	a3 e5       	ldi	r26, 0x53	; 83
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e3 e5       	ldi	r30, 0x53	; 83
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 64       	ori	r24, 0x40	; 64
    1c02:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1c04:	a3 e5       	ldi	r26, 0x53	; 83
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e3 e5       	ldi	r30, 0x53	; 83
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 60       	ori	r24, 0x08	; 8
    1c10:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    1c12:	a3 e5       	ldi	r26, 0x53	; 83
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e3 e5       	ldi	r30, 0x53	; 83
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 62       	ori	r24, 0x20	; 32
    1c1e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS00);
    1c20:	a3 e5       	ldi	r26, 0x53	; 83
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e3 e5       	ldi	r30, 0x53	; 83
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	81 60       	ori	r24, 0x01	; 1
    1c2c:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1c2e:	a3 e5       	ldi	r26, 0x53	; 83
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e3 e5       	ldi	r30, 0x53	; 83
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	82 60       	ori	r24, 0x02	; 2
    1c3a:	8c 93       	st	X, r24

	TCNT0 = 0; //initial value to count
    1c3c:	e2 e5       	ldi	r30, 0x52	; 82
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	10 82       	st	Z, r1
	OCR0 = duty_cycle; //speed of motor
    1c42:	ec e5       	ldi	r30, 0x5C	; 92
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	80 83       	st	Z, r24

	GPIO_setupPinDirection(TIMER0_PORT_ID, TIMER0_PIN_ID, PIN_OUTPUT);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	63 e0       	ldi	r22, 0x03	; 3
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 0a 07 	call	0xe14	; 0xe14 <GPIO_setupPinDirection>
}
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <__vector_10>:

static CallbackFunction g_callBackPtr = NULL_PTR;



ISR(TIMER0_COMP_vect) {
    1c5c:	1f 92       	push	r1
    1c5e:	0f 92       	push	r0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	2f 93       	push	r18
    1c68:	3f 93       	push	r19
    1c6a:	4f 93       	push	r20
    1c6c:	5f 93       	push	r21
    1c6e:	6f 93       	push	r22
    1c70:	7f 93       	push	r23
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	af 93       	push	r26
    1c78:	bf 93       	push	r27
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1c86:	80 91 83 00 	lds	r24, 0x0083
    1c8a:	90 91 84 00 	lds	r25, 0x0084
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	29 f0       	breq	.+10     	; 0x1c9c <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c92:	e0 91 83 00 	lds	r30, 0x0083
    1c96:	f0 91 84 00 	lds	r31, 0x0084
    1c9a:	09 95       	icall
	}
}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__vector_11>:

ISR(TIMER0_OVF_vect) {
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	2f 93       	push	r18
    1cce:	3f 93       	push	r19
    1cd0:	4f 93       	push	r20
    1cd2:	5f 93       	push	r21
    1cd4:	6f 93       	push	r22
    1cd6:	7f 93       	push	r23
    1cd8:	8f 93       	push	r24
    1cda:	9f 93       	push	r25
    1cdc:	af 93       	push	r26
    1cde:	bf 93       	push	r27
    1ce0:	ef 93       	push	r30
    1ce2:	ff 93       	push	r31
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1cec:	80 91 83 00 	lds	r24, 0x0083
    1cf0:	90 91 84 00 	lds	r25, 0x0084
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	29 f0       	breq	.+10     	; 0x1d02 <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1cf8:	e0 91 83 00 	lds	r30, 0x0083
    1cfc:	f0 91 84 00 	lds	r31, 0x0084
    1d00:	09 95       	icall
	}
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	ff 91       	pop	r31
    1d08:	ef 91       	pop	r30
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	0f 90       	pop	r0
    1d24:	1f 90       	pop	r1
    1d26:	18 95       	reti

00001d28 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	11 24       	eor	r1, r1
    1d32:	2f 93       	push	r18
    1d34:	3f 93       	push	r19
    1d36:	4f 93       	push	r20
    1d38:	5f 93       	push	r21
    1d3a:	6f 93       	push	r22
    1d3c:	7f 93       	push	r23
    1d3e:	8f 93       	push	r24
    1d40:	9f 93       	push	r25
    1d42:	af 93       	push	r26
    1d44:	bf 93       	push	r27
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1d52:	80 91 83 00 	lds	r24, 0x0083
    1d56:	90 91 84 00 	lds	r25, 0x0084
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	29 f0       	breq	.+10     	; 0x1d68 <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d5e:	e0 91 83 00 	lds	r30, 0x0083
    1d62:	f0 91 84 00 	lds	r31, 0x0084
    1d66:	09 95       	icall
	}
}
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	ff 91       	pop	r31
    1d6e:	ef 91       	pop	r30
    1d70:	bf 91       	pop	r27
    1d72:	af 91       	pop	r26
    1d74:	9f 91       	pop	r25
    1d76:	8f 91       	pop	r24
    1d78:	7f 91       	pop	r23
    1d7a:	6f 91       	pop	r22
    1d7c:	5f 91       	pop	r21
    1d7e:	4f 91       	pop	r20
    1d80:	3f 91       	pop	r19
    1d82:	2f 91       	pop	r18
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0
    1d8a:	1f 90       	pop	r1
    1d8c:	18 95       	reti

00001d8e <__vector_5>:

ISR(TIMER2_OVF_vect) {
    1d8e:	1f 92       	push	r1
    1d90:	0f 92       	push	r0
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	0f 92       	push	r0
    1d96:	11 24       	eor	r1, r1
    1d98:	2f 93       	push	r18
    1d9a:	3f 93       	push	r19
    1d9c:	4f 93       	push	r20
    1d9e:	5f 93       	push	r21
    1da0:	6f 93       	push	r22
    1da2:	7f 93       	push	r23
    1da4:	8f 93       	push	r24
    1da6:	9f 93       	push	r25
    1da8:	af 93       	push	r26
    1daa:	bf 93       	push	r27
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1db8:	80 91 83 00 	lds	r24, 0x0083
    1dbc:	90 91 84 00 	lds	r25, 0x0084
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	29 f0       	breq	.+10     	; 0x1dce <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1dc4:	e0 91 83 00 	lds	r30, 0x0083
    1dc8:	f0 91 84 00 	lds	r31, 0x0084
    1dcc:	09 95       	icall
	}
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	7f 91       	pop	r23
    1de0:	6f 91       	pop	r22
    1de2:	5f 91       	pop	r21
    1de4:	4f 91       	pop	r20
    1de6:	3f 91       	pop	r19
    1de8:	2f 91       	pop	r18
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti

00001df4 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    1df4:	1f 92       	push	r1
    1df6:	0f 92       	push	r0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	0f 92       	push	r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	2f 93       	push	r18
    1e00:	3f 93       	push	r19
    1e02:	4f 93       	push	r20
    1e04:	5f 93       	push	r21
    1e06:	6f 93       	push	r22
    1e08:	7f 93       	push	r23
    1e0a:	8f 93       	push	r24
    1e0c:	9f 93       	push	r25
    1e0e:	af 93       	push	r26
    1e10:	bf 93       	push	r27
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1e1e:	80 91 83 00 	lds	r24, 0x0083
    1e22:	90 91 84 00 	lds	r25, 0x0084
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	29 f0       	breq	.+10     	; 0x1e34 <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e2a:	e0 91 83 00 	lds	r30, 0x0083
    1e2e:	f0 91 84 00 	lds	r31, 0x0084
    1e32:	09 95       	icall
	}
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	0f 90       	pop	r0
    1e56:	1f 90       	pop	r1
    1e58:	18 95       	reti

00001e5a <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1e5a:	1f 92       	push	r1
    1e5c:	0f 92       	push	r0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	0f 92       	push	r0
    1e62:	11 24       	eor	r1, r1
    1e64:	2f 93       	push	r18
    1e66:	3f 93       	push	r19
    1e68:	4f 93       	push	r20
    1e6a:	5f 93       	push	r21
    1e6c:	6f 93       	push	r22
    1e6e:	7f 93       	push	r23
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	af 93       	push	r26
    1e76:	bf 93       	push	r27
    1e78:	ef 93       	push	r30
    1e7a:	ff 93       	push	r31
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1e84:	80 91 83 00 	lds	r24, 0x0083
    1e88:	90 91 84 00 	lds	r25, 0x0084
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e90:	e0 91 83 00 	lds	r30, 0x0083
    1e94:	f0 91 84 00 	lds	r31, 0x0084
    1e98:	09 95       	icall
	}
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	ff 91       	pop	r31
    1ea0:	ef 91       	pop	r30
    1ea2:	bf 91       	pop	r27
    1ea4:	af 91       	pop	r26
    1ea6:	9f 91       	pop	r25
    1ea8:	8f 91       	pop	r24
    1eaa:	7f 91       	pop	r23
    1eac:	6f 91       	pop	r22
    1eae:	5f 91       	pop	r21
    1eb0:	4f 91       	pop	r20
    1eb2:	3f 91       	pop	r19
    1eb4:	2f 91       	pop	r18
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <Timer_init>:


void Timer_init(const Timer_ConfigType *Config_Ptr) {
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <Timer_init+0x6>
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);
    1ed0:	af e5       	ldi	r26, 0x5F	; 95
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ef e5       	ldi	r30, 0x5F	; 95
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 68       	ori	r24, 0x80	; 128
    1edc:	8c 93       	st	X, r24
		if ((Config_Ptr->timer_ID) == TIMER0) {
    1ede:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee2:	84 81       	ldd	r24, Z+4	; 0x04
    1ee4:	88 23       	and	r24, r24
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <Timer_init+0x2a>
    1ee8:	92 c0       	rjmp	.+292    	; 0x200e <Timer_init+0x14e>
			if ((Config_Ptr->timer_mode) == PWM_MODE) {
    1eea:	e9 81       	ldd	r30, Y+1	; 0x01
    1eec:	fa 81       	ldd	r31, Y+2	; 0x02
    1eee:	86 81       	ldd	r24, Z+6	; 0x06
    1ef0:	83 30       	cpi	r24, 0x03	; 3
    1ef2:	81 f5       	brne	.+96     	; 0x1f54 <Timer_init+0x94>
				/*Choose Mode*/
				SET_BIT(TCCR0, WGM00);
    1ef4:	a3 e5       	ldi	r26, 0x53	; 83
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e3 e5       	ldi	r30, 0x53	; 83
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	80 64       	ori	r24, 0x40	; 64
    1f00:	8c 93       	st	X, r24
				SET_BIT(TCCR0, WGM01);
    1f02:	a3 e5       	ldi	r26, 0x53	; 83
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e3 e5       	ldi	r30, 0x53	; 83
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 60       	ori	r24, 0x08	; 8
    1f0e:	8c 93       	st	X, r24
				/* to (nin-inverting mode) COM01 set to 1 to Compare Output Mode, Fast PWM Mode*/
				SET_BIT(TCCR0, COM01);
    1f10:	a3 e5       	ldi	r26, 0x53	; 83
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e3 e5       	ldi	r30, 0x53	; 83
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 62       	ori	r24, 0x20	; 32
    1f1c:	8c 93       	st	X, r24
				/*Choose Pre_scaller*/
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    1f1e:	a3 e5       	ldi	r26, 0x53	; 83
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e3 e5       	ldi	r30, 0x53	; 83
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	98 2f       	mov	r25, r24
    1f2a:	98 7f       	andi	r25, 0xF8	; 248
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	85 81       	ldd	r24, Z+5	; 0x05
    1f32:	89 2b       	or	r24, r25
    1f34:	8c 93       	st	X, r24
				TCNT0 = Config_Ptr->timer_InitialValue; //initial value to count
    1f36:	a2 e5       	ldi	r26, 0x52	; 82
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	8c 93       	st	X, r24
				/*Duty Cycle for speed of Motor*/
				OCR0 = Config_Ptr->timer_compare_MatchValue;
    1f44:	ac e5       	ldi	r26, 0x5C	; 92
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	8c 93       	st	X, r24
    1f52:	12 c1       	rjmp	.+548    	; 0x2178 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) ==   CTC_MODE) {
    1f54:	e9 81       	ldd	r30, Y+1	; 0x01
    1f56:	fa 81       	ldd	r31, Y+2	; 0x02
    1f58:	86 81       	ldd	r24, Z+6	; 0x06
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	81 f5       	brne	.+96     	; 0x1fbe <Timer_init+0xfe>
				/*Active non PWM Mode*/
				SET_BIT(TCCR0, FOC0);
    1f5e:	a3 e5       	ldi	r26, 0x53	; 83
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e3 e5       	ldi	r30, 0x53	; 83
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	80 68       	ori	r24, 0x80	; 128
    1f6a:	8c 93       	st	X, r24
				/*Choose Mode*/
				/* Normal port operation, OC0 disconnected */
				SET_BIT(TCCR0, WGM01);
    1f6c:	a3 e5       	ldi	r26, 0x53	; 83
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e3 e5       	ldi	r30, 0x53	; 83
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	88 60       	ori	r24, 0x08	; 8
    1f78:	8c 93       	st	X, r24
				/*Choose Pre_scaller*/
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    1f7a:	a3 e5       	ldi	r26, 0x53	; 83
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 e5       	ldi	r30, 0x53	; 83
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	98 2f       	mov	r25, r24
    1f86:	98 7f       	andi	r25, 0xF8	; 248
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	85 81       	ldd	r24, Z+5	; 0x05
    1f8e:	89 2b       	or	r24, r25
    1f90:	8c 93       	st	X, r24
				TCNT0 = Config_Ptr->timer_InitialValue; //initial value to count
    1f92:	a2 e5       	ldi	r26, 0x52	; 82
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e9 81       	ldd	r30, Y+1	; 0x01
    1f98:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9a:	80 81       	ld	r24, Z
    1f9c:	91 81       	ldd	r25, Z+1	; 0x01
    1f9e:	8c 93       	st	X, r24
				OCR0 = Config_Ptr->timer_compare_MatchValue;
    1fa0:	ac e5       	ldi	r26, 0x5C	; 92
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	8c 93       	st	X, r24
				/*Timer/Counter0 Output Compare Match Interrupt Enable */
				SET_BIT(TIMSK, OCIE0);
    1fae:	a9 e5       	ldi	r26, 0x59	; 89
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e9 e5       	ldi	r30, 0x59	; 89
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	82 60       	ori	r24, 0x02	; 2
    1fba:	8c 93       	st	X, r24
    1fbc:	dd c0       	rjmp	.+442    	; 0x2178 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) == NORMAL_MODE) {
    1fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc2:	86 81       	ldd	r24, Z+6	; 0x06
    1fc4:	88 23       	and	r24, r24
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <Timer_init+0x10a>
    1fc8:	d7 c0       	rjmp	.+430    	; 0x2178 <Timer_init+0x2b8>
				/*Active non PWM Mode*/
				SET_BIT(TCCR0, FOC0);
    1fca:	a3 e5       	ldi	r26, 0x53	; 83
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e3 e5       	ldi	r30, 0x53	; 83
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 68       	ori	r24, 0x80	; 128
    1fd6:	8c 93       	st	X, r24
				/*Choose Pre_scaller*/
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    1fd8:	a3 e5       	ldi	r26, 0x53	; 83
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e3 e5       	ldi	r30, 0x53	; 83
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	98 7f       	andi	r25, 0xF8	; 248
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	85 81       	ldd	r24, Z+5	; 0x05
    1fec:	89 2b       	or	r24, r25
    1fee:	8c 93       	st	X, r24
				TCNT0 = Config_Ptr->timer_InitialValue; //initial value to count
    1ff0:	a2 e5       	ldi	r26, 0x52	; 82
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	8c 93       	st	X, r24
				/*Timer/Counter0 Overflow Interrupt Enable*/
				SET_BIT(TIMSK, TOIE0);
    1ffe:	a9 e5       	ldi	r26, 0x59	; 89
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e9 e5       	ldi	r30, 0x59	; 89
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	81 60       	ori	r24, 0x01	; 1
    200a:	8c 93       	st	X, r24
    200c:	b5 c0       	rjmp	.+362    	; 0x2178 <Timer_init+0x2b8>
			}
		} else if ((Config_Ptr->timer_ID) == TIMER1) {
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	84 81       	ldd	r24, Z+4	; 0x04
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	09 f0       	breq	.+2      	; 0x201a <Timer_init+0x15a>
    2018:	a2 c0       	rjmp	.+324    	; 0x215e <Timer_init+0x29e>
			if ((Config_Ptr->timer_mode) == PWM_MODE) {
    201a:	e9 81       	ldd	r30, Y+1	; 0x01
    201c:	fa 81       	ldd	r31, Y+2	; 0x02
    201e:	86 81       	ldd	r24, Z+6	; 0x06
    2020:	83 30       	cpi	r24, 0x03	; 3
    2022:	d9 f5       	brne	.+118    	; 0x209a <Timer_init+0x1da>
				/*Compare Output Mode, Fast PWM(1) AS non-inverting mode*/
				SET_BIT(TCCR1A, COM1A1);
    2024:	af e4       	ldi	r26, 0x4F	; 79
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ef e4       	ldi	r30, 0x4F	; 79
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	80 68       	ori	r24, 0x80	; 128
    2030:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2032:	af e4       	ldi	r26, 0x4F	; 79
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ef e4       	ldi	r30, 0x4F	; 79
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	80 62       	ori	r24, 0x20	; 32
    203e:	8c 93       	st	X, r24
				/*The FOC1A/FOC1B bits are only active when
				 * the WGM13:0 bits specifies a non-PWM mode*/

				/*Fast PWM, 8-bit   MODE 5*/
				SET_BIT(TCCR1A, WGM10);
    2040:	af e4       	ldi	r26, 0x4F	; 79
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	ef e4       	ldi	r30, 0x4F	; 79
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	81 60       	ori	r24, 0x01	; 1
    204c:	8c 93       	st	X, r24
				SET_BIT(TCCR1B, WGM12);
    204e:	ae e4       	ldi	r26, 0x4E	; 78
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	ee e4       	ldi	r30, 0x4E	; 78
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	88 60       	ori	r24, 0x08	; 8
    205a:	8c 93       	st	X, r24

				/*
				 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
				 * of TCCR1B Register
				 */
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    205c:	ae e4       	ldi	r26, 0x4E	; 78
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	ee e4       	ldi	r30, 0x4E	; 78
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	98 2f       	mov	r25, r24
    2068:	98 7f       	andi	r25, 0xF8	; 248
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	85 81       	ldd	r24, Z+5	; 0x05
    2070:	89 2b       	or	r24, r25
    2072:	8c 93       	st	X, r24

				/*Initial value for timer 1*/
				TCNT1 = Config_Ptr->timer_InitialValue;
    2074:	ac e4       	ldi	r26, 0x4C	; 76
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e9 81       	ldd	r30, Y+1	; 0x01
    207a:	fa 81       	ldd	r31, Y+2	; 0x02
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	11 96       	adiw	r26, 0x01	; 1
    2082:	9c 93       	st	X, r25
    2084:	8e 93       	st	-X, r24

				OCR1A = Config_Ptr->timer_compare_MatchValue;
    2086:	aa e4       	ldi	r26, 0x4A	; 74
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e9 81       	ldd	r30, Y+1	; 0x01
    208c:	fa 81       	ldd	r31, Y+2	; 0x02
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	9c 93       	st	X, r25
    2096:	8e 93       	st	-X, r24
    2098:	6f c0       	rjmp	.+222    	; 0x2178 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) ==  CTC_MODE) {
    209a:	e9 81       	ldd	r30, Y+1	; 0x01
    209c:	fa 81       	ldd	r31, Y+2	; 0x02
    209e:	86 81       	ldd	r24, Z+6	; 0x06
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	a1 f5       	brne	.+104    	; 0x210c <Timer_init+0x24c>
				/*Compare Output Mode, non-PWM Normal port operation
				 *  COM1A1/COM1A0/COM1B1/COM1B0 = 0 */

				/*The FOC1A/FOC1B bits are only active when
				 * the WGM13:0 bits specifies a non-PWM mode*/
				SET_BIT(TCCR1A, FOC1A);
    20a4:	af e4       	ldi	r26, 0x4F	; 79
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	ef e4       	ldi	r30, 0x4F	; 79
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	88 60       	ori	r24, 0x08	; 8
    20b0:	8c 93       	st	X, r24
				/*choose MODE 4 =====> Top = OCR1A ====>*/
				SET_BIT(TCCR1B, WGM12);
    20b2:	ae e4       	ldi	r26, 0x4E	; 78
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	ee e4       	ldi	r30, 0x4E	; 78
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	88 60       	ori	r24, 0x08	; 8
    20be:	8c 93       	st	X, r24

				/*
				 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
				 * of TCCR1B Register
				 */
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    20c0:	ae e4       	ldi	r26, 0x4E	; 78
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	ee e4       	ldi	r30, 0x4E	; 78
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	98 2f       	mov	r25, r24
    20cc:	98 7f       	andi	r25, 0xF8	; 248
    20ce:	e9 81       	ldd	r30, Y+1	; 0x01
    20d0:	fa 81       	ldd	r31, Y+2	; 0x02
    20d2:	85 81       	ldd	r24, Z+5	; 0x05
    20d4:	89 2b       	or	r24, r25
    20d6:	8c 93       	st	X, r24

				/*Initial value for timer 1*/
				TCNT1 = Config_Ptr->timer_InitialValue;
    20d8:	ac e4       	ldi	r26, 0x4C	; 76
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e9 81       	ldd	r30, Y+1	; 0x01
    20de:	fa 81       	ldd	r31, Y+2	; 0x02
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	11 96       	adiw	r26, 0x01	; 1
    20e6:	9c 93       	st	X, r25
    20e8:	8e 93       	st	-X, r24

				OCR1A = Config_Ptr->timer_compare_MatchValue;
    20ea:	aa e4       	ldi	r26, 0x4A	; 74
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e9 81       	ldd	r30, Y+1	; 0x01
    20f0:	fa 81       	ldd	r31, Y+2	; 0x02
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	11 96       	adiw	r26, 0x01	; 1
    20f8:	9c 93       	st	X, r25
    20fa:	8e 93       	st	-X, r24

				/*enable interrupt of timer 1 FOR compare output capture */
				SET_BIT(TIMSK, OCIE1A);
    20fc:	a9 e5       	ldi	r26, 0x59	; 89
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e9 e5       	ldi	r30, 0x59	; 89
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	80 61       	ori	r24, 0x10	; 16
    2108:	8c 93       	st	X, r24
    210a:	36 c0       	rjmp	.+108    	; 0x2178 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) == NORMAL_MODE) {
    210c:	e9 81       	ldd	r30, Y+1	; 0x01
    210e:	fa 81       	ldd	r31, Y+2	; 0x02
    2110:	86 81       	ldd	r24, Z+6	; 0x06
    2112:	88 23       	and	r24, r24
    2114:	89 f5       	brne	.+98     	; 0x2178 <Timer_init+0x2b8>
				/*non-PWM Normal port operation
				 *  COM1A1/COM1A0/COM1B1/COM1B0 = 0 */
				SET_BIT(TCCR1A, FOC1A);
    2116:	af e4       	ldi	r26, 0x4F	; 79
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	ef e4       	ldi	r30, 0x4F	; 79
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	88 60       	ori	r24, 0x08	; 8
    2122:	8c 93       	st	X, r24

				/*
				 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
				 * of TCCR1B Register
				 */
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    2124:	ae e4       	ldi	r26, 0x4E	; 78
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	ee e4       	ldi	r30, 0x4E	; 78
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	98 2f       	mov	r25, r24
    2130:	98 7f       	andi	r25, 0xF8	; 248
    2132:	e9 81       	ldd	r30, Y+1	; 0x01
    2134:	fa 81       	ldd	r31, Y+2	; 0x02
    2136:	85 81       	ldd	r24, Z+5	; 0x05
    2138:	89 2b       	or	r24, r25
    213a:	8c 93       	st	X, r24

				/*Initial value for timer 1*/
				TCNT1 = Config_Ptr->timer_InitialValue;
    213c:	ac e4       	ldi	r26, 0x4C	; 76
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e9 81       	ldd	r30, Y+1	; 0x01
    2142:	fa 81       	ldd	r31, Y+2	; 0x02
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	11 96       	adiw	r26, 0x01	; 1
    214a:	9c 93       	st	X, r25
    214c:	8e 93       	st	-X, r24

				SET_BIT(TIMSK, TOIE1);
    214e:	a9 e5       	ldi	r26, 0x59	; 89
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e9 e5       	ldi	r30, 0x59	; 89
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	84 60       	ori	r24, 0x04	; 4
    215a:	8c 93       	st	X, r24
    215c:	0d c0       	rjmp	.+26     	; 0x2178 <Timer_init+0x2b8>
			}
		} else if ((Config_Ptr->timer_ID) == TIMER2) {
    215e:	e9 81       	ldd	r30, Y+1	; 0x01
    2160:	fa 81       	ldd	r31, Y+2	; 0x02
    2162:	84 81       	ldd	r24, Z+4	; 0x04
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	41 f4       	brne	.+16     	; 0x2178 <Timer_init+0x2b8>
			if ((Config_Ptr->timer_mode) == PWM_MODE) {
    2168:	e9 81       	ldd	r30, Y+1	; 0x01
    216a:	fa 81       	ldd	r31, Y+2	; 0x02
    216c:	86 81       	ldd	r24, Z+6	; 0x06
    216e:	83 30       	cpi	r24, 0x03	; 3
    2170:	19 f0       	breq	.+6      	; 0x2178 <Timer_init+0x2b8>

			} else if ((Config_Ptr->timer_mode) ==     CTC_MODE) {
    2172:	e9 81       	ldd	r30, Y+1	; 0x01
    2174:	fa 81       	ldd	r31, Y+2	; 0x02
    2176:	86 81       	ldd	r24, Z+6	; 0x06

			} else if ((Config_Ptr->timer_mode) == NORMAL_MODE) {

			}
		}}
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <Timer_deInit+0x6>
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	3b 83       	std	Y+3, r19	; 0x03
    219a:	2a 83       	std	Y+2, r18	; 0x02
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	91 05       	cpc	r25, r1
    21a4:	b9 f0       	breq	.+46     	; 0x21d4 <Timer_deInit+0x50>
    21a6:	2a 81       	ldd	r18, Y+2	; 0x02
    21a8:	3b 81       	ldd	r19, Y+3	; 0x03
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	21 f1       	breq	.+72     	; 0x21f8 <Timer_deInit+0x74>
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	9b 81       	ldd	r25, Y+3	; 0x03
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f5       	brne	.+90     	; 0x2212 <Timer_deInit+0x8e>
	    case TIMER0:
	            // Stop Timer0 by clearing the control register
         TCCR0 = 0x00; // Clear Timer/Counter Control Register
    21b8:	e3 e5       	ldi	r30, 0x53	; 83
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	10 82       	st	Z, r1
         TCNT0 = 0x00; // Clear Timer/Counter Register
    21be:	e2 e5       	ldi	r30, 0x52	; 82
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	10 82       	st	Z, r1
         TIFR |= (1 << TOV0); // Clear overflow flag
    21c4:	a8 e5       	ldi	r26, 0x58	; 88
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e8 e5       	ldi	r30, 0x58	; 88
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	8c 93       	st	X, r24
    21d2:	1f c0       	rjmp	.+62     	; 0x2212 <Timer_deInit+0x8e>
        break;

        case TIMER1:
	      // Stop Timer1 by clearing the control register
	       TCCR1A = 0x00; // Clear Timer/Counter Control Register A
    21d4:	ef e4       	ldi	r30, 0x4F	; 79
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	10 82       	st	Z, r1
	       TCCR1B = 0x00; // Clear Timer/Counter Control Register B
    21da:	ee e4       	ldi	r30, 0x4E	; 78
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	10 82       	st	Z, r1
	       TCNT1 = 0x00; // Clear Timer/Counter Register
    21e0:	ec e4       	ldi	r30, 0x4C	; 76
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	11 82       	std	Z+1, r1	; 0x01
    21e6:	10 82       	st	Z, r1
	       TIFR |= (1 << TOV1); // Clear overflow flag
    21e8:	a8 e5       	ldi	r26, 0x58	; 88
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e8 e5       	ldi	r30, 0x58	; 88
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	84 60       	ori	r24, 0x04	; 4
    21f4:	8c 93       	st	X, r24
    21f6:	0d c0       	rjmp	.+26     	; 0x2212 <Timer_deInit+0x8e>
	    break;

	    case TIMER2:
	            // Stop Timer2 by clearing the control register
	    	TCCR2 = 0x00; // Clear Timer/Counter Control Register
    21f8:	e5 e4       	ldi	r30, 0x45	; 69
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	10 82       	st	Z, r1
	        TCNT2 = 0x00; // Clear Timer/Counter Register
    21fe:	e4 e4       	ldi	r30, 0x44	; 68
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	10 82       	st	Z, r1
	        TIFR |= (1 << TOV2); // Clear overflow flag
    2204:	a8 e5       	ldi	r26, 0x58	; 88
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e8 e5       	ldi	r30, 0x58	; 88
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	80 64       	ori	r24, 0x40	; 64
    2210:	8c 93       	st	X, r24

	        default:
	            // Handle invalid timer ID if necessary
	            break;
	    }
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <Timer_setCallBack>:

void Timer_setCallBack(CallbackFunction a_ptr, Timer_ID_Type a_timer_ID) {
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	00 d0       	rcall	.+0      	; 0x2224 <Timer_setCallBack+0x6>
    2224:	00 d0       	rcall	.+0      	; 0x2226 <Timer_setCallBack+0x8>
    2226:	0f 92       	push	r0
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	3d 83       	std	Y+5, r19	; 0x05
    223a:	2c 83       	std	Y+4, r18	; 0x04
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	9d 81       	ldd	r25, Y+5	; 0x05
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	91 05       	cpc	r25, r1
    2244:	81 f0       	breq	.+32     	; 0x2266 <Timer_setCallBack+0x48>
    2246:	2c 81       	ldd	r18, Y+4	; 0x04
    2248:	3d 81       	ldd	r19, Y+5	; 0x05
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	91 f0       	breq	.+36     	; 0x2274 <Timer_setCallBack+0x56>
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	9d 81       	ldd	r25, Y+5	; 0x05
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	a1 f4       	brne	.+40     	; 0x2280 <Timer_setCallBack+0x62>
        case TIMER0:
        	g_callBackPtr = a_ptr;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	90 93 84 00 	sts	0x0084, r25
    2260:	80 93 83 00 	sts	0x0083, r24
    2264:	0d c0       	rjmp	.+26     	; 0x2280 <Timer_setCallBack+0x62>
            break;
        case TIMER1:
        	g_callBackPtr = a_ptr;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	90 93 84 00 	sts	0x0084, r25
    226e:	80 93 83 00 	sts	0x0083, r24
    2272:	06 c0       	rjmp	.+12     	; 0x2280 <Timer_setCallBack+0x62>
            break;
        case TIMER2:
        	g_callBackPtr = a_ptr;
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	9a 81       	ldd	r25, Y+2	; 0x02
    2278:	90 93 84 00 	sts	0x0084, r25
    227c:	80 93 83 00 	sts	0x0083, r24
            break;
    }
}
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType *Config_Ptr) {
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <UART_init+0x6>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <UART_init+0x8>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    22a0:	1a 82       	std	Y+2, r1	; 0x02
    22a2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * disable Frame Error by writing 0 in FE bit
	 * U2X = 1 for double transmission speed
	 * */
	UCSRA = (1 << U2X);
    22a4:	eb e2       	ldi	r30, 0x2B	; 43
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	82 e0       	ldi	r24, 0x02	; 2
    22aa:	80 83       	st	Z, r24
	if ((Config_Ptr->parity) == UART_EVEN) {
    22ac:	eb 81       	ldd	r30, Y+3	; 0x03
    22ae:	fc 81       	ldd	r31, Y+4	; 0x04
    22b0:	81 81       	ldd	r24, Z+1	; 0x01
    22b2:	92 81       	ldd	r25, Z+2	; 0x02
    22b4:	82 30       	cpi	r24, 0x02	; 2
    22b6:	91 05       	cpc	r25, r1
    22b8:	41 f4       	brne	.+16     	; 0x22ca <UART_init+0x3a>
		SET_BIT(UCSRA, UPM1);
    22ba:	ab e2       	ldi	r26, 0x2B	; 43
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	eb e2       	ldi	r30, 0x2B	; 43
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	80 62       	ori	r24, 0x20	; 32
    22c6:	8c 93       	st	X, r24
    22c8:	15 c0       	rjmp	.+42     	; 0x22f4 <UART_init+0x64>
	} else if ((Config_Ptr->parity) == UART_ODD) {
    22ca:	eb 81       	ldd	r30, Y+3	; 0x03
    22cc:	fc 81       	ldd	r31, Y+4	; 0x04
    22ce:	81 81       	ldd	r24, Z+1	; 0x01
    22d0:	92 81       	ldd	r25, Z+2	; 0x02
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	71 f4       	brne	.+28     	; 0x22f4 <UART_init+0x64>
		SET_BIT(UCSRA, UPM0);
    22d8:	ab e2       	ldi	r26, 0x2B	; 43
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	eb e2       	ldi	r30, 0x2B	; 43
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	80 61       	ori	r24, 0x10	; 16
    22e4:	8c 93       	st	X, r24
		SET_BIT(UCSRA, UPM1);
    22e6:	ab e2       	ldi	r26, 0x2B	; 43
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	eb e2       	ldi	r30, 0x2B	; 43
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	80 62       	ori	r24, 0x20	; 32
    22f2:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	if ((Config_Ptr->bit_data) == UART_8_BIT_DATA_MODE) {
    22f4:	eb 81       	ldd	r30, Y+3	; 0x03
    22f6:	fc 81       	ldd	r31, Y+4	; 0x04
    22f8:	80 81       	ld	r24, Z
    22fa:	88 23       	and	r24, r24
    22fc:	21 f4       	brne	.+8      	; 0x2306 <UART_init+0x76>
		UCSRB = (1 << RXEN) | (1 << TXEN);
    22fe:	ea e2       	ldi	r30, 0x2A	; 42
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	88 e1       	ldi	r24, 0x18	; 24
    2304:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
    2306:	e0 e4       	ldi	r30, 0x40	; 64
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	86 e8       	ldi	r24, 0x86	; 134
    230c:	80 83       	st	Z, r24
	if ((Config_Ptr->stop_bit) == UART_2_STOP) {
    230e:	eb 81       	ldd	r30, Y+3	; 0x03
    2310:	fc 81       	ldd	r31, Y+4	; 0x04
    2312:	83 81       	ldd	r24, Z+3	; 0x03
    2314:	94 81       	ldd	r25, Z+4	; 0x04
    2316:	a5 81       	ldd	r26, Z+5	; 0x05
    2318:	b6 81       	ldd	r27, Z+6	; 0x06
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	a1 05       	cpc	r26, r1
    2320:	b1 05       	cpc	r27, r1
    2322:	39 f4       	brne	.+14     	; 0x2332 <UART_init+0xa2>
		SET_BIT(UCSRC, USBS);
    2324:	a0 e4       	ldi	r26, 0x40	; 64
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e0 e4       	ldi	r30, 0x40	; 64
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	88 60       	ori	r24, 0x08	; 8
    2330:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2332:	eb 81       	ldd	r30, Y+3	; 0x03
    2334:	fc 81       	ldd	r31, Y+4	; 0x04
    2336:	87 81       	ldd	r24, Z+7	; 0x07
    2338:	90 85       	ldd	r25, Z+8	; 0x08
    233a:	a1 85       	ldd	r26, Z+9	; 0x09
    233c:	b2 85       	ldd	r27, Z+10	; 0x0a
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	aa 1f       	adc	r26, r26
    2344:	bb 1f       	adc	r27, r27
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	aa 1f       	adc	r26, r26
    234c:	bb 1f       	adc	r27, r27
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	aa 1f       	adc	r26, r26
    2354:	bb 1f       	adc	r27, r27
    2356:	9c 01       	movw	r18, r24
    2358:	ad 01       	movw	r20, r26
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	92 e1       	ldi	r25, 0x12	; 18
    235e:	aa e7       	ldi	r26, 0x7A	; 122
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__udivmodsi4>
    236a:	da 01       	movw	r26, r20
    236c:	c9 01       	movw	r24, r18
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    2374:	e0 e4       	ldi	r30, 0x40	; 64
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	89 2f       	mov	r24, r25
    237e:	99 27       	eor	r25, r25
    2380:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2382:	e9 e2       	ldi	r30, 0x29	; 41
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	80 83       	st	Z, r24
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    23a4:	eb e2       	ldi	r30, 0x2B	; 43
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	80 72       	andi	r24, 0x20	; 32
    23b0:	90 70       	andi	r25, 0x00	; 0
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	b9 f3       	breq	.-18     	; 0x23a4 <UART_sendByte+0xc>
		;
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23b6:	ec e2       	ldi	r30, 0x2C	; 44
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    23ce:	eb e2       	ldi	r30, 0x2B	; 43
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	88 23       	and	r24, r24
    23d6:	dc f7       	brge	.-10     	; 0x23ce <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    23d8:	ec e2       	ldi	r30, 0x2C	; 44
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
}
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <UART_sendString+0x6>
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	9b 83       	std	Y+3, r25	; 0x03
    23f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23f4:	19 82       	std	Y+1, r1	; 0x01
    23f6:	0e c0       	rjmp	.+28     	; 0x2414 <UART_sendString+0x30>
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	9b 81       	ldd	r25, Y+3	; 0x03
    2402:	fc 01       	movw	r30, r24
    2404:	e2 0f       	add	r30, r18
    2406:	f3 1f       	adc	r31, r19
    2408:	80 81       	ld	r24, Z
    240a:	0e 94 cc 11 	call	0x2398	; 0x2398 <UART_sendByte>
		i++;
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	8f 5f       	subi	r24, 0xFF	; 255
    2412:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	9b 81       	ldd	r25, Y+3	; 0x03
    241e:	fc 01       	movw	r30, r24
    2420:	e2 0f       	add	r30, r18
    2422:	f3 1f       	adc	r31, r19
    2424:	80 81       	ld	r24, Z
    2426:	88 23       	and	r24, r24
    2428:	39 f7       	brne	.-50     	; 0x23f8 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) // Receive until #
{
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	00 d0       	rcall	.+0      	; 0x2440 <UART_receiveString+0xa>
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	9b 83       	std	Y+3, r25	; 0x03
    2448:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    244a:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	9b 81       	ldd	r25, Y+3	; 0x03
    2456:	8c 01       	movw	r16, r24
    2458:	02 0f       	add	r16, r18
    245a:	13 1f       	adc	r17, r19
    245c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <UART_recieveByte>
    2460:	f8 01       	movw	r30, r16
    2462:	80 83       	st	Z, r24
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <UART_receiveString+0x4e>

	while (Str[i] != '#') {
		i++;
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	8c 01       	movw	r16, r24
    2478:	02 0f       	add	r16, r18
    247a:	13 1f       	adc	r17, r19
    247c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <UART_recieveByte>
    2480:	f8 01       	movw	r30, r16
    2482:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str[i] = UART_recieveByte();

	while (Str[i] != '#') {
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	9b 81       	ldd	r25, Y+3	; 0x03
    248e:	fc 01       	movw	r30, r24
    2490:	e2 0f       	add	r30, r18
    2492:	f3 1f       	adc	r31, r19
    2494:	80 81       	ld	r24, Z
    2496:	83 32       	cpi	r24, 0x23	; 35
    2498:	31 f7       	brne	.-52     	; 0x2466 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	9b 81       	ldd	r25, Y+3	; 0x03
    24a4:	fc 01       	movw	r30, r24
    24a6:	e2 0f       	add	r30, r18
    24a8:	f3 1f       	adc	r31, r19
    24aa:	10 82       	st	Z, r1
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <__udivmodsi4>:
    24bc:	a1 e2       	ldi	r26, 0x21	; 33
    24be:	1a 2e       	mov	r1, r26
    24c0:	aa 1b       	sub	r26, r26
    24c2:	bb 1b       	sub	r27, r27
    24c4:	fd 01       	movw	r30, r26
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <__udivmodsi4_ep>

000024c8 <__udivmodsi4_loop>:
    24c8:	aa 1f       	adc	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	ee 1f       	adc	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	a2 17       	cp	r26, r18
    24d2:	b3 07       	cpc	r27, r19
    24d4:	e4 07       	cpc	r30, r20
    24d6:	f5 07       	cpc	r31, r21
    24d8:	20 f0       	brcs	.+8      	; 0x24e2 <__udivmodsi4_ep>
    24da:	a2 1b       	sub	r26, r18
    24dc:	b3 0b       	sbc	r27, r19
    24de:	e4 0b       	sbc	r30, r20
    24e0:	f5 0b       	sbc	r31, r21

000024e2 <__udivmodsi4_ep>:
    24e2:	66 1f       	adc	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	1a 94       	dec	r1
    24ec:	69 f7       	brne	.-38     	; 0x24c8 <__udivmodsi4_loop>
    24ee:	60 95       	com	r22
    24f0:	70 95       	com	r23
    24f2:	80 95       	com	r24
    24f4:	90 95       	com	r25
    24f6:	9b 01       	movw	r18, r22
    24f8:	ac 01       	movw	r20, r24
    24fa:	bd 01       	movw	r22, r26
    24fc:	cf 01       	movw	r24, r30
    24fe:	08 95       	ret

00002500 <__prologue_saves__>:
    2500:	2f 92       	push	r2
    2502:	3f 92       	push	r3
    2504:	4f 92       	push	r4
    2506:	5f 92       	push	r5
    2508:	6f 92       	push	r6
    250a:	7f 92       	push	r7
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	ca 1b       	sub	r28, r26
    252a:	db 0b       	sbc	r29, r27
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	09 94       	ijmp

00002538 <__epilogue_restores__>:
    2538:	2a 88       	ldd	r2, Y+18	; 0x12
    253a:	39 88       	ldd	r3, Y+17	; 0x11
    253c:	48 88       	ldd	r4, Y+16	; 0x10
    253e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2540:	6e 84       	ldd	r6, Y+14	; 0x0e
    2542:	7d 84       	ldd	r7, Y+13	; 0x0d
    2544:	8c 84       	ldd	r8, Y+12	; 0x0c
    2546:	9b 84       	ldd	r9, Y+11	; 0x0b
    2548:	aa 84       	ldd	r10, Y+10	; 0x0a
    254a:	b9 84       	ldd	r11, Y+9	; 0x09
    254c:	c8 84       	ldd	r12, Y+8	; 0x08
    254e:	df 80       	ldd	r13, Y+7	; 0x07
    2550:	ee 80       	ldd	r14, Y+6	; 0x06
    2552:	fd 80       	ldd	r15, Y+5	; 0x05
    2554:	0c 81       	ldd	r16, Y+4	; 0x04
    2556:	1b 81       	ldd	r17, Y+3	; 0x03
    2558:	aa 81       	ldd	r26, Y+2	; 0x02
    255a:	b9 81       	ldd	r27, Y+1	; 0x01
    255c:	ce 0f       	add	r28, r30
    255e:	d1 1d       	adc	r29, r1
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	ed 01       	movw	r28, r26
    256c:	08 95       	ret

0000256e <_exit>:
    256e:	f8 94       	cli

00002570 <__stop_program>:
    2570:	ff cf       	rjmp	.-2      	; 0x2570 <__stop_program>
