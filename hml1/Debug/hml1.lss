
hml1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00003386  0000341a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080018e  0080018e  00003548  2**0
                  ALLOC
  3 .stab         000030cc  00000000  00000000  00003548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d2  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000079e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b578  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b965  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__vector_4>
      14:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_9>
      28:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__vector_10>
      2c:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 19 	jmp	0x328a	; 0x328a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 19 	jmp	0x328a	; 0x328a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
	UART_1_STOP, baud_9600 };
Timer_ConfigType Timer_ConfigType_1 = { 0, 31249, TIMER1,F_CPU_256 ,CTC_MODE};
/*equation time counter =(req_time(1s)( /(clock time period))) - 1
 * clock time period = frequency of system = frequency of CPU / N(prescaler)*/

int main() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	UART_init(&UART_ConfigType_1);
     b4e:	8c e7       	ldi	r24, 0x7C	; 124
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 0d 18 	call	0x301a	; 0x301a <UART_init>
	LCD_init();
     b56:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_init>
	LCD_displayString("Door Lock system");
     b5a:	80 e6       	ldi	r24, 0x60	; 96
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	Timer_init(&Timer_ConfigType_1);
     b62:	87 e8       	ldi	r24, 0x87	; 135
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <Timer_init>
	Timer_setCallBack(Message_Wrong_Pass,TIMER1);
     b6a:	85 e9       	ldi	r24, 0x95	; 149
     b6c:	9a e0       	ldi	r25, 0x0A	; 10
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Timer_setCallBack>

	while (1) {
		wrong_correct = UART_recieveByte();
     b74:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_recieveByte>
     b78:	80 93 ab 01 	sts	0x01AB, r24
		if (wrong_correct == 'Z') {
     b7c:	80 91 ab 01 	lds	r24, 0x01AB
     b80:	8a 35       	cpi	r24, 0x5A	; 90
     b82:	19 f4       	brne	.+6      	; 0xb8a <main+0x44>
			Display();
     b84:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Display>
     b88:	f5 cf       	rjmp	.-22     	; 0xb74 <main+0x2e>
		} else if (wrong_correct == 'R') {
     b8a:	80 91 ab 01 	lds	r24, 0x01AB
     b8e:	82 35       	cpi	r24, 0x52	; 82
     b90:	c1 f4       	brne	.+48     	; 0xbc2 <main+0x7c>
			LCD_clearScreen();
     b92:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
			LCD_displayString("  Wrong in ");
     b96:	81 e7       	ldi	r24, 0x71	; 113
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
			LCD_moveCursor(1, 0);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
			LCD_displayString("  Password");
     ba6:	8d e7       	ldi	r24, 0x7D	; 125
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
			Timer_init(&Timer_ConfigType_1);
     bae:	87 e8       	ldi	r24, 0x87	; 135
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <Timer_init>
			Timer_setCallBack(Message_Wrong_Pass,TIMER1);
     bb6:	85 e9       	ldi	r24, 0x95	; 149
     bb8:	9a e0       	ldi	r25, 0x0A	; 10
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Timer_setCallBack>
     bc0:	d9 cf       	rjmp	.-78     	; 0xb74 <main+0x2e>
		} else if (wrong_correct == 'A') {
     bc2:	80 91 ab 01 	lds	r24, 0x01AB
     bc6:	81 34       	cpi	r24, 0x41	; 65
     bc8:	79 f4       	brne	.+30     	; 0xbe8 <main+0xa2>
			LCD_clearScreen();
     bca:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
			LCD_displayString("Door Unlocking");
     bce:	88 e8       	ldi	r24, 0x88	; 136
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
			LCD_moveCursor(1, 3);
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	63 e0       	ldi	r22, 0x03	; 3
     bda:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
			LCD_displayString("Please wait");
     bde:	87 e9       	ldi	r24, 0x97	; 151
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
     be6:	c6 cf       	rjmp	.-116    	; 0xb74 <main+0x2e>
		} else if (wrong_correct == 'B') {
     be8:	80 91 ab 01 	lds	r24, 0x01AB
     bec:	82 34       	cpi	r24, 0x42	; 66
     bee:	e9 f4       	brne	.+58     	; 0xc2a <main+0xe4>
			if (dis_flag == 0) {
     bf0:	80 91 ac 01 	lds	r24, 0x01AC
     bf4:	88 23       	and	r24, r24
     bf6:	a9 f4       	brne	.+42     	; 0xc22 <main+0xdc>
				dis_flag = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 ac 01 	sts	0x01AC, r24
				LCD_clearScreen();
     bfe:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
				LCD_displayString("Wait for people");
     c02:	83 ea       	ldi	r24, 0xA3	; 163
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
				LCD_moveCursor(1, 3);
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	63 e0       	ldi	r22, 0x03	; 3
     c0e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
				LCD_displayString("to Enter");
     c12:	83 eb       	ldi	r24, 0xB3	; 179
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
				UART_sendByte('N');
     c1a:	8e e4       	ldi	r24, 0x4E	; 78
     c1c:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_sendByte>
     c20:	a9 cf       	rjmp	.-174    	; 0xb74 <main+0x2e>
			} else {
				UART_sendByte('N');
     c22:	8e e4       	ldi	r24, 0x4E	; 78
     c24:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_sendByte>
     c28:	a5 cf       	rjmp	.-182    	; 0xb74 <main+0x2e>
			}
		} else if (wrong_correct == 'K') {
     c2a:	80 91 ab 01 	lds	r24, 0x01AB
     c2e:	8b 34       	cpi	r24, 0x4B	; 75
     c30:	c1 f4       	brne	.+48     	; 0xc62 <main+0x11c>
			LCD_clearScreen();
     c32:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
			LCD_displayString("   Door is");
     c36:	8c eb       	ldi	r24, 0xBC	; 188
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
			LCD_moveCursor(1, 3);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
			LCD_displayString("locking");
     c46:	87 ec       	ldi	r24, 0xC7	; 199
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>


			Timer_init(&Timer_ConfigType_1);
     c4e:	87 e8       	ldi	r24, 0x87	; 135
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <Timer_init>
			Timer_setCallBack(Message_Wrong_Pass_15,TIMER1);
     c56:	81 ed       	ldi	r24, 0xD1	; 209
     c58:	9a e0       	ldi	r25, 0x0A	; 10
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Timer_setCallBack>
     c60:	89 cf       	rjmp	.-238    	; 0xb74 <main+0x2e>

/*
			_delay_ms(15000);
			Open_OR_Check();
*/
		} else if (wrong_correct == 'T') {
     c62:	80 91 ab 01 	lds	r24, 0x01AB
     c66:	84 35       	cpi	r24, 0x54	; 84
     c68:	09 f0       	breq	.+2      	; 0xc6c <main+0x126>
     c6a:	84 cf       	rjmp	.-248    	; 0xb74 <main+0x2e>
			LCD_clearScreen();
     c6c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
			LCD_displayString(" System Locked");
     c70:	8f ec       	ldi	r24, 0xCF	; 207
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
			LCD_moveCursor(1, 0);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
			LCD_displayString("Wait for 1 Min");
     c80:	8e ed       	ldi	r24, 0xDE	; 222
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>



			Timer_init(&Timer_ConfigType_1);
     c88:	87 e8       	ldi	r24, 0x87	; 135
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <Timer_init>
			Timer_setCallBack(Message_Wrong_Pass_60,TIMER1);
     c90:	88 ee       	ldi	r24, 0xE8	; 232
     c92:	9a e0       	ldi	r25, 0x0A	; 10
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Timer_setCallBack>
     c9a:	6c cf       	rjmp	.-296    	; 0xb74 <main+0x2e>

00000c9c <Display>:
			*/
		}
	}
}

void Display(void) {
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	ae 97       	sbiw	r28, 0x2e	; 46
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     cb0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("Plz enter pass:");
     cb4:	8d ee       	ldi	r24, 0xED	; 237
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	LCD_moveCursor(1, 0);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {
     cc4:	1e a6       	std	Y+46, r1	; 0x2e
     cc6:	91 c0       	rjmp	.+290    	; 0xdea <Display+0x14e>
		key1 = KEYPAD_getPressedKey();
     cc8:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <KEYPAD_getPressedKey>
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	90 93 8f 01 	sts	0x018F, r25
     cd4:	80 93 8e 01 	sts	0x018E, r24
		first_pass[i] = key1;
     cd8:	8e a5       	ldd	r24, Y+46	; 0x2e
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	20 91 8e 01 	lds	r18, 0x018E
     ce2:	30 91 8f 01 	lds	r19, 0x018F
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	fc 01       	movw	r30, r24
     cec:	e0 57       	subi	r30, 0x70	; 112
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	31 83       	std	Z+1, r19	; 0x01
     cf2:	20 83       	st	Z, r18
		if (i == MAX_NUM_PASSWORD) {
     cf4:	8e a5       	ldd	r24, Y+46	; 0x2e
     cf6:	85 30       	cpi	r24, 0x05	; 5
     cf8:	19 f0       	breq	.+6      	; 0xd00 <Display+0x64>

		} else {
			LCD_displayCharacter('*');
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_displayCharacter>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	aa ef       	ldi	r26, 0xFA	; 250
     d06:	b3 e4       	ldi	r27, 0x43	; 67
     d08:	8f a3       	std	Y+39, r24	; 0x27
     d0a:	98 a7       	std	Y+40, r25	; 0x28
     d0c:	a9 a7       	std	Y+41, r26	; 0x29
     d0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d10:	6f a1       	ldd	r22, Y+39	; 0x27
     d12:	78 a5       	ldd	r23, Y+40	; 0x28
     d14:	89 a5       	ldd	r24, Y+41	; 0x29
     d16:	9a a5       	ldd	r25, Y+42	; 0x2a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4a ef       	ldi	r20, 0xFA	; 250
     d1e:	54 e4       	ldi	r21, 0x44	; 68
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	8b a3       	std	Y+35, r24	; 0x23
     d2a:	9c a3       	std	Y+36, r25	; 0x24
     d2c:	ad a3       	std	Y+37, r26	; 0x25
     d2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d30:	6b a1       	ldd	r22, Y+35	; 0x23
     d32:	7c a1       	ldd	r23, Y+36	; 0x24
     d34:	8d a1       	ldd	r24, Y+37	; 0x25
     d36:	9e a1       	ldd	r25, Y+38	; 0x26
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	5f e3       	ldi	r21, 0x3F	; 63
     d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d44:	88 23       	and	r24, r24
     d46:	2c f4       	brge	.+10     	; 0xd52 <Display+0xb6>
		__ticks = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9a a3       	std	Y+34, r25	; 0x22
     d4e:	89 a3       	std	Y+33, r24	; 0x21
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <Display+0x134>
	else if (__tmp > 65535)
     d52:	6b a1       	ldd	r22, Y+35	; 0x23
     d54:	7c a1       	ldd	r23, Y+36	; 0x24
     d56:	8d a1       	ldd	r24, Y+37	; 0x25
     d58:	9e a1       	ldd	r25, Y+38	; 0x26
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	4f e7       	ldi	r20, 0x7F	; 127
     d60:	57 e4       	ldi	r21, 0x47	; 71
     d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d66:	18 16       	cp	r1, r24
     d68:	4c f5       	brge	.+82     	; 0xdbc <Display+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6a:	6f a1       	ldd	r22, Y+39	; 0x27
     d6c:	78 a5       	ldd	r23, Y+40	; 0x28
     d6e:	89 a5       	ldd	r24, Y+41	; 0x29
     d70:	9a a5       	ldd	r25, Y+42	; 0x2a
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9a a3       	std	Y+34, r25	; 0x22
     d90:	89 a3       	std	Y+33, r24	; 0x21
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <Display+0x116>
     d94:	88 ec       	ldi	r24, 0xC8	; 200
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	98 a3       	std	Y+32, r25	; 0x20
     d9a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d9e:	98 a1       	ldd	r25, Y+32	; 0x20
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <Display+0x104>
     da4:	98 a3       	std	Y+32, r25	; 0x20
     da6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da8:	89 a1       	ldd	r24, Y+33	; 0x21
     daa:	9a a1       	ldd	r25, Y+34	; 0x22
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	9a a3       	std	Y+34, r25	; 0x22
     db0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db2:	89 a1       	ldd	r24, Y+33	; 0x21
     db4:	9a a1       	ldd	r25, Y+34	; 0x22
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	69 f7       	brne	.-38     	; 0xd94 <Display+0xf8>
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <Display+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dbc:	6b a1       	ldd	r22, Y+35	; 0x23
     dbe:	7c a1       	ldd	r23, Y+36	; 0x24
     dc0:	8d a1       	ldd	r24, Y+37	; 0x25
     dc2:	9e a1       	ldd	r25, Y+38	; 0x26
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9a a3       	std	Y+34, r25	; 0x22
     dce:	89 a3       	std	Y+33, r24	; 0x21
     dd0:	89 a1       	ldd	r24, Y+33	; 0x21
     dd2:	9a a1       	ldd	r25, Y+34	; 0x22
     dd4:	9e 8f       	std	Y+30, r25	; 0x1e
     dd6:	8d 8f       	std	Y+29, r24	; 0x1d
     dd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dda:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <Display+0x140>
     de0:	9e 8f       	std	Y+30, r25	; 0x1e
     de2:	8d 8f       	std	Y+29, r24	; 0x1d

void Display(void) {
	LCD_clearScreen();
	LCD_displayString("Plz enter pass:");
	LCD_moveCursor(1, 0);
	for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {
     de4:	8e a5       	ldd	r24, Y+46	; 0x2e
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	8e a7       	std	Y+46, r24	; 0x2e
     dea:	8e a5       	ldd	r24, Y+46	; 0x2e
     dec:	86 30       	cpi	r24, 0x06	; 6
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <Display+0x156>
     df0:	6b cf       	rjmp	.-298    	; 0xcc8 <Display+0x2c>
		} else {
			LCD_displayCharacter('*');
		}
		_delay_ms(500);
	}
	if (first_pass[5] == 'C') {
     df2:	80 91 9a 01 	lds	r24, 0x019A
     df6:	90 91 9b 01 	lds	r25, 0x019B
     dfa:	83 34       	cpi	r24, 0x43	; 67
     dfc:	91 05       	cpc	r25, r1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <Display+0x166>
     e00:	86 c1       	rjmp	.+780    	; 0x110e <Display+0x472>
		LCD_clearScreen();
     e02:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
		LCD_displayString("Plz re-enter the");
     e06:	8d ef       	ldi	r24, 0xFD	; 253
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
		LCD_moveCursor(1, 0);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
		LCD_displayString("same pass:");
     e16:	8e e0       	ldi	r24, 0x0E	; 14
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
		LCD_moveCursor(1, 10);
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	6a e0       	ldi	r22, 0x0A	; 10
     e22:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
		for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {///////////////////
     e26:	1d a6       	std	Y+45, r1	; 0x2d
     e28:	91 c0       	rjmp	.+290    	; 0xf4c <Display+0x2b0>
			key1 = KEYPAD_getPressedKey();
     e2a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <KEYPAD_getPressedKey>
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 8f 01 	sts	0x018F, r25
     e36:	80 93 8e 01 	sts	0x018E, r24
			second_pass[i] = key1;
     e3a:	8d a5       	ldd	r24, Y+45	; 0x2d
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	20 91 8e 01 	lds	r18, 0x018E
     e44:	30 91 8f 01 	lds	r19, 0x018F
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	fc 01       	movw	r30, r24
     e4e:	e6 56       	subi	r30, 0x66	; 102
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	31 83       	std	Z+1, r19	; 0x01
     e54:	20 83       	st	Z, r18
			if (i == MAX_NUM_PASSWORD) {
     e56:	8d a5       	ldd	r24, Y+45	; 0x2d
     e58:	85 30       	cpi	r24, 0x05	; 5
     e5a:	19 f0       	breq	.+6      	; 0xe62 <Display+0x1c6>
			} else {
				LCD_displayCharacter('*');
     e5c:	8a e2       	ldi	r24, 0x2A	; 42
     e5e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_displayCharacter>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	aa ef       	ldi	r26, 0xFA	; 250
     e68:	b3 e4       	ldi	r27, 0x43	; 67
     e6a:	89 8f       	std	Y+25, r24	; 0x19
     e6c:	9a 8f       	std	Y+26, r25	; 0x1a
     e6e:	ab 8f       	std	Y+27, r26	; 0x1b
     e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e72:	69 8d       	ldd	r22, Y+25	; 0x19
     e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	4a ef       	ldi	r20, 0xFA	; 250
     e80:	54 e4       	ldi	r21, 0x44	; 68
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	8d 8b       	std	Y+21, r24	; 0x15
     e8c:	9e 8b       	std	Y+22, r25	; 0x16
     e8e:	af 8b       	std	Y+23, r26	; 0x17
     e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e92:	6d 89       	ldd	r22, Y+21	; 0x15
     e94:	7e 89       	ldd	r23, Y+22	; 0x16
     e96:	8f 89       	ldd	r24, Y+23	; 0x17
     e98:	98 8d       	ldd	r25, Y+24	; 0x18
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e8       	ldi	r20, 0x80	; 128
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <Display+0x218>
		__ticks = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	9c 8b       	std	Y+20, r25	; 0x14
     eb0:	8b 8b       	std	Y+19, r24	; 0x13
     eb2:	3f c0       	rjmp	.+126    	; 0xf32 <Display+0x296>
	else if (__tmp > 65535)
     eb4:	6d 89       	ldd	r22, Y+21	; 0x15
     eb6:	7e 89       	ldd	r23, Y+22	; 0x16
     eb8:	8f 89       	ldd	r24, Y+23	; 0x17
     eba:	98 8d       	ldd	r25, Y+24	; 0x18
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	3f ef       	ldi	r19, 0xFF	; 255
     ec0:	4f e7       	ldi	r20, 0x7F	; 127
     ec2:	57 e4       	ldi	r21, 0x47	; 71
     ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec8:	18 16       	cp	r1, r24
     eca:	4c f5       	brge	.+82     	; 0xf1e <Display+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ecc:	69 8d       	ldd	r22, Y+25	; 0x19
     ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e2       	ldi	r20, 0x20	; 32
     eda:	51 e4       	ldi	r21, 0x41	; 65
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9c 8b       	std	Y+20, r25	; 0x14
     ef2:	8b 8b       	std	Y+19, r24	; 0x13
     ef4:	0f c0       	rjmp	.+30     	; 0xf14 <Display+0x278>
     ef6:	88 ec       	ldi	r24, 0xC8	; 200
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9a 8b       	std	Y+18, r25	; 0x12
     efc:	89 8b       	std	Y+17, r24	; 0x11
     efe:	89 89       	ldd	r24, Y+17	; 0x11
     f00:	9a 89       	ldd	r25, Y+18	; 0x12
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <Display+0x266>
     f06:	9a 8b       	std	Y+18, r25	; 0x12
     f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0a:	8b 89       	ldd	r24, Y+19	; 0x13
     f0c:	9c 89       	ldd	r25, Y+20	; 0x14
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	9c 8b       	std	Y+20, r25	; 0x14
     f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f14:	8b 89       	ldd	r24, Y+19	; 0x13
     f16:	9c 89       	ldd	r25, Y+20	; 0x14
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	69 f7       	brne	.-38     	; 0xef6 <Display+0x25a>
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <Display+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1e:	6d 89       	ldd	r22, Y+21	; 0x15
     f20:	7e 89       	ldd	r23, Y+22	; 0x16
     f22:	8f 89       	ldd	r24, Y+23	; 0x17
     f24:	98 8d       	ldd	r25, Y+24	; 0x18
     f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	9c 8b       	std	Y+20, r25	; 0x14
     f30:	8b 8b       	std	Y+19, r24	; 0x13
     f32:	8b 89       	ldd	r24, Y+19	; 0x13
     f34:	9c 89       	ldd	r25, Y+20	; 0x14
     f36:	98 8b       	std	Y+16, r25	; 0x10
     f38:	8f 87       	std	Y+15, r24	; 0x0f
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	98 89       	ldd	r25, Y+16	; 0x10
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	f1 f7       	brne	.-4      	; 0xf3e <Display+0x2a2>
     f42:	98 8b       	std	Y+16, r25	; 0x10
     f44:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
		LCD_displayString("Plz re-enter the");
		LCD_moveCursor(1, 0);
		LCD_displayString("same pass:");
		LCD_moveCursor(1, 10);
		for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {///////////////////
     f46:	8d a5       	ldd	r24, Y+45	; 0x2d
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	8d a7       	std	Y+45, r24	; 0x2d
     f4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f4e:	86 30       	cpi	r24, 0x06	; 6
     f50:	08 f4       	brcc	.+2      	; 0xf54 <Display+0x2b8>
     f52:	6b cf       	rjmp	.-298    	; 0xe2a <Display+0x18e>
			} else {
				LCD_displayCharacter('*');
			}
			_delay_ms(500);
		}
		if (second_pass[5] == 67) {
     f54:	80 91 a4 01 	lds	r24, 0x01A4
     f58:	90 91 a5 01 	lds	r25, 0x01A5
     f5c:	83 34       	cpi	r24, 0x43	; 67
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f0       	breq	.+2      	; 0xf64 <Display+0x2c8>
     f62:	d2 c0       	rjmp	.+420    	; 0x1108 <Display+0x46c>
			for (uint8 i = 0; i < MAX_NUM_PASSWORD; i++) {
     f64:	1c a6       	std	Y+44, r1	; 0x2c
     f66:	21 c0       	rjmp	.+66     	; 0xfaa <Display+0x30e>
				if (first_pass[i] == second_pass[i]) {
     f68:	8c a5       	ldd	r24, Y+44	; 0x2c
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	fc 01       	movw	r30, r24
     f74:	e0 57       	subi	r30, 0x70	; 112
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	20 81       	ld	r18, Z
     f7a:	31 81       	ldd	r19, Z+1	; 0x01
     f7c:	8c a5       	ldd	r24, Y+44	; 0x2c
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	fc 01       	movw	r30, r24
     f88:	e6 56       	subi	r30, 0x66	; 102
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	39 f0       	breq	.+14     	; 0xfa4 <Display+0x308>

				} else {
					flag = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 a5 01 	sts	0x01A5, r25
     f9e:	80 93 a4 01 	sts	0x01A4, r24
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <Display+0x314>
				LCD_displayCharacter('*');
			}
			_delay_ms(500);
		}
		if (second_pass[5] == 67) {
			for (uint8 i = 0; i < MAX_NUM_PASSWORD; i++) {
     fa4:	8c a5       	ldd	r24, Y+44	; 0x2c
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	8c a7       	std	Y+44, r24	; 0x2c
     faa:	8c a5       	ldd	r24, Y+44	; 0x2c
     fac:	85 30       	cpi	r24, 0x05	; 5
     fae:	e0 f2       	brcs	.-72     	; 0xf68 <Display+0x2cc>
				} else {
					flag = 1;
					break;
				}
			}
			if (flag == 1) {
     fb0:	80 91 a4 01 	lds	r24, 0x01A4
     fb4:	90 91 a5 01 	lds	r25, 0x01A5
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	91 05       	cpc	r25, r1
     fbc:	c1 f4       	brne	.+48     	; 0xfee <Display+0x352>
				LCD_clearScreen();
     fbe:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
				LCD_displayString("Two Passwords");
     fc2:	89 e1       	ldi	r24, 0x19	; 25
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
				LCD_moveCursor(1,0);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
				LCD_displayString("Not Identical");
     fd2:	87 e2       	ldi	r24, 0x27	; 39
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
				Timer_init(&Timer_ConfigType_1);
     fda:	87 e8       	ldi	r24, 0x87	; 135
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <Timer_init>
				Timer_setCallBack(Message_Wrong_Pass,TIMER1);
     fe2:	85 e9       	ldi	r24, 0x95	; 149
     fe4:	9a e0       	ldi	r25, 0x0A	; 10
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Timer_setCallBack>
     fec:	92 c0       	rjmp	.+292    	; 0x1112 <Display+0x476>
			} else {
				UART_sendByte('X');
     fee:	88 e5       	ldi	r24, 0x58	; 88
     ff0:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_sendByte>
				for (uint8 j = 0; j < MAX_NUM_PASSWORD; j++) {
     ff4:	1b a6       	std	Y+43, r1	; 0x2b
     ff6:	81 c0       	rjmp	.+258    	; 0x10fa <Display+0x45e>
					UART_sendByte(first_pass[j]);
     ff8:	8b a5       	ldd	r24, Y+43	; 0x2b
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	fc 01       	movw	r30, r24
    1004:	e0 57       	subi	r30, 0x70	; 112
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_sendByte>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a0 e2       	ldi	r26, 0x20	; 32
    1016:	b1 e4       	ldi	r27, 0x41	; 65
    1018:	8b 87       	std	Y+11, r24	; 0x0b
    101a:	9c 87       	std	Y+12, r25	; 0x0c
    101c:	ad 87       	std	Y+13, r26	; 0x0d
    101e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1020:	6b 85       	ldd	r22, Y+11	; 0x0b
    1022:	7c 85       	ldd	r23, Y+12	; 0x0c
    1024:	8d 85       	ldd	r24, Y+13	; 0x0d
    1026:	9e 85       	ldd	r25, Y+14	; 0x0e
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	4a ef       	ldi	r20, 0xFA	; 250
    102e:	54 e4       	ldi	r21, 0x44	; 68
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	8f 83       	std	Y+7, r24	; 0x07
    103a:	98 87       	std	Y+8, r25	; 0x08
    103c:	a9 87       	std	Y+9, r26	; 0x09
    103e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1040:	6f 81       	ldd	r22, Y+7	; 0x07
    1042:	78 85       	ldd	r23, Y+8	; 0x08
    1044:	89 85       	ldd	r24, Y+9	; 0x09
    1046:	9a 85       	ldd	r25, Y+10	; 0x0a
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e8       	ldi	r20, 0x80	; 128
    104e:	5f e3       	ldi	r21, 0x3F	; 63
    1050:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1054:	88 23       	and	r24, r24
    1056:	2c f4       	brge	.+10     	; 0x1062 <Display+0x3c6>
		__ticks = 1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	3f c0       	rjmp	.+126    	; 0x10e0 <Display+0x444>
	else if (__tmp > 65535)
    1062:	6f 81       	ldd	r22, Y+7	; 0x07
    1064:	78 85       	ldd	r23, Y+8	; 0x08
    1066:	89 85       	ldd	r24, Y+9	; 0x09
    1068:	9a 85       	ldd	r25, Y+10	; 0x0a
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	3f ef       	ldi	r19, 0xFF	; 255
    106e:	4f e7       	ldi	r20, 0x7F	; 127
    1070:	57 e4       	ldi	r21, 0x47	; 71
    1072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1076:	18 16       	cp	r1, r24
    1078:	4c f5       	brge	.+82     	; 0x10cc <Display+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107a:	6b 85       	ldd	r22, Y+11	; 0x0b
    107c:	7c 85       	ldd	r23, Y+12	; 0x0c
    107e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1080:	9e 85       	ldd	r25, Y+14	; 0x0e
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e2       	ldi	r20, 0x20	; 32
    1088:	51 e4       	ldi	r21, 0x41	; 65
    108a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	9e 83       	std	Y+6, r25	; 0x06
    10a0:	8d 83       	std	Y+5, r24	; 0x05
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <Display+0x426>
    10a4:	88 ec       	ldi	r24, 0xC8	; 200
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9c 83       	std	Y+4, r25	; 0x04
    10aa:	8b 83       	std	Y+3, r24	; 0x03
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <Display+0x414>
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	9e 83       	std	Y+6, r25	; 0x06
    10c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	69 f7       	brne	.-38     	; 0x10a4 <Display+0x408>
    10ca:	14 c0       	rjmp	.+40     	; 0x10f4 <Display+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <Display+0x450>
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
				LCD_displayString("Not Identical");
				Timer_init(&Timer_ConfigType_1);
				Timer_setCallBack(Message_Wrong_Pass,TIMER1);
			} else {
				UART_sendByte('X');
				for (uint8 j = 0; j < MAX_NUM_PASSWORD; j++) {
    10f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    10f6:	8f 5f       	subi	r24, 0xFF	; 255
    10f8:	8b a7       	std	Y+43, r24	; 0x2b
    10fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <Display+0x466>
    1100:	7b cf       	rjmp	.-266    	; 0xff8 <Display+0x35c>
					UART_sendByte(first_pass[j]);
					_delay_ms(10);
				}
				Open_OR_Check();
    1102:	0e 94 92 08 	call	0x1124	; 0x1124 <Open_OR_Check>
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <Display+0x476>
			}
		} else {
			return Display();
    1108:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Display>
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <Display+0x476>
		}
	} else {
		return Display();
    110e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Display>
	}
}
    1112:	ae 96       	adiw	r28, 0x2e	; 46
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <Open_OR_Check>:

void Open_OR_Check(void) {
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	ac 97       	sbiw	r28, 0x2c	; 44
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    113c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1140:	85 e3       	ldi	r24, 0x35	; 53
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    1150:	83 e4       	ldi	r24, 0x43	; 67
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	key1 = KEYPAD_getPressedKey();
    1158:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <KEYPAD_getPressedKey>
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	90 93 8f 01 	sts	0x018F, r25
    1164:	80 93 8e 01 	sts	0x018E, r24
	if ((key1 == '+') || (key1 == '-')) {
    1168:	80 91 8e 01 	lds	r24, 0x018E
    116c:	90 91 8f 01 	lds	r25, 0x018F
    1170:	8b 32       	cpi	r24, 0x2B	; 43
    1172:	91 05       	cpc	r25, r1
    1174:	41 f0       	breq	.+16     	; 0x1186 <Open_OR_Check+0x62>
    1176:	80 91 8e 01 	lds	r24, 0x018E
    117a:	90 91 8f 01 	lds	r25, 0x018F
    117e:	8d 32       	cpi	r24, 0x2D	; 45
    1180:	91 05       	cpc	r25, r1
    1182:	09 f0       	breq	.+2      	; 0x1186 <Open_OR_Check+0x62>
    1184:	c5 c1       	rjmp	.+906    	; 0x1510 <Open_OR_Check+0x3ec>
		UART_sendByte(key1);
    1186:	80 91 8e 01 	lds	r24, 0x018E
    118a:	90 91 8f 01 	lds	r25, 0x018F
    118e:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_sendByte>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	aa ef       	ldi	r26, 0xFA	; 250
    1198:	b3 e4       	ldi	r27, 0x43	; 67
    119a:	8f a3       	std	Y+39, r24	; 0x27
    119c:	98 a7       	std	Y+40, r25	; 0x28
    119e:	a9 a7       	std	Y+41, r26	; 0x29
    11a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	6f a1       	ldd	r22, Y+39	; 0x27
    11a4:	78 a5       	ldd	r23, Y+40	; 0x28
    11a6:	89 a5       	ldd	r24, Y+41	; 0x29
    11a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a ef       	ldi	r20, 0xFA	; 250
    11b0:	54 e4       	ldi	r21, 0x44	; 68
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	8b a3       	std	Y+35, r24	; 0x23
    11bc:	9c a3       	std	Y+36, r25	; 0x24
    11be:	ad a3       	std	Y+37, r26	; 0x25
    11c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11c2:	6b a1       	ldd	r22, Y+35	; 0x23
    11c4:	7c a1       	ldd	r23, Y+36	; 0x24
    11c6:	8d a1       	ldd	r24, Y+37	; 0x25
    11c8:	9e a1       	ldd	r25, Y+38	; 0x26
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <Open_OR_Check+0xc0>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9a a3       	std	Y+34, r25	; 0x22
    11e0:	89 a3       	std	Y+33, r24	; 0x21
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <Open_OR_Check+0x13e>
	else if (__tmp > 65535)
    11e4:	6b a1       	ldd	r22, Y+35	; 0x23
    11e6:	7c a1       	ldd	r23, Y+36	; 0x24
    11e8:	8d a1       	ldd	r24, Y+37	; 0x25
    11ea:	9e a1       	ldd	r25, Y+38	; 0x26
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <Open_OR_Check+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	6f a1       	ldd	r22, Y+39	; 0x27
    11fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1200:	89 a5       	ldd	r24, Y+41	; 0x29
    1202:	9a a5       	ldd	r25, Y+42	; 0x2a
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9a a3       	std	Y+34, r25	; 0x22
    1222:	89 a3       	std	Y+33, r24	; 0x21
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <Open_OR_Check+0x120>
    1226:	88 ec       	ldi	r24, 0xC8	; 200
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	98 a3       	std	Y+32, r25	; 0x20
    122c:	8f 8f       	std	Y+31, r24	; 0x1f
    122e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1230:	98 a1       	ldd	r25, Y+32	; 0x20
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <Open_OR_Check+0x10e>
    1236:	98 a3       	std	Y+32, r25	; 0x20
    1238:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	89 a1       	ldd	r24, Y+33	; 0x21
    123c:	9a a1       	ldd	r25, Y+34	; 0x22
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9a a3       	std	Y+34, r25	; 0x22
    1242:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	89 a1       	ldd	r24, Y+33	; 0x21
    1246:	9a a1       	ldd	r25, Y+34	; 0x22
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <Open_OR_Check+0x102>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <Open_OR_Check+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	6b a1       	ldd	r22, Y+35	; 0x23
    1250:	7c a1       	ldd	r23, Y+36	; 0x24
    1252:	8d a1       	ldd	r24, Y+37	; 0x25
    1254:	9e a1       	ldd	r25, Y+38	; 0x26
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9a a3       	std	Y+34, r25	; 0x22
    1260:	89 a3       	std	Y+33, r24	; 0x21
    1262:	89 a1       	ldd	r24, Y+33	; 0x21
    1264:	9a a1       	ldd	r25, Y+34	; 0x22
    1266:	9e 8f       	std	Y+30, r25	; 0x1e
    1268:	8d 8f       	std	Y+29, r24	; 0x1d
    126a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    126c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <Open_OR_Check+0x14a>
    1272:	9e 8f       	std	Y+30, r25	; 0x1e
    1274:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		LCD_clearScreen();
    1276:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
		LCD_displayString("Plz enter old");
    127a:	83 e5       	ldi	r24, 0x53	; 83
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
		LCD_displayString("pass:");
    128a:	81 e6       	ldi	r24, 0x61	; 97
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
		LCD_moveCursor(1, 5);
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	65 e0       	ldi	r22, 0x05	; 5
    1296:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
		key1 = 0;
    129a:	10 92 8f 01 	sts	0x018F, r1
    129e:	10 92 8e 01 	sts	0x018E, r1
		for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {
    12a2:	1c a6       	std	Y+44, r1	; 0x2c
    12a4:	8a c0       	rjmp	.+276    	; 0x13ba <Open_OR_Check+0x296>
			first_pass[i] = KEYPAD_getPressedKey();
    12a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    12a8:	08 2f       	mov	r16, r24
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <KEYPAD_getPressedKey>
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	c8 01       	movw	r24, r16
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	fc 01       	movw	r30, r24
    12bc:	e0 57       	subi	r30, 0x70	; 112
    12be:	fe 4f       	sbci	r31, 0xFE	; 254
    12c0:	31 83       	std	Z+1, r19	; 0x01
    12c2:	20 83       	st	Z, r18
			if (i == MAX_NUM_PASSWORD) {
    12c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    12c6:	85 30       	cpi	r24, 0x05	; 5
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <Open_OR_Check+0x1ac>
			} else {

				// LCD_intgerToString(first_pass[i]);

				LCD_displayCharacter('*');
    12ca:	8a e2       	ldi	r24, 0x2A	; 42
    12cc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_displayCharacter>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	aa ef       	ldi	r26, 0xFA	; 250
    12d6:	b3 e4       	ldi	r27, 0x43	; 67
    12d8:	89 8f       	std	Y+25, r24	; 0x19
    12da:	9a 8f       	std	Y+26, r25	; 0x1a
    12dc:	ab 8f       	std	Y+27, r26	; 0x1b
    12de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	69 8d       	ldd	r22, Y+25	; 0x19
    12e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a ef       	ldi	r20, 0xFA	; 250
    12ee:	54 e4       	ldi	r21, 0x44	; 68
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	8d 8b       	std	Y+21, r24	; 0x15
    12fa:	9e 8b       	std	Y+22, r25	; 0x16
    12fc:	af 8b       	std	Y+23, r26	; 0x17
    12fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1300:	6d 89       	ldd	r22, Y+21	; 0x15
    1302:	7e 89       	ldd	r23, Y+22	; 0x16
    1304:	8f 89       	ldd	r24, Y+23	; 0x17
    1306:	98 8d       	ldd	r25, Y+24	; 0x18
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <Open_OR_Check+0x1fe>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9c 8b       	std	Y+20, r25	; 0x14
    131e:	8b 8b       	std	Y+19, r24	; 0x13
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <Open_OR_Check+0x27c>
	else if (__tmp > 65535)
    1322:	6d 89       	ldd	r22, Y+21	; 0x15
    1324:	7e 89       	ldd	r23, Y+22	; 0x16
    1326:	8f 89       	ldd	r24, Y+23	; 0x17
    1328:	98 8d       	ldd	r25, Y+24	; 0x18
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	4c f5       	brge	.+82     	; 0x138c <Open_OR_Check+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	69 8d       	ldd	r22, Y+25	; 0x19
    133c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9c 8b       	std	Y+20, r25	; 0x14
    1360:	8b 8b       	std	Y+19, r24	; 0x13
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <Open_OR_Check+0x25e>
    1364:	88 ec       	ldi	r24, 0xC8	; 200
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9a 8b       	std	Y+18, r25	; 0x12
    136a:	89 8b       	std	Y+17, r24	; 0x11
    136c:	89 89       	ldd	r24, Y+17	; 0x11
    136e:	9a 89       	ldd	r25, Y+18	; 0x12
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <Open_OR_Check+0x24c>
    1374:	9a 8b       	std	Y+18, r25	; 0x12
    1376:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	8b 89       	ldd	r24, Y+19	; 0x13
    137a:	9c 89       	ldd	r25, Y+20	; 0x14
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	9c 8b       	std	Y+20, r25	; 0x14
    1380:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	9c 89       	ldd	r25, Y+20	; 0x14
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	69 f7       	brne	.-38     	; 0x1364 <Open_OR_Check+0x240>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <Open_OR_Check+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	6d 89       	ldd	r22, Y+21	; 0x15
    138e:	7e 89       	ldd	r23, Y+22	; 0x16
    1390:	8f 89       	ldd	r24, Y+23	; 0x17
    1392:	98 8d       	ldd	r25, Y+24	; 0x18
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9c 8b       	std	Y+20, r25	; 0x14
    139e:	8b 8b       	std	Y+19, r24	; 0x13
    13a0:	8b 89       	ldd	r24, Y+19	; 0x13
    13a2:	9c 89       	ldd	r25, Y+20	; 0x14
    13a4:	98 8b       	std	Y+16, r25	; 0x10
    13a6:	8f 87       	std	Y+15, r24	; 0x0f
    13a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13aa:	98 89       	ldd	r25, Y+16	; 0x10
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <Open_OR_Check+0x288>
    13b0:	98 8b       	std	Y+16, r25	; 0x10
    13b2:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayString("Plz enter old");
		LCD_moveCursor(1, 0);
		LCD_displayString("pass:");
		LCD_moveCursor(1, 5);
		key1 = 0;
		for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {
    13b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	8c a7       	std	Y+44, r24	; 0x2c
    13ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    13bc:	86 30       	cpi	r24, 0x06	; 6
    13be:	08 f4       	brcc	.+2      	; 0x13c2 <Open_OR_Check+0x29e>
    13c0:	72 cf       	rjmp	.-284    	; 0x12a6 <Open_OR_Check+0x182>

				LCD_displayCharacter('*');
					}
			_delay_ms(500);
					}
		if (first_pass[MAX_NUM_PASSWORD] != 'C') {
    13c2:	80 91 9a 01 	lds	r24, 0x019A
    13c6:	90 91 9b 01 	lds	r25, 0x019B
    13ca:	83 34       	cpi	r24, 0x43	; 67
    13cc:	91 05       	cpc	r25, r1
    13ce:	c1 f0       	breq	.+48     	; 0x1400 <Open_OR_Check+0x2dc>
	LCD_clearScreen();
    13d0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("  Wrong in ");
    13d4:	81 e7       	ldi	r24, 0x71	; 113
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    LCD_moveCursor(1, 0);
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	LCD_displayString("Enter button");
    13e4:	87 e6       	ldi	r24, 0x67	; 103
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	Timer_init(&Timer_ConfigType_1);
    13ec:	87 e8       	ldi	r24, 0x87	; 135
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <Timer_init>
	Timer_setCallBack(Message_Wrong_Button,TIMER1);
    13f4:	83 eb       	ldi	r24, 0xB3	; 179
    13f6:	9a e0       	ldi	r25, 0x0A	; 10
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <Timer_setCallBack>
    13fe:	8a c0       	rjmp	.+276    	; 0x1514 <Open_OR_Check+0x3f0>

		} else {
		for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {
    1400:	1b a6       	std	Y+43, r1	; 0x2b
    1402:	81 c0       	rjmp	.+258    	; 0x1506 <Open_OR_Check+0x3e2>
			UART_sendByte(first_pass[i]);
    1404:	8b a5       	ldd	r24, Y+43	; 0x2b
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	fc 01       	movw	r30, r24
    1410:	e0 57       	subi	r30, 0x70	; 112
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_sendByte>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 e2       	ldi	r26, 0x20	; 32
    1422:	b1 e4       	ldi	r27, 0x41	; 65
    1424:	8b 87       	std	Y+11, r24	; 0x0b
    1426:	9c 87       	std	Y+12, r25	; 0x0c
    1428:	ad 87       	std	Y+13, r26	; 0x0d
    142a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a ef       	ldi	r20, 0xFA	; 250
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8f 83       	std	Y+7, r24	; 0x07
    1446:	98 87       	std	Y+8, r25	; 0x08
    1448:	a9 87       	std	Y+9, r26	; 0x09
    144a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <Open_OR_Check+0x34a>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <Open_OR_Check+0x3c8>
	else if (__tmp > 65535)
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <Open_OR_Check+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	6b 85       	ldd	r22, Y+11	; 0x0b
    1488:	7c 85       	ldd	r23, Y+12	; 0x0c
    148a:	8d 85       	ldd	r24, Y+13	; 0x0d
    148c:	9e 85       	ldd	r25, Y+14	; 0x0e
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <Open_OR_Check+0x3aa>
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9c 83       	std	Y+4, r25	; 0x04
    14b6:	8b 83       	std	Y+3, r24	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <Open_OR_Check+0x398>
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <Open_OR_Check+0x38c>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <Open_OR_Check+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <Open_OR_Check+0x3d4>
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Enter button");
	Timer_init(&Timer_ConfigType_1);
	Timer_setCallBack(Message_Wrong_Button,TIMER1);

		} else {
		for (uint8 i = 0; i <= MAX_NUM_PASSWORD; i++) {
    1500:	8b a5       	ldd	r24, Y+43	; 0x2b
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	8b a7       	std	Y+43, r24	; 0x2b
    1506:	8b a5       	ldd	r24, Y+43	; 0x2b
    1508:	86 30       	cpi	r24, 0x06	; 6
    150a:	08 f4       	brcc	.+2      	; 0x150e <Open_OR_Check+0x3ea>
    150c:	7b cf       	rjmp	.-266    	; 0x1404 <Open_OR_Check+0x2e0>
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <Open_OR_Check+0x3f0>
			UART_sendByte(first_pass[i]);
			_delay_ms(10);
				}
					}
			} else {
			return Open_OR_Check();
    1510:	0e 94 92 08 	call	0x1124	; 0x1124 <Open_OR_Check>
			}
		}
    1514:	ac 96       	adiw	r28, 0x2c	; 44
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	08 95       	ret

0000152a <Message_Wrong_Pass>:

void Message_Wrong_Pass(void)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	G_timer++;
    1532:	80 91 ad 01 	lds	r24, 0x01AD
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	80 93 ad 01 	sts	0x01AD, r24
	Timer_deInit(TIMER1);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <Timer_deInit>
	if((G_timer == 1)  )
    1542:	80 91 ad 01 	lds	r24, 0x01AD
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	59 f4       	brne	.+22     	; 0x1560 <Message_Wrong_Pass+0x36>
	{
		G_timer = 0;
    154a:	10 92 ad 01 	sts	0x01AD, r1
		if((wrong_correct == 'R'))
    154e:	80 91 ab 01 	lds	r24, 0x01AB
    1552:	82 35       	cpi	r24, 0x52	; 82
    1554:	19 f4       	brne	.+6      	; 0x155c <Message_Wrong_Pass+0x32>
		{
			Open_OR_Check();
    1556:	0e 94 92 08 	call	0x1124	; 0x1124 <Open_OR_Check>
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <Message_Wrong_Pass+0x36>
		}else
		{
			Display();
    155c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Display>
		}
	}
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <Message_Wrong_Button>:

void Message_Wrong_Button(void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	G_timer++;
    156e:	80 91 ad 01 	lds	r24, 0x01AD
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	80 93 ad 01 	sts	0x01AD, r24
	if((G_timer == 1) && ((first_pass[MAX_NUM_PASSWORD] != 'C')))
    1578:	80 91 ad 01 	lds	r24, 0x01AD
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	71 f4       	brne	.+28     	; 0x159c <Message_Wrong_Button+0x36>
    1580:	80 91 9a 01 	lds	r24, 0x019A
    1584:	90 91 9b 01 	lds	r25, 0x019B
    1588:	83 34       	cpi	r24, 0x43	; 67
    158a:	91 05       	cpc	r25, r1
    158c:	39 f0       	breq	.+14     	; 0x159c <Message_Wrong_Button+0x36>
	{
		G_timer = 0;
    158e:	10 92 ad 01 	sts	0x01AD, r1
		Timer_deInit(TIMER1);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <Timer_deInit>
		Open_OR_Check();
    1598:	0e 94 92 08 	call	0x1124	; 0x1124 <Open_OR_Check>
	}
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <Message_Wrong_Pass_15>:
void Message_Wrong_Pass_15(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	G_timer++;
    15aa:	80 91 ad 01 	lds	r24, 0x01AD
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	80 93 ad 01 	sts	0x01AD, r24
	if(G_timer == 15)
    15b4:	80 91 ad 01 	lds	r24, 0x01AD
    15b8:	8f 30       	cpi	r24, 0x0F	; 15
    15ba:	39 f4       	brne	.+14     	; 0x15ca <Message_Wrong_Pass_15+0x28>
	{
		G_timer = 0;
    15bc:	10 92 ad 01 	sts	0x01AD, r1
		Timer_deInit(TIMER1);
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <Timer_deInit>
		Open_OR_Check();
    15c6:	0e 94 92 08 	call	0x1124	; 0x1124 <Open_OR_Check>
	}
}
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <Message_Wrong_Pass_60>:

void Message_Wrong_Pass_60(void)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
	G_timer++;
    15d8:	80 91 ad 01 	lds	r24, 0x01AD
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	80 93 ad 01 	sts	0x01AD, r24
	if(G_timer == 60)
    15e2:	80 91 ad 01 	lds	r24, 0x01AD
    15e6:	8c 33       	cpi	r24, 0x3C	; 60
    15e8:	39 f4       	brne	.+14     	; 0x15f8 <Message_Wrong_Pass_60+0x28>
	{
		G_timer = 0;
    15ea:	10 92 ad 01 	sts	0x01AD, r1
		Timer_deInit(TIMER1);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <Timer_deInit>
		Open_OR_Check();
    15f4:	0e 94 92 08 	call	0x1124	; 0x1124 <Open_OR_Check>
	}
}
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <GPIO_setupPinDirection+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_setupPinDirection+0x8>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	6a 83       	std	Y+2, r22	; 0x02
    1610:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	88 30       	cpi	r24, 0x08	; 8
    1616:	08 f0       	brcs	.+2      	; 0x161a <GPIO_setupPinDirection+0x1c>
    1618:	d5 c0       	rjmp	.+426    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	08 f0       	brcs	.+2      	; 0x1622 <GPIO_setupPinDirection+0x24>
    1620:	d1 c0       	rjmp	.+418    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	3d 83       	std	Y+5, r19	; 0x05
    162a:	2c 83       	std	Y+4, r18	; 0x04
    162c:	8c 81       	ldd	r24, Y+4	; 0x04
    162e:	9d 81       	ldd	r25, Y+5	; 0x05
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <GPIO_setupPinDirection+0x3a>
    1636:	43 c0       	rjmp	.+134    	; 0x16be <GPIO_setupPinDirection+0xc0>
    1638:	2c 81       	ldd	r18, Y+4	; 0x04
    163a:	3d 81       	ldd	r19, Y+5	; 0x05
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	2c f4       	brge	.+10     	; 0x164c <GPIO_setupPinDirection+0x4e>
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	71 f0       	breq	.+28     	; 0x1666 <GPIO_setupPinDirection+0x68>
    164a:	bc c0       	rjmp	.+376    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
    164c:	2c 81       	ldd	r18, Y+4	; 0x04
    164e:	3d 81       	ldd	r19, Y+5	; 0x05
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	09 f4       	brne	.+2      	; 0x1658 <GPIO_setupPinDirection+0x5a>
    1656:	5f c0       	rjmp	.+190    	; 0x1716 <GPIO_setupPinDirection+0x118>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <GPIO_setupPinDirection+0x66>
    1662:	85 c0       	rjmp	.+266    	; 0x176e <GPIO_setupPinDirection+0x170>
    1664:	af c0       	rjmp	.+350    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	a1 f4       	brne	.+40     	; 0x1694 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    166c:	aa e3       	ldi	r26, 0x3A	; 58
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ea e3       	ldi	r30, 0x3A	; 58
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <GPIO_setupPinDirection+0x8c>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <GPIO_setupPinDirection+0x88>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	98 c0       	rjmp	.+304    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1694:	aa e3       	ldi	r26, 0x3A	; 58
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ea e3       	ldi	r30, 0x3A	; 58
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <GPIO_setupPinDirection+0xb4>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <GPIO_setupPinDirection+0xb0>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	83 c0       	rjmp	.+262    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	a1 f4       	brne	.+40     	; 0x16ec <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16c4:	a7 e3       	ldi	r26, 0x37	; 55
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e7 e3       	ldi	r30, 0x37	; 55
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_setupPinDirection+0xe4>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_setupPinDirection+0xe0>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	6c c0       	rjmp	.+216    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16ec:	a7 e3       	ldi	r26, 0x37	; 55
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e7 e3       	ldi	r30, 0x37	; 55
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_setupPinDirection+0x10c>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_setupPinDirection+0x108>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	57 c0       	rjmp	.+174    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	a1 f4       	brne	.+40     	; 0x1744 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    171c:	a4 e3       	ldi	r26, 0x34	; 52
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e4 e3       	ldi	r30, 0x34	; 52
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <GPIO_setupPinDirection+0x13c>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <GPIO_setupPinDirection+0x138>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	40 c0       	rjmp	.+128    	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1744:	a4 e3       	ldi	r26, 0x34	; 52
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e4 e3       	ldi	r30, 0x34	; 52
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_setupPinDirection+0x164>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_setupPinDirection+0x160>
    1766:	80 95       	com	r24
    1768:	84 23       	and	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	2b c0       	rjmp	.+86     	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	a1 f4       	brne	.+40     	; 0x179c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1774:	a1 e3       	ldi	r26, 0x31	; 49
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e1 e3       	ldi	r30, 0x31	; 49
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_setupPinDirection+0x194>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_setupPinDirection+0x190>
    1796:	84 2b       	or	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	14 c0       	rjmp	.+40     	; 0x17c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    179c:	a1 e3       	ldi	r26, 0x31	; 49
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e1 e3       	ldi	r30, 0x31	; 49
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_setupPinDirection+0x1bc>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_setupPinDirection+0x1b8>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <GPIO_writePin+0x6>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <GPIO_writePin+0x8>
    17dc:	0f 92       	push	r0
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	6a 83       	std	Y+2, r22	; 0x02
    17e6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	88 30       	cpi	r24, 0x08	; 8
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <GPIO_writePin+0x1c>
    17ee:	d5 c0       	rjmp	.+426    	; 0x199a <GPIO_writePin+0x1c6>
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	84 30       	cpi	r24, 0x04	; 4
    17f4:	08 f0       	brcs	.+2      	; 0x17f8 <GPIO_writePin+0x24>
    17f6:	d1 c0       	rjmp	.+418    	; 0x199a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3d 83       	std	Y+5, r19	; 0x05
    1800:	2c 83       	std	Y+4, r18	; 0x04
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <GPIO_writePin+0x3a>
    180c:	43 c0       	rjmp	.+134    	; 0x1894 <GPIO_writePin+0xc0>
    180e:	2c 81       	ldd	r18, Y+4	; 0x04
    1810:	3d 81       	ldd	r19, Y+5	; 0x05
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	2c f4       	brge	.+10     	; 0x1822 <GPIO_writePin+0x4e>
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	9d 81       	ldd	r25, Y+5	; 0x05
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	71 f0       	breq	.+28     	; 0x183c <GPIO_writePin+0x68>
    1820:	bc c0       	rjmp	.+376    	; 0x199a <GPIO_writePin+0x1c6>
    1822:	2c 81       	ldd	r18, Y+4	; 0x04
    1824:	3d 81       	ldd	r19, Y+5	; 0x05
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <GPIO_writePin+0x5a>
    182c:	5f c0       	rjmp	.+190    	; 0x18ec <GPIO_writePin+0x118>
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	91 05       	cpc	r25, r1
    1836:	09 f4       	brne	.+2      	; 0x183a <GPIO_writePin+0x66>
    1838:	85 c0       	rjmp	.+266    	; 0x1944 <GPIO_writePin+0x170>
    183a:	af c0       	rjmp	.+350    	; 0x199a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	a1 f4       	brne	.+40     	; 0x186a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <GPIO_writePin+0x8c>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <GPIO_writePin+0x88>
    1864:	84 2b       	or	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	98 c0       	rjmp	.+304    	; 0x199a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    186a:	ab e3       	ldi	r26, 0x3B	; 59
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	eb e3       	ldi	r30, 0x3B	; 59
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <GPIO_writePin+0xb4>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <GPIO_writePin+0xb0>
    188c:	80 95       	com	r24
    188e:	84 23       	and	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	83 c0       	rjmp	.+262    	; 0x199a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	a1 f4       	brne	.+40     	; 0x18c2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    189a:	a8 e3       	ldi	r26, 0x38	; 56
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e8 e3       	ldi	r30, 0x38	; 56
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <GPIO_writePin+0xe4>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <GPIO_writePin+0xe0>
    18bc:	84 2b       	or	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	6c c0       	rjmp	.+216    	; 0x199a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18c2:	a8 e3       	ldi	r26, 0x38	; 56
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e8 e3       	ldi	r30, 0x38	; 56
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_writePin+0x10c>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_writePin+0x108>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	57 c0       	rjmp	.+174    	; 0x199a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	a1 f4       	brne	.+40     	; 0x191a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18f2:	a5 e3       	ldi	r26, 0x35	; 53
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e3       	ldi	r30, 0x35	; 53
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <GPIO_writePin+0x13c>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <GPIO_writePin+0x138>
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	40 c0       	rjmp	.+128    	; 0x199a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    191a:	a5 e3       	ldi	r26, 0x35	; 53
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e5 e3       	ldi	r30, 0x35	; 53
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_writePin+0x164>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_writePin+0x160>
    193c:	80 95       	com	r24
    193e:	84 23       	and	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	2b c0       	rjmp	.+86     	; 0x199a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	a1 f4       	brne	.+40     	; 0x1972 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    194a:	a2 e3       	ldi	r26, 0x32	; 50
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e2 e3       	ldi	r30, 0x32	; 50
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <GPIO_writePin+0x194>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <GPIO_writePin+0x190>
    196c:	84 2b       	or	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	14 c0       	rjmp	.+40     	; 0x199a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1972:	a2 e3       	ldi	r26, 0x32	; 50
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e2 e3       	ldi	r30, 0x32	; 50
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <GPIO_writePin+0x1bc>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <GPIO_writePin+0x1b8>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <GPIO_readPin+0x6>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <GPIO_readPin+0x8>
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	8a 83       	std	Y+2, r24	; 0x02
    19ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19bc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	88 30       	cpi	r24, 0x08	; 8
    19c2:	08 f0       	brcs	.+2      	; 0x19c6 <GPIO_readPin+0x1c>
    19c4:	84 c0       	rjmp	.+264    	; 0x1ace <GPIO_readPin+0x124>
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <GPIO_readPin+0x24>
    19cc:	80 c0       	rjmp	.+256    	; 0x1ace <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3d 83       	std	Y+5, r19	; 0x05
    19d6:	2c 83       	std	Y+4, r18	; 0x04
    19d8:	4c 81       	ldd	r20, Y+4	; 0x04
    19da:	5d 81       	ldd	r21, Y+5	; 0x05
    19dc:	41 30       	cpi	r20, 0x01	; 1
    19de:	51 05       	cpc	r21, r1
    19e0:	79 f1       	breq	.+94     	; 0x1a40 <GPIO_readPin+0x96>
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	9d 81       	ldd	r25, Y+5	; 0x05
    19e6:	82 30       	cpi	r24, 0x02	; 2
    19e8:	91 05       	cpc	r25, r1
    19ea:	34 f4       	brge	.+12     	; 0x19f8 <GPIO_readPin+0x4e>
    19ec:	2c 81       	ldd	r18, Y+4	; 0x04
    19ee:	3d 81       	ldd	r19, Y+5	; 0x05
    19f0:	21 15       	cp	r18, r1
    19f2:	31 05       	cpc	r19, r1
    19f4:	69 f0       	breq	.+26     	; 0x1a10 <GPIO_readPin+0x66>
    19f6:	6b c0       	rjmp	.+214    	; 0x1ace <GPIO_readPin+0x124>
    19f8:	4c 81       	ldd	r20, Y+4	; 0x04
    19fa:	5d 81       	ldd	r21, Y+5	; 0x05
    19fc:	42 30       	cpi	r20, 0x02	; 2
    19fe:	51 05       	cpc	r21, r1
    1a00:	b9 f1       	breq	.+110    	; 0x1a70 <GPIO_readPin+0xc6>
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	9d 81       	ldd	r25, Y+5	; 0x05
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	91 05       	cpc	r25, r1
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <GPIO_readPin+0x64>
    1a0c:	49 c0       	rjmp	.+146    	; 0x1aa0 <GPIO_readPin+0xf6>
    1a0e:	5f c0       	rjmp	.+190    	; 0x1ace <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a10:	e9 e3       	ldi	r30, 0x39	; 57
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <GPIO_readPin+0x7e>
    1a24:	55 95       	asr	r21
    1a26:	47 95       	ror	r20
    1a28:	8a 95       	dec	r24
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <GPIO_readPin+0x7a>
    1a2c:	ca 01       	movw	r24, r20
    1a2e:	81 70       	andi	r24, 0x01	; 1
    1a30:	90 70       	andi	r25, 0x00	; 0
    1a32:	88 23       	and	r24, r24
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	49 c0       	rjmp	.+146    	; 0x1ace <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
    1a3e:	47 c0       	rjmp	.+142    	; 0x1ace <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a40:	e6 e3       	ldi	r30, 0x36	; 54
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a9 01       	movw	r20, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <GPIO_readPin+0xae>
    1a54:	55 95       	asr	r21
    1a56:	47 95       	ror	r20
    1a58:	8a 95       	dec	r24
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <GPIO_readPin+0xaa>
    1a5c:	ca 01       	movw	r24, r20
    1a5e:	81 70       	andi	r24, 0x01	; 1
    1a60:	90 70       	andi	r25, 0x00	; 0
    1a62:	88 23       	and	r24, r24
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	31 c0       	rjmp	.+98     	; 0x1ace <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a6c:	19 82       	std	Y+1, r1	; 0x01
    1a6e:	2f c0       	rjmp	.+94     	; 0x1ace <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a70:	e3 e3       	ldi	r30, 0x33	; 51
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a9 01       	movw	r20, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_readPin+0xde>
    1a84:	55 95       	asr	r21
    1a86:	47 95       	ror	r20
    1a88:	8a 95       	dec	r24
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <GPIO_readPin+0xda>
    1a8c:	ca 01       	movw	r24, r20
    1a8e:	81 70       	andi	r24, 0x01	; 1
    1a90:	90 70       	andi	r25, 0x00	; 0
    1a92:	88 23       	and	r24, r24
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	19 c0       	rjmp	.+50     	; 0x1ace <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a9c:	19 82       	std	Y+1, r1	; 0x01
    1a9e:	17 c0       	rjmp	.+46     	; 0x1ace <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1aa0:	e0 e3       	ldi	r30, 0x30	; 48
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a9 01       	movw	r20, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <GPIO_readPin+0x10e>
    1ab4:	55 95       	asr	r21
    1ab6:	47 95       	ror	r20
    1ab8:	8a 95       	dec	r24
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <GPIO_readPin+0x10a>
    1abc:	ca 01       	movw	r24, r20
    1abe:	81 70       	andi	r24, 0x01	; 1
    1ac0:	90 70       	andi	r25, 0x00	; 0
    1ac2:	88 23       	and	r24, r24
    1ac4:	19 f0       	breq	.+6      	; 0x1acc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1acc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <GPIO_setupPortDirection+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <GPIO_setupPortDirection+0x8>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	84 30       	cpi	r24, 0x04	; 4
    1af4:	90 f5       	brcc	.+100    	; 0x1b5a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3c 83       	std	Y+4, r19	; 0x04
    1afe:	2b 83       	std	Y+3, r18	; 0x03
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	91 05       	cpc	r25, r1
    1b08:	d1 f0       	breq	.+52     	; 0x1b3e <GPIO_setupPortDirection+0x5e>
    1b0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	31 05       	cpc	r19, r1
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <GPIO_setupPortDirection+0x3e>
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	61 f0       	breq	.+24     	; 0x1b34 <GPIO_setupPortDirection+0x54>
    1b1c:	1e c0       	rjmp	.+60     	; 0x1b5a <GPIO_setupPortDirection+0x7a>
    1b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b20:	3c 81       	ldd	r19, Y+4	; 0x04
    1b22:	22 30       	cpi	r18, 0x02	; 2
    1b24:	31 05       	cpc	r19, r1
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <GPIO_setupPortDirection+0x68>
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	83 30       	cpi	r24, 0x03	; 3
    1b2e:	91 05       	cpc	r25, r1
    1b30:	81 f0       	breq	.+32     	; 0x1b52 <GPIO_setupPortDirection+0x72>
    1b32:	13 c0       	rjmp	.+38     	; 0x1b5a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b34:	ea e3       	ldi	r30, 0x3A	; 58
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	80 83       	st	Z, r24
    1b3c:	0e c0       	rjmp	.+28     	; 0x1b5a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b3e:	e7 e3       	ldi	r30, 0x37	; 55
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	80 83       	st	Z, r24
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b48:	e4 e3       	ldi	r30, 0x34	; 52
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	80 83       	st	Z, r24
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b52:	e1 e3       	ldi	r30, 0x31	; 49
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <GPIO_writePort+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <GPIO_writePort+0x8>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	90 f5       	brcc	.+100    	; 0x1be2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	3c 83       	std	Y+4, r19	; 0x04
    1b86:	2b 83       	std	Y+3, r18	; 0x03
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	d1 f0       	breq	.+52     	; 0x1bc6 <GPIO_writePort+0x5e>
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	3c 81       	ldd	r19, Y+4	; 0x04
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <GPIO_writePort+0x3e>
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <GPIO_writePort+0x54>
    1ba4:	1e c0       	rjmp	.+60     	; 0x1be2 <GPIO_writePort+0x7a>
    1ba6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba8:	3c 81       	ldd	r19, Y+4	; 0x04
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	81 f0       	breq	.+32     	; 0x1bd0 <GPIO_writePort+0x68>
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	83 30       	cpi	r24, 0x03	; 3
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	81 f0       	breq	.+32     	; 0x1bda <GPIO_writePort+0x72>
    1bba:	13 c0       	rjmp	.+38     	; 0x1be2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1bbc:	eb e3       	ldi	r30, 0x3B	; 59
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	80 83       	st	Z, r24
    1bc4:	0e c0       	rjmp	.+28     	; 0x1be2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bc6:	e8 e3       	ldi	r30, 0x38	; 56
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	80 83       	st	Z, r24
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1bd0:	e5 e3       	ldi	r30, 0x35	; 53
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	80 83       	st	Z, r24
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bda:	e2 e3       	ldi	r30, 0x32	; 50
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <GPIO_readPort+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <GPIO_readPort+0x8>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bfe:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	84 30       	cpi	r24, 0x04	; 4
    1c04:	90 f5       	brcc	.+100    	; 0x1c6a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	3c 83       	std	Y+4, r19	; 0x04
    1c0e:	2b 83       	std	Y+3, r18	; 0x03
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	91 05       	cpc	r25, r1
    1c18:	d1 f0       	breq	.+52     	; 0x1c4e <GPIO_readPort+0x5e>
    1c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1e:	22 30       	cpi	r18, 0x02	; 2
    1c20:	31 05       	cpc	r19, r1
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <GPIO_readPort+0x3e>
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	61 f0       	breq	.+24     	; 0x1c44 <GPIO_readPort+0x54>
    1c2c:	1e c0       	rjmp	.+60     	; 0x1c6a <GPIO_readPort+0x7a>
    1c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c30:	3c 81       	ldd	r19, Y+4	; 0x04
    1c32:	22 30       	cpi	r18, 0x02	; 2
    1c34:	31 05       	cpc	r19, r1
    1c36:	81 f0       	breq	.+32     	; 0x1c58 <GPIO_readPort+0x68>
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	83 30       	cpi	r24, 0x03	; 3
    1c3e:	91 05       	cpc	r25, r1
    1c40:	81 f0       	breq	.+32     	; 0x1c62 <GPIO_readPort+0x72>
    1c42:	13 c0       	rjmp	.+38     	; 0x1c6a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c44:	e9 e3       	ldi	r30, 0x39	; 57
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	0e c0       	rjmp	.+28     	; 0x1c6a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c4e:	e6 e3       	ldi	r30, 0x36	; 54
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	09 c0       	rjmp	.+18     	; 0x1c6a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c58:	e3 e3       	ldi	r30, 0x33	; 51
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c62:	e0 e3       	ldi	r30, 0x30	; 48
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <KEYPAD_getPressedKey>:
#endif /* STANDARD_KEYPAD */

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void) {
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	60 97       	sbiw	r28, 0x10	; 16
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
	uint8 colmuns, rows;
	/*Setup direction of pins of rows */
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 0,
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	63 e0       	ldi	r22, 0x03	; 3
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
			PIN_INPUT);

	/*Setup direction of pins of rows */
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 0,
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	64 e0       	ldi	r22, 0x04	; 4
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	65 e0       	ldi	r22, 0x05	; 5
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	66 e0       	ldi	r22, 0x06	; 6
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
			PIN_INPUT);

#if (KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID + 3,PIN_INPUT);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	67 e0       	ldi	r22, 0x07	; 7
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
	#endif

	while (1)/*pooling Technic to waiting to the button pressed */
	{
		for (rows = 0; rows < KEYPAD_NUM_ROWS; rows++) {
    1cde:	1f 86       	std	Y+15, r1	; 0x0f
    1ce0:	ab c0       	rjmp	.+342    	; 0x1e38 <KEYPAD_getPressedKey+0x1be>
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
					(KEYPAD_FIRST_ROW_PIN_ID + rows), PIN_OUTPUT);

			/*Write  pressed on all columns of this row */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, (KEYPAD_FIRST_ROW_PIN_ID + rows),
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);

			/*looping about all columns in this row*/
			for (colmuns = 0; colmuns < KEYPAD_NUM_COLS; colmuns++) {
    1cf6:	18 8a       	std	Y+16, r1	; 0x10
    1cf8:	22 c0       	rjmp	.+68     	; 0x1d3e <KEYPAD_getPressedKey+0xc4>
				/* Check if the switch is pressed in this column */
				if (KEYPAD_BUTTON_PRESSED
    1cfa:	88 89       	ldd	r24, Y+16	; 0x10
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	9c 5f       	subi	r25, 0xFC	; 252
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	69 2f       	mov	r22, r25
    1d04:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_readPin>
    1d08:	88 23       	and	r24, r24
    1d0a:	b1 f4       	brne	.+44     	; 0x1d38 <KEYPAD_getPressedKey+0xbe>

#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((rows*KEYPAD_NUM_COLS)+colmuns+1);
						#else
							return (KEYPAD_4x4_adjustKeyNumber((rows * KEYPAD_NUM_COLS) + colmuns + 1));
    1d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	88 89       	ldd	r24, Y+16	; 0x10
    1d1e:	89 0f       	add	r24, r25
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+rows,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    1d26:	60 96       	adiw	r28, 0x10	; 16
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret
			/*Write  pressed on all columns of this row */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, (KEYPAD_FIRST_ROW_PIN_ID + rows),
			KEYPAD_BUTTON_PRESSED);

			/*looping about all columns in this row*/
			for (colmuns = 0; colmuns < KEYPAD_NUM_COLS; colmuns++) {
    1d38:	88 89       	ldd	r24, Y+16	; 0x10
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	88 8b       	std	Y+16, r24	; 0x10
    1d3e:	88 89       	ldd	r24, Y+16	; 0x10
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	d8 f2       	brcs	.-74     	; 0x1cfa <KEYPAD_getPressedKey+0x80>
							return (KEYPAD_4x4_adjustKeyNumber((rows * KEYPAD_NUM_COLS) + colmuns + 1));
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+rows,PIN_INPUT);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 ea       	ldi	r26, 0xA0	; 160
    1d54:	b0 e4       	ldi	r27, 0x40	; 64
    1d56:	8b 87       	std	Y+11, r24	; 0x0b
    1d58:	9c 87       	std	Y+12, r25	; 0x0c
    1d5a:	ad 87       	std	Y+13, r26	; 0x0d
    1d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a ef       	ldi	r20, 0xFA	; 250
    1d6c:	54 e4       	ldi	r21, 0x44	; 68
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8f 83       	std	Y+7, r24	; 0x07
    1d78:	98 87       	std	Y+8, r25	; 0x08
    1d7a:	a9 87       	std	Y+9, r26	; 0x09
    1d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	4c f5       	brge	.+82     	; 0x1e0a <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <KEYPAD_getPressedKey+0x186>
    1de2:	88 ec       	ldi	r24, 0xC8	; 200
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <KEYPAD_getPressedKey+0x174>
    1df2:	9c 83       	std	Y+4, r25	; 0x04
    1df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <KEYPAD_getPressedKey+0x168>
    1e08:	14 c0       	rjmp	.+40     	; 0x1e32 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0c:	78 85       	ldd	r23, Y+8	; 0x08
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <KEYPAD_getPressedKey+0x1b0>
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID + 3,PIN_INPUT);
	#endif

	while (1)/*pooling Technic to waiting to the button pressed */
	{
		for (rows = 0; rows < KEYPAD_NUM_ROWS; rows++) {
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	8f 87       	std	Y+15, r24	; 0x0f
    1e38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3a:	84 30       	cpi	r24, 0x04	; 4
    1e3c:	08 f4       	brcc	.+2      	; 0x1e40 <KEYPAD_getPressedKey+0x1c6>
    1e3e:	51 cf       	rjmp	.-350    	; 0x1ce2 <KEYPAD_getPressedKey+0x68>
    1e40:	4e cf       	rjmp	.-356    	; 0x1cde <KEYPAD_getPressedKey+0x64>

00001e42 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1e50:	19 82       	std	Y+1, r1	; 0x01

	switch (button_number) {
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3c 83       	std	Y+4, r19	; 0x04
    1e5a:	2b 83       	std	Y+3, r18	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	88 30       	cpi	r24, 0x08	; 8
    1e62:	91 05       	cpc	r25, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e66:	70 c0       	rjmp	.+224    	; 0x1f48 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	29 30       	cpi	r18, 0x09	; 9
    1e6e:	31 05       	cpc	r19, r1
    1e70:	5c f5       	brge	.+86     	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	91 05       	cpc	r25, r1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e7c:	59 c0       	rjmp	.+178    	; 0x1f30 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e80:	3c 81       	ldd	r19, Y+4	; 0x04
    1e82:	25 30       	cpi	r18, 0x05	; 5
    1e84:	31 05       	cpc	r19, r1
    1e86:	9c f4       	brge	.+38     	; 0x1eae <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	91 05       	cpc	r25, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e92:	48 c0       	rjmp	.+144    	; 0x1f24 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e94:	2b 81       	ldd	r18, Y+3	; 0x03
    1e96:	3c 81       	ldd	r19, Y+4	; 0x04
    1e98:	23 30       	cpi	r18, 0x03	; 3
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	0c f0       	brlt	.+2      	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e9e:	45 c0       	rjmp	.+138    	; 0x1f2a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1eaa:	39 c0       	rjmp	.+114    	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1eac:	67 c0       	rjmp	.+206    	; 0x1f7c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb2:	26 30       	cpi	r18, 0x06	; 6
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <KEYPAD_4x4_adjustKeyNumber+0x78>
    1eb8:	41 c0       	rjmp	.+130    	; 0x1f3c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	87 30       	cpi	r24, 0x07	; 7
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	0c f0       	brlt	.+2      	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ec4:	3e c0       	rjmp	.+124    	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ec6:	37 c0       	rjmp	.+110    	; 0x1f36 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	2c 30       	cpi	r18, 0x0C	; 12
    1ece:	31 05       	cpc	r19, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ed2:	46 c0       	rjmp	.+140    	; 0x1f60 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	8d 30       	cpi	r24, 0x0D	; 13
    1eda:	91 05       	cpc	r25, r1
    1edc:	5c f4       	brge	.+22     	; 0x1ef4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee2:	2a 30       	cpi	r18, 0x0A	; 10
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	b1 f1       	breq	.+108    	; 0x1f54 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	8b 30       	cpi	r24, 0x0B	; 11
    1eee:	91 05       	cpc	r25, r1
    1ef0:	a4 f5       	brge	.+104    	; 0x1f5a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1ef2:	2d c0       	rjmp	.+90     	; 0x1f4e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef8:	2e 30       	cpi	r18, 0x0E	; 14
    1efa:	31 05       	cpc	r19, r1
    1efc:	b9 f1       	breq	.+110    	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	8e 30       	cpi	r24, 0x0E	; 14
    1f04:	91 05       	cpc	r25, r1
    1f06:	7c f1       	brlt	.+94     	; 0x1f66 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f08:	2b 81       	ldd	r18, Y+3	; 0x03
    1f0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0c:	2f 30       	cpi	r18, 0x0F	; 15
    1f0e:	31 05       	cpc	r19, r1
    1f10:	79 f1       	breq	.+94     	; 0x1f70 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	80 31       	cpi	r24, 0x10	; 16
    1f18:	91 05       	cpc	r25, r1
    1f1a:	69 f1       	breq	.+90     	; 0x1f76 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f1c:	2f c0       	rjmp	.+94     	; 0x1f7c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1: keypad_button = 7;
    1f1e:	87 e0       	ldi	r24, 0x07	; 7
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	2e c0       	rjmp	.+92     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 2: keypad_button = 8;
    1f24:	88 e0       	ldi	r24, 0x08	; 8
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	2b c0       	rjmp	.+86     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 3: keypad_button = 9;
    1f2a:	89 e0       	ldi	r24, 0x09	; 9
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	28 c0       	rjmp	.+80     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 4: keypad_button = '%'; // ASCII Code of %
    1f30:	85 e2       	ldi	r24, 0x25	; 37
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	25 c0       	rjmp	.+74     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 5: keypad_button = 4;
    1f36:	84 e0       	ldi	r24, 0x04	; 4
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	22 c0       	rjmp	.+68     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 6: keypad_button = 5;
    1f3c:	85 e0       	ldi	r24, 0x05	; 5
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	1f c0       	rjmp	.+62     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 7: keypad_button = 6;
    1f42:	86 e0       	ldi	r24, 0x06	; 6
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	1c c0       	rjmp	.+56     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1f48:	8a e2       	ldi	r24, 0x2A	; 42
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	19 c0       	rjmp	.+50     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 9: keypad_button = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	16 c0       	rjmp	.+44     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 10: keypad_button = 2;
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	13 c0       	rjmp	.+38     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 11: keypad_button = 3;
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	10 c0       	rjmp	.+32     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1f60:	8d e2       	ldi	r24, 0x2D	; 45
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	0d c0       	rjmp	.+26     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 13: keypad_button = 'C';  /* ASCII of Enter */
    1f66:	83 e4       	ldi	r24, 0x43	; 67
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	0a c0       	rjmp	.+20     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 14: keypad_button = 0;
    1f6c:	19 82       	std	Y+1, r1	; 0x01
    1f6e:	08 c0       	rjmp	.+16     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    1f70:	8d e3       	ldi	r24, 0x3D	; 61
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	05 c0       	rjmp	.+10     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1f76:	8b e2       	ldi	r24, 0x2B	; 43
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
	default: keypad_button = button_number;
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return keypad_button;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	2e 97       	sbiw	r28, 0x0e	; 14
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	61 e0       	ldi	r22, 0x01	; 1
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	6f ef       	ldi	r22, 0xFF	; 255
    1fbc:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <GPIO_setupPortDirection>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc6:	b1 e4       	ldi	r27, 0x41	; 65
    1fc8:	8b 87       	std	Y+11, r24	; 0x0b
    1fca:	9c 87       	std	Y+12, r25	; 0x0c
    1fcc:	ad 87       	std	Y+13, r26	; 0x0d
    1fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a ef       	ldi	r20, 0xFA	; 250
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8f 83       	std	Y+7, r24	; 0x07
    1fea:	98 87       	std	Y+8, r25	; 0x08
    1fec:	a9 87       	std	Y+9, r26	; 0x09
    1fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_init+0x82>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_init+0x100>
	else if (__tmp > 65535)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6b 85       	ldd	r22, Y+11	; 0x0b
    202c:	7c 85       	ldd	r23, Y+12	; 0x0c
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	9e 85       	ldd	r25, Y+14	; 0x0e
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_init+0xe2>
    2054:	88 ec       	ldi	r24, 0xC8	; 200
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 83       	std	Y+4, r25	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_init+0xd0>
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_init+0xc4>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_init+0x10c>
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    20a4:	88 e3       	ldi	r24, 0x38	; 56
    20a6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20aa:	8c e0       	ldi	r24, 0x0C	; 12
    20ac:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
}
    20b6:	2e 96       	adiw	r28, 0x0e	; 14
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	e9 97       	sbiw	r28, 0x39	; 57
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GPIO_writePin>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a0 e8       	ldi	r26, 0x80	; 128
    20ee:	bf e3       	ldi	r27, 0x3F	; 63
    20f0:	8d ab       	std	Y+53, r24	; 0x35
    20f2:	9e ab       	std	Y+54, r25	; 0x36
    20f4:	af ab       	std	Y+55, r26	; 0x37
    20f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f8:	6d a9       	ldd	r22, Y+53	; 0x35
    20fa:	7e a9       	ldd	r23, Y+54	; 0x36
    20fc:	8f a9       	ldd	r24, Y+55	; 0x37
    20fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	4a ef       	ldi	r20, 0xFA	; 250
    2106:	54 e4       	ldi	r21, 0x44	; 68
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	89 ab       	std	Y+49, r24	; 0x31
    2112:	9a ab       	std	Y+50, r25	; 0x32
    2114:	ab ab       	std	Y+51, r26	; 0x33
    2116:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2118:	69 a9       	ldd	r22, Y+49	; 0x31
    211a:	7a a9       	ldd	r23, Y+50	; 0x32
    211c:	8b a9       	ldd	r24, Y+51	; 0x33
    211e:	9c a9       	ldd	r25, Y+52	; 0x34
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	5f e3       	ldi	r21, 0x3F	; 63
    2128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212c:	88 23       	and	r24, r24
    212e:	2c f4       	brge	.+10     	; 0x213a <LCD_sendCommand+0x72>
		__ticks = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	98 ab       	std	Y+48, r25	; 0x30
    2136:	8f a7       	std	Y+47, r24	; 0x2f
    2138:	3f c0       	rjmp	.+126    	; 0x21b8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    213a:	69 a9       	ldd	r22, Y+49	; 0x31
    213c:	7a a9       	ldd	r23, Y+50	; 0x32
    213e:	8b a9       	ldd	r24, Y+51	; 0x33
    2140:	9c a9       	ldd	r25, Y+52	; 0x34
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	3f ef       	ldi	r19, 0xFF	; 255
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	57 e4       	ldi	r21, 0x47	; 71
    214a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214e:	18 16       	cp	r1, r24
    2150:	4c f5       	brge	.+82     	; 0x21a4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2152:	6d a9       	ldd	r22, Y+53	; 0x35
    2154:	7e a9       	ldd	r23, Y+54	; 0x36
    2156:	8f a9       	ldd	r24, Y+55	; 0x37
    2158:	98 ad       	ldd	r25, Y+56	; 0x38
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e2       	ldi	r20, 0x20	; 32
    2160:	51 e4       	ldi	r21, 0x41	; 65
    2162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	98 ab       	std	Y+48, r25	; 0x30
    2178:	8f a7       	std	Y+47, r24	; 0x2f
    217a:	0f c0       	rjmp	.+30     	; 0x219a <LCD_sendCommand+0xd2>
    217c:	88 ec       	ldi	r24, 0xC8	; 200
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e a7       	std	Y+46, r25	; 0x2e
    2182:	8d a7       	std	Y+45, r24	; 0x2d
    2184:	8d a5       	ldd	r24, Y+45	; 0x2d
    2186:	9e a5       	ldd	r25, Y+46	; 0x2e
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_sendCommand+0xc0>
    218c:	9e a7       	std	Y+46, r25	; 0x2e
    218e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	8f a5       	ldd	r24, Y+47	; 0x2f
    2192:	98 a9       	ldd	r25, Y+48	; 0x30
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	98 ab       	std	Y+48, r25	; 0x30
    2198:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219a:	8f a5       	ldd	r24, Y+47	; 0x2f
    219c:	98 a9       	ldd	r25, Y+48	; 0x30
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	69 f7       	brne	.-38     	; 0x217c <LCD_sendCommand+0xb4>
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a4:	69 a9       	ldd	r22, Y+49	; 0x31
    21a6:	7a a9       	ldd	r23, Y+50	; 0x32
    21a8:	8b a9       	ldd	r24, Y+51	; 0x33
    21aa:	9c a9       	ldd	r25, Y+52	; 0x34
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	98 ab       	std	Y+48, r25	; 0x30
    21b6:	8f a7       	std	Y+47, r24	; 0x2f
    21b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ba:	98 a9       	ldd	r25, Y+48	; 0x30
    21bc:	9c a7       	std	Y+44, r25	; 0x2c
    21be:	8b a7       	std	Y+43, r24	; 0x2b
    21c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_sendCommand+0xfc>
    21c8:	9c a7       	std	Y+44, r25	; 0x2c
    21ca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GPIO_writePin>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e8       	ldi	r26, 0x80	; 128
    21dc:	bf e3       	ldi	r27, 0x3F	; 63
    21de:	8f a3       	std	Y+39, r24	; 0x27
    21e0:	98 a7       	std	Y+40, r25	; 0x28
    21e2:	a9 a7       	std	Y+41, r26	; 0x29
    21e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6f a1       	ldd	r22, Y+39	; 0x27
    21e8:	78 a5       	ldd	r23, Y+40	; 0x28
    21ea:	89 a5       	ldd	r24, Y+41	; 0x29
    21ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a ef       	ldi	r20, 0xFA	; 250
    21f4:	54 e4       	ldi	r21, 0x44	; 68
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8b a3       	std	Y+35, r24	; 0x23
    2200:	9c a3       	std	Y+36, r25	; 0x24
    2202:	ad a3       	std	Y+37, r26	; 0x25
    2204:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <LCD_sendCommand+0x160>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9a a3       	std	Y+34, r25	; 0x22
    2224:	89 a3       	std	Y+33, r24	; 0x21
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2228:	6b a1       	ldd	r22, Y+35	; 0x23
    222a:	7c a1       	ldd	r23, Y+36	; 0x24
    222c:	8d a1       	ldd	r24, Y+37	; 0x25
    222e:	9e a1       	ldd	r25, Y+38	; 0x26
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6f a1       	ldd	r22, Y+39	; 0x27
    2242:	78 a5       	ldd	r23, Y+40	; 0x28
    2244:	89 a5       	ldd	r24, Y+41	; 0x29
    2246:	9a a5       	ldd	r25, Y+42	; 0x2a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9a a3       	std	Y+34, r25	; 0x22
    2266:	89 a3       	std	Y+33, r24	; 0x21
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <LCD_sendCommand+0x1c0>
    226a:	88 ec       	ldi	r24, 0xC8	; 200
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	98 a3       	std	Y+32, r25	; 0x20
    2270:	8f 8f       	std	Y+31, r24	; 0x1f
    2272:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2274:	98 a1       	ldd	r25, Y+32	; 0x20
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_sendCommand+0x1ae>
    227a:	98 a3       	std	Y+32, r25	; 0x20
    227c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	89 a1       	ldd	r24, Y+33	; 0x21
    2280:	9a a1       	ldd	r25, Y+34	; 0x22
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9a a3       	std	Y+34, r25	; 0x22
    2286:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	89 a1       	ldd	r24, Y+33	; 0x21
    228a:	9a a1       	ldd	r25, Y+34	; 0x22
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <LCD_sendCommand+0x1a2>
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	6b a1       	ldd	r22, Y+35	; 0x23
    2294:	7c a1       	ldd	r23, Y+36	; 0x24
    2296:	8d a1       	ldd	r24, Y+37	; 0x25
    2298:	9e a1       	ldd	r25, Y+38	; 0x26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	9e 8f       	std	Y+30, r25	; 0x1e
    22ac:	8d 8f       	std	Y+29, r24	; 0x1d
    22ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_sendCommand+0x1ea>
    22b6:	9e 8f       	std	Y+30, r25	; 0x1e
    22b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	69 ad       	ldd	r22, Y+57	; 0x39
    22be:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePort>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e8       	ldi	r26, 0x80	; 128
    22c8:	bf e3       	ldi	r27, 0x3F	; 63
    22ca:	89 8f       	std	Y+25, r24	; 0x19
    22cc:	9a 8f       	std	Y+26, r25	; 0x1a
    22ce:	ab 8f       	std	Y+27, r26	; 0x1b
    22d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	69 8d       	ldd	r22, Y+25	; 0x19
    22d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8d 8b       	std	Y+21, r24	; 0x15
    22ec:	9e 8b       	std	Y+22, r25	; 0x16
    22ee:	af 8b       	std	Y+23, r26	; 0x17
    22f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f2:	6d 89       	ldd	r22, Y+21	; 0x15
    22f4:	7e 89       	ldd	r23, Y+22	; 0x16
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	98 8d       	ldd	r25, Y+24	; 0x18
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <LCD_sendCommand+0x24c>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	69 8d       	ldd	r22, Y+25	; 0x19
    232e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_sendCommand+0x2ac>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9a 8b       	std	Y+18, r25	; 0x12
    235c:	89 8b       	std	Y+17, r24	; 0x11
    235e:	89 89       	ldd	r24, Y+17	; 0x11
    2360:	9a 89       	ldd	r25, Y+18	; 0x12
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_sendCommand+0x29a>
    2366:	9a 8b       	std	Y+18, r25	; 0x12
    2368:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8b 89       	ldd	r24, Y+19	; 0x13
    2376:	9c 89       	ldd	r25, Y+20	; 0x14
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <LCD_sendCommand+0x28e>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6d 89       	ldd	r22, Y+21	; 0x15
    2380:	7e 89       	ldd	r23, Y+22	; 0x16
    2382:	8f 89       	ldd	r24, Y+23	; 0x17
    2384:	98 8d       	ldd	r25, Y+24	; 0x18
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	98 8b       	std	Y+16, r25	; 0x10
    2398:	8f 87       	std	Y+15, r24	; 0x0f
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	98 89       	ldd	r25, Y+16	; 0x10
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_sendCommand+0x2d6>
    23a2:	98 8b       	std	Y+16, r25	; 0x10
    23a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	61 e0       	ldi	r22, 0x01	; 1
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GPIO_writePin>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	8b 87       	std	Y+11, r24	; 0x0b
    23ba:	9c 87       	std	Y+12, r25	; 0x0c
    23bc:	ad 87       	std	Y+13, r26	; 0x0d
    23be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4a ef       	ldi	r20, 0xFA	; 250
    23ce:	54 e4       	ldi	r21, 0x44	; 68
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8f 83       	std	Y+7, r24	; 0x07
    23da:	98 87       	std	Y+8, r25	; 0x08
    23dc:	a9 87       	std	Y+9, r26	; 0x09
    23de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <LCD_sendCommand+0x33a>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <LCD_sendCommand+0x39a>
    2444:	88 ec       	ldi	r24, 0xC8	; 200
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_sendCommand+0x388>
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <LCD_sendCommand+0x37c>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6f 81       	ldd	r22, Y+7	; 0x07
    246e:	78 85       	ldd	r23, Y+8	; 0x08
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_sendCommand+0x3c4>
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2494:	e9 96       	adiw	r28, 0x39	; 57
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	e9 97       	sbiw	r28, 0x39	; 57
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GPIO_writePin>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e8       	ldi	r26, 0x80	; 128
    24cc:	bf e3       	ldi	r27, 0x3F	; 63
    24ce:	8d ab       	std	Y+53, r24	; 0x35
    24d0:	9e ab       	std	Y+54, r25	; 0x36
    24d2:	af ab       	std	Y+55, r26	; 0x37
    24d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	6d a9       	ldd	r22, Y+53	; 0x35
    24d8:	7e a9       	ldd	r23, Y+54	; 0x36
    24da:	8f a9       	ldd	r24, Y+55	; 0x37
    24dc:	98 ad       	ldd	r25, Y+56	; 0x38
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a ef       	ldi	r20, 0xFA	; 250
    24e4:	54 e4       	ldi	r21, 0x44	; 68
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	89 ab       	std	Y+49, r24	; 0x31
    24f0:	9a ab       	std	Y+50, r25	; 0x32
    24f2:	ab ab       	std	Y+51, r26	; 0x33
    24f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f6:	69 a9       	ldd	r22, Y+49	; 0x31
    24f8:	7a a9       	ldd	r23, Y+50	; 0x32
    24fa:	8b a9       	ldd	r24, Y+51	; 0x33
    24fc:	9c a9       	ldd	r25, Y+52	; 0x34
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <LCD_displayCharacter+0x72>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	98 ab       	std	Y+48, r25	; 0x30
    2514:	8f a7       	std	Y+47, r24	; 0x2f
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2518:	69 a9       	ldd	r22, Y+49	; 0x31
    251a:	7a a9       	ldd	r23, Y+50	; 0x32
    251c:	8b a9       	ldd	r24, Y+51	; 0x33
    251e:	9c a9       	ldd	r25, Y+52	; 0x34
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	6d a9       	ldd	r22, Y+53	; 0x35
    2532:	7e a9       	ldd	r23, Y+54	; 0x36
    2534:	8f a9       	ldd	r24, Y+55	; 0x37
    2536:	98 ad       	ldd	r25, Y+56	; 0x38
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	98 ab       	std	Y+48, r25	; 0x30
    2556:	8f a7       	std	Y+47, r24	; 0x2f
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <LCD_displayCharacter+0xd2>
    255a:	88 ec       	ldi	r24, 0xC8	; 200
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e a7       	std	Y+46, r25	; 0x2e
    2560:	8d a7       	std	Y+45, r24	; 0x2d
    2562:	8d a5       	ldd	r24, Y+45	; 0x2d
    2564:	9e a5       	ldd	r25, Y+46	; 0x2e
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_displayCharacter+0xc0>
    256a:	9e a7       	std	Y+46, r25	; 0x2e
    256c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	98 ab       	std	Y+48, r25	; 0x30
    2576:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8f a5       	ldd	r24, Y+47	; 0x2f
    257a:	98 a9       	ldd	r25, Y+48	; 0x30
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <LCD_displayCharacter+0xb4>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	69 a9       	ldd	r22, Y+49	; 0x31
    2584:	7a a9       	ldd	r23, Y+50	; 0x32
    2586:	8b a9       	ldd	r24, Y+51	; 0x33
    2588:	9c a9       	ldd	r25, Y+52	; 0x34
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	98 ab       	std	Y+48, r25	; 0x30
    2594:	8f a7       	std	Y+47, r24	; 0x2f
    2596:	8f a5       	ldd	r24, Y+47	; 0x2f
    2598:	98 a9       	ldd	r25, Y+48	; 0x30
    259a:	9c a7       	std	Y+44, r25	; 0x2c
    259c:	8b a7       	std	Y+43, r24	; 0x2b
    259e:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_displayCharacter+0xfc>
    25a6:	9c a7       	std	Y+44, r25	; 0x2c
    25a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GPIO_writePin>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e8       	ldi	r26, 0x80	; 128
    25ba:	bf e3       	ldi	r27, 0x3F	; 63
    25bc:	8f a3       	std	Y+39, r24	; 0x27
    25be:	98 a7       	std	Y+40, r25	; 0x28
    25c0:	a9 a7       	std	Y+41, r26	; 0x29
    25c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6f a1       	ldd	r22, Y+39	; 0x27
    25c6:	78 a5       	ldd	r23, Y+40	; 0x28
    25c8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a ef       	ldi	r20, 0xFA	; 250
    25d2:	54 e4       	ldi	r21, 0x44	; 68
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8b a3       	std	Y+35, r24	; 0x23
    25de:	9c a3       	std	Y+36, r25	; 0x24
    25e0:	ad a3       	std	Y+37, r26	; 0x25
    25e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e4:	6b a1       	ldd	r22, Y+35	; 0x23
    25e6:	7c a1       	ldd	r23, Y+36	; 0x24
    25e8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ea:	9e a1       	ldd	r25, Y+38	; 0x26
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <LCD_displayCharacter+0x160>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9a a3       	std	Y+34, r25	; 0x22
    2602:	89 a3       	std	Y+33, r24	; 0x21
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2606:	6b a1       	ldd	r22, Y+35	; 0x23
    2608:	7c a1       	ldd	r23, Y+36	; 0x24
    260a:	8d a1       	ldd	r24, Y+37	; 0x25
    260c:	9e a1       	ldd	r25, Y+38	; 0x26
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6f a1       	ldd	r22, Y+39	; 0x27
    2620:	78 a5       	ldd	r23, Y+40	; 0x28
    2622:	89 a5       	ldd	r24, Y+41	; 0x29
    2624:	9a a5       	ldd	r25, Y+42	; 0x2a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9a a3       	std	Y+34, r25	; 0x22
    2644:	89 a3       	std	Y+33, r24	; 0x21
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <LCD_displayCharacter+0x1c0>
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	98 a3       	std	Y+32, r25	; 0x20
    264e:	8f 8f       	std	Y+31, r24	; 0x1f
    2650:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2652:	98 a1       	ldd	r25, Y+32	; 0x20
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_displayCharacter+0x1ae>
    2658:	98 a3       	std	Y+32, r25	; 0x20
    265a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	9a a1       	ldd	r25, Y+34	; 0x22
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9a a3       	std	Y+34, r25	; 0x22
    2664:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	89 a1       	ldd	r24, Y+33	; 0x21
    2668:	9a a1       	ldd	r25, Y+34	; 0x22
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <LCD_displayCharacter+0x1a2>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	6b a1       	ldd	r22, Y+35	; 0x23
    2672:	7c a1       	ldd	r23, Y+36	; 0x24
    2674:	8d a1       	ldd	r24, Y+37	; 0x25
    2676:	9e a1       	ldd	r25, Y+38	; 0x26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9a a3       	std	Y+34, r25	; 0x22
    2682:	89 a3       	std	Y+33, r24	; 0x21
    2684:	89 a1       	ldd	r24, Y+33	; 0x21
    2686:	9a a1       	ldd	r25, Y+34	; 0x22
    2688:	9e 8f       	std	Y+30, r25	; 0x1e
    268a:	8d 8f       	std	Y+29, r24	; 0x1d
    268c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    268e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_displayCharacter+0x1ea>
    2694:	9e 8f       	std	Y+30, r25	; 0x1e
    2696:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	69 ad       	ldd	r22, Y+57	; 0x39
    269c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <GPIO_writePort>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a0 e8       	ldi	r26, 0x80	; 128
    26a6:	bf e3       	ldi	r27, 0x3F	; 63
    26a8:	89 8f       	std	Y+25, r24	; 0x19
    26aa:	9a 8f       	std	Y+26, r25	; 0x1a
    26ac:	ab 8f       	std	Y+27, r26	; 0x1b
    26ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	69 8d       	ldd	r22, Y+25	; 0x19
    26b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a ef       	ldi	r20, 0xFA	; 250
    26be:	54 e4       	ldi	r21, 0x44	; 68
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8d 8b       	std	Y+21, r24	; 0x15
    26ca:	9e 8b       	std	Y+22, r25	; 0x16
    26cc:	af 8b       	std	Y+23, r26	; 0x17
    26ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d0:	6d 89       	ldd	r22, Y+21	; 0x15
    26d2:	7e 89       	ldd	r23, Y+22	; 0x16
    26d4:	8f 89       	ldd	r24, Y+23	; 0x17
    26d6:	98 8d       	ldd	r25, Y+24	; 0x18
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9c 8b       	std	Y+20, r25	; 0x14
    26ee:	8b 8b       	std	Y+19, r24	; 0x13
    26f0:	3f c0       	rjmp	.+126    	; 0x2770 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    26f2:	6d 89       	ldd	r22, Y+21	; 0x15
    26f4:	7e 89       	ldd	r23, Y+22	; 0x16
    26f6:	8f 89       	ldd	r24, Y+23	; 0x17
    26f8:	98 8d       	ldd	r25, Y+24	; 0x18
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	4c f5       	brge	.+82     	; 0x275c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270a:	69 8d       	ldd	r22, Y+25	; 0x19
    270c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <LCD_displayCharacter+0x2ac>
    2734:	88 ec       	ldi	r24, 0xC8	; 200
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9a 8b       	std	Y+18, r25	; 0x12
    273a:	89 8b       	std	Y+17, r24	; 0x11
    273c:	89 89       	ldd	r24, Y+17	; 0x11
    273e:	9a 89       	ldd	r25, Y+18	; 0x12
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_displayCharacter+0x29a>
    2744:	9a 8b       	std	Y+18, r25	; 0x12
    2746:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2748:	8b 89       	ldd	r24, Y+19	; 0x13
    274a:	9c 89       	ldd	r25, Y+20	; 0x14
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	69 f7       	brne	.-38     	; 0x2734 <LCD_displayCharacter+0x28e>
    275a:	14 c0       	rjmp	.+40     	; 0x2784 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	6d 89       	ldd	r22, Y+21	; 0x15
    275e:	7e 89       	ldd	r23, Y+22	; 0x16
    2760:	8f 89       	ldd	r24, Y+23	; 0x17
    2762:	98 8d       	ldd	r25, Y+24	; 0x18
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9c 8b       	std	Y+20, r25	; 0x14
    276e:	8b 8b       	std	Y+19, r24	; 0x13
    2770:	8b 89       	ldd	r24, Y+19	; 0x13
    2772:	9c 89       	ldd	r25, Y+20	; 0x14
    2774:	98 8b       	std	Y+16, r25	; 0x10
    2776:	8f 87       	std	Y+15, r24	; 0x0f
    2778:	8f 85       	ldd	r24, Y+15	; 0x0f
    277a:	98 89       	ldd	r25, Y+16	; 0x10
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_displayCharacter+0x2d6>
    2780:	98 8b       	std	Y+16, r25	; 0x10
    2782:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	61 e0       	ldi	r22, 0x01	; 1
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GPIO_writePin>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a0 e8       	ldi	r26, 0x80	; 128
    2794:	bf e3       	ldi	r27, 0x3F	; 63
    2796:	8b 87       	std	Y+11, r24	; 0x0b
    2798:	9c 87       	std	Y+12, r25	; 0x0c
    279a:	ad 87       	std	Y+13, r26	; 0x0d
    279c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279e:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a ef       	ldi	r20, 0xFA	; 250
    27ac:	54 e4       	ldi	r21, 0x44	; 68
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8f 83       	std	Y+7, r24	; 0x07
    27b8:	98 87       	std	Y+8, r25	; 0x08
    27ba:	a9 87       	std	Y+9, r26	; 0x09
    27bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e8       	ldi	r20, 0x80	; 128
    27cc:	5f e3       	ldi	r21, 0x3F	; 63
    27ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	2c f4       	brge	.+10     	; 0x27e0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9e 83       	std	Y+6, r25	; 0x06
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	3f c0       	rjmp	.+126    	; 0x285e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    27e0:	6f 81       	ldd	r22, Y+7	; 0x07
    27e2:	78 85       	ldd	r23, Y+8	; 0x08
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	4c f5       	brge	.+82     	; 0x284a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <LCD_displayCharacter+0x39a>
    2822:	88 ec       	ldi	r24, 0xC8	; 200
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9c 83       	std	Y+4, r25	; 0x04
    2828:	8b 83       	std	Y+3, r24	; 0x03
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_displayCharacter+0x388>
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	69 f7       	brne	.-38     	; 0x2822 <LCD_displayCharacter+0x37c>
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_displayCharacter+0x3c4>
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2872:	e9 96       	adiw	r28, 0x39	; 57
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <LCD_displayString+0x6>
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9b 83       	std	Y+3, r25	; 0x03
    2892:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2894:	19 82       	std	Y+1, r1	; 0x01
    2896:	0e c0       	rjmp	.+28     	; 0x28b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	fc 01       	movw	r30, r24
    28a4:	e2 0f       	add	r30, r18
    28a6:	f3 1f       	adc	r31, r19
    28a8:	80 81       	ld	r24, Z
    28aa:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_displayCharacter>
		i++;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	80 81       	ld	r24, Z
    28c6:	88 23       	and	r24, r24
    28c8:	39 f7       	brne	.-50     	; 0x2898 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <LCD_moveCursor+0x6>
    28dc:	00 d0       	rcall	.+0      	; 0x28de <LCD_moveCursor+0x8>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
    28e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3d 83       	std	Y+5, r19	; 0x05
    28f0:	2c 83       	std	Y+4, r18	; 0x04
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	91 05       	cpc	r25, r1
    28fa:	c1 f0       	breq	.+48     	; 0x292c <LCD_moveCursor+0x56>
    28fc:	2c 81       	ldd	r18, Y+4	; 0x04
    28fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2900:	22 30       	cpi	r18, 0x02	; 2
    2902:	31 05       	cpc	r19, r1
    2904:	2c f4       	brge	.+10     	; 0x2910 <LCD_moveCursor+0x3a>
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	61 f0       	breq	.+24     	; 0x2926 <LCD_moveCursor+0x50>
    290e:	19 c0       	rjmp	.+50     	; 0x2942 <LCD_moveCursor+0x6c>
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	22 30       	cpi	r18, 0x02	; 2
    2916:	31 05       	cpc	r19, r1
    2918:	69 f0       	breq	.+26     	; 0x2934 <LCD_moveCursor+0x5e>
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	91 05       	cpc	r25, r1
    2922:	61 f0       	breq	.+24     	; 0x293c <LCD_moveCursor+0x66>
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	0b c0       	rjmp	.+22     	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	80 5c       	subi	r24, 0xC0	; 192
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	80 5f       	subi	r24, 0xF0	; 240
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	80 5b       	subi	r24, 0xB0	; 176
    2940:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	80 68       	ori	r24, 0x80	; 128
    2946:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <LCD_displayStringRowColumn+0x6>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <LCD_displayStringRowColumn+0x8>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	6a 83       	std	Y+2, r22	; 0x02
    296a:	5c 83       	std	Y+4, r21	; 0x04
    296c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	6a 81       	ldd	r22, Y+2	; 0x02
    2972:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	62 97       	sbiw	r28, 0x12	; 18
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	9a 8b       	std	Y+18, r25	; 0x12
    29a2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	9a 89       	ldd	r25, Y+18	; 0x12
    29a8:	9e 01       	movw	r18, r28
    29aa:	2f 5f       	subi	r18, 0xFF	; 255
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	b9 01       	movw	r22, r18
    29b0:	4a e0       	ldi	r20, 0x0A	; 10
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <itoa>
   LCD_displayString(buff); /* Display the string */
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
}
    29c0:	62 96       	adiw	r28, 0x12	; 18
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
}
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <__vector_10>:

static CallbackFunction g_callBackPtr = NULL_PTR;



ISR(TIMER0_COMP_vect) {
    29e6:	1f 92       	push	r1
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	2f 93       	push	r18
    29f2:	3f 93       	push	r19
    29f4:	4f 93       	push	r20
    29f6:	5f 93       	push	r21
    29f8:	6f 93       	push	r22
    29fa:	7f 93       	push	r23
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	ef 93       	push	r30
    2a06:	ff 93       	push	r31
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    2a10:	80 91 ae 01 	lds	r24, 0x01AE
    2a14:	90 91 af 01 	lds	r25, 0x01AF
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	29 f0       	breq	.+10     	; 0x2a26 <__vector_10+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a1c:	e0 91 ae 01 	lds	r30, 0x01AE
    2a20:	f0 91 af 01 	lds	r31, 0x01AF
    2a24:	09 95       	icall
	}
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	1f 90       	pop	r1
    2a4a:	18 95       	reti

00002a4c <__vector_11>:

ISR(TIMER0_OVF_vect) {
    2a4c:	1f 92       	push	r1
    2a4e:	0f 92       	push	r0
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	0f 92       	push	r0
    2a54:	11 24       	eor	r1, r1
    2a56:	2f 93       	push	r18
    2a58:	3f 93       	push	r19
    2a5a:	4f 93       	push	r20
    2a5c:	5f 93       	push	r21
    2a5e:	6f 93       	push	r22
    2a60:	7f 93       	push	r23
    2a62:	8f 93       	push	r24
    2a64:	9f 93       	push	r25
    2a66:	af 93       	push	r26
    2a68:	bf 93       	push	r27
    2a6a:	ef 93       	push	r30
    2a6c:	ff 93       	push	r31
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    2a76:	80 91 ae 01 	lds	r24, 0x01AE
    2a7a:	90 91 af 01 	lds	r25, 0x01AF
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	29 f0       	breq	.+10     	; 0x2a8c <__vector_11+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a82:	e0 91 ae 01 	lds	r30, 0x01AE
    2a86:	f0 91 af 01 	lds	r31, 0x01AF
    2a8a:	09 95       	icall
	}
}
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	ff 91       	pop	r31
    2a92:	ef 91       	pop	r30
    2a94:	bf 91       	pop	r27
    2a96:	af 91       	pop	r26
    2a98:	9f 91       	pop	r25
    2a9a:	8f 91       	pop	r24
    2a9c:	7f 91       	pop	r23
    2a9e:	6f 91       	pop	r22
    2aa0:	5f 91       	pop	r21
    2aa2:	4f 91       	pop	r20
    2aa4:	3f 91       	pop	r19
    2aa6:	2f 91       	pop	r18
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	0f 90       	pop	r0
    2aae:	1f 90       	pop	r1
    2ab0:	18 95       	reti

00002ab2 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    2ab2:	1f 92       	push	r1
    2ab4:	0f 92       	push	r0
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	0f 92       	push	r0
    2aba:	11 24       	eor	r1, r1
    2abc:	2f 93       	push	r18
    2abe:	3f 93       	push	r19
    2ac0:	4f 93       	push	r20
    2ac2:	5f 93       	push	r21
    2ac4:	6f 93       	push	r22
    2ac6:	7f 93       	push	r23
    2ac8:	8f 93       	push	r24
    2aca:	9f 93       	push	r25
    2acc:	af 93       	push	r26
    2ace:	bf 93       	push	r27
    2ad0:	ef 93       	push	r30
    2ad2:	ff 93       	push	r31
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    2adc:	80 91 ae 01 	lds	r24, 0x01AE
    2ae0:	90 91 af 01 	lds	r25, 0x01AF
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	29 f0       	breq	.+10     	; 0x2af2 <__vector_4+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2ae8:	e0 91 ae 01 	lds	r30, 0x01AE
    2aec:	f0 91 af 01 	lds	r31, 0x01AF
    2af0:	09 95       	icall
	}
}
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	ff 91       	pop	r31
    2af8:	ef 91       	pop	r30
    2afa:	bf 91       	pop	r27
    2afc:	af 91       	pop	r26
    2afe:	9f 91       	pop	r25
    2b00:	8f 91       	pop	r24
    2b02:	7f 91       	pop	r23
    2b04:	6f 91       	pop	r22
    2b06:	5f 91       	pop	r21
    2b08:	4f 91       	pop	r20
    2b0a:	3f 91       	pop	r19
    2b0c:	2f 91       	pop	r18
    2b0e:	0f 90       	pop	r0
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	0f 90       	pop	r0
    2b14:	1f 90       	pop	r1
    2b16:	18 95       	reti

00002b18 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    2b18:	1f 92       	push	r1
    2b1a:	0f 92       	push	r0
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	0f 92       	push	r0
    2b20:	11 24       	eor	r1, r1
    2b22:	2f 93       	push	r18
    2b24:	3f 93       	push	r19
    2b26:	4f 93       	push	r20
    2b28:	5f 93       	push	r21
    2b2a:	6f 93       	push	r22
    2b2c:	7f 93       	push	r23
    2b2e:	8f 93       	push	r24
    2b30:	9f 93       	push	r25
    2b32:	af 93       	push	r26
    2b34:	bf 93       	push	r27
    2b36:	ef 93       	push	r30
    2b38:	ff 93       	push	r31
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    2b42:	80 91 ae 01 	lds	r24, 0x01AE
    2b46:	90 91 af 01 	lds	r25, 0x01AF
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	29 f0       	breq	.+10     	; 0x2b58 <__vector_5+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b4e:	e0 91 ae 01 	lds	r30, 0x01AE
    2b52:	f0 91 af 01 	lds	r31, 0x01AF
    2b56:	09 95       	icall
	}
}
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	ff 91       	pop	r31
    2b5e:	ef 91       	pop	r30
    2b60:	bf 91       	pop	r27
    2b62:	af 91       	pop	r26
    2b64:	9f 91       	pop	r25
    2b66:	8f 91       	pop	r24
    2b68:	7f 91       	pop	r23
    2b6a:	6f 91       	pop	r22
    2b6c:	5f 91       	pop	r21
    2b6e:	4f 91       	pop	r20
    2b70:	3f 91       	pop	r19
    2b72:	2f 91       	pop	r18
    2b74:	0f 90       	pop	r0
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	0f 90       	pop	r0
    2b7a:	1f 90       	pop	r1
    2b7c:	18 95       	reti

00002b7e <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    2b7e:	1f 92       	push	r1
    2b80:	0f 92       	push	r0
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	0f 92       	push	r0
    2b86:	11 24       	eor	r1, r1
    2b88:	2f 93       	push	r18
    2b8a:	3f 93       	push	r19
    2b8c:	4f 93       	push	r20
    2b8e:	5f 93       	push	r21
    2b90:	6f 93       	push	r22
    2b92:	7f 93       	push	r23
    2b94:	8f 93       	push	r24
    2b96:	9f 93       	push	r25
    2b98:	af 93       	push	r26
    2b9a:	bf 93       	push	r27
    2b9c:	ef 93       	push	r30
    2b9e:	ff 93       	push	r31
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    2ba8:	80 91 ae 01 	lds	r24, 0x01AE
    2bac:	90 91 af 01 	lds	r25, 0x01AF
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	29 f0       	breq	.+10     	; 0x2bbe <__vector_7+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2bb4:	e0 91 ae 01 	lds	r30, 0x01AE
    2bb8:	f0 91 af 01 	lds	r31, 0x01AF
    2bbc:	09 95       	icall
	}
}
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	ff 91       	pop	r31
    2bc4:	ef 91       	pop	r30
    2bc6:	bf 91       	pop	r27
    2bc8:	af 91       	pop	r26
    2bca:	9f 91       	pop	r25
    2bcc:	8f 91       	pop	r24
    2bce:	7f 91       	pop	r23
    2bd0:	6f 91       	pop	r22
    2bd2:	5f 91       	pop	r21
    2bd4:	4f 91       	pop	r20
    2bd6:	3f 91       	pop	r19
    2bd8:	2f 91       	pop	r18
    2bda:	0f 90       	pop	r0
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	0f 90       	pop	r0
    2be0:	1f 90       	pop	r1
    2be2:	18 95       	reti

00002be4 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	2f 93       	push	r18
    2bf0:	3f 93       	push	r19
    2bf2:	4f 93       	push	r20
    2bf4:	5f 93       	push	r21
    2bf6:	6f 93       	push	r22
    2bf8:	7f 93       	push	r23
    2bfa:	8f 93       	push	r24
    2bfc:	9f 93       	push	r25
    2bfe:	af 93       	push	r26
    2c00:	bf 93       	push	r27
    2c02:	ef 93       	push	r30
    2c04:	ff 93       	push	r31
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    2c0e:	80 91 ae 01 	lds	r24, 0x01AE
    2c12:	90 91 af 01 	lds	r25, 0x01AF
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	29 f0       	breq	.+10     	; 0x2c24 <__vector_9+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c1a:	e0 91 ae 01 	lds	r30, 0x01AE
    2c1e:	f0 91 af 01 	lds	r31, 0x01AF
    2c22:	09 95       	icall
	}
}
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	ff 91       	pop	r31
    2c2a:	ef 91       	pop	r30
    2c2c:	bf 91       	pop	r27
    2c2e:	af 91       	pop	r26
    2c30:	9f 91       	pop	r25
    2c32:	8f 91       	pop	r24
    2c34:	7f 91       	pop	r23
    2c36:	6f 91       	pop	r22
    2c38:	5f 91       	pop	r21
    2c3a:	4f 91       	pop	r20
    2c3c:	3f 91       	pop	r19
    2c3e:	2f 91       	pop	r18
    2c40:	0f 90       	pop	r0
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	0f 90       	pop	r0
    2c46:	1f 90       	pop	r1
    2c48:	18 95       	reti

00002c4a <Timer_init>:


void Timer_init(const Timer_ConfigType *Config_Ptr) {
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <Timer_init+0x6>
    2c50:	0f 92       	push	r0
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);
    2c5a:	af e5       	ldi	r26, 0x5F	; 95
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	ef e5       	ldi	r30, 0x5F	; 95
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	80 68       	ori	r24, 0x80	; 128
    2c66:	8c 93       	st	X, r24
		if ((Config_Ptr->timer_ID) == TIMER0) {
    2c68:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6c:	84 81       	ldd	r24, Z+4	; 0x04
    2c6e:	88 23       	and	r24, r24
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <Timer_init+0x2a>
    2c72:	92 c0       	rjmp	.+292    	; 0x2d98 <Timer_init+0x14e>
			if ((Config_Ptr->timer_mode) == PWM_MODE) {
    2c74:	e9 81       	ldd	r30, Y+1	; 0x01
    2c76:	fa 81       	ldd	r31, Y+2	; 0x02
    2c78:	86 81       	ldd	r24, Z+6	; 0x06
    2c7a:	83 30       	cpi	r24, 0x03	; 3
    2c7c:	81 f5       	brne	.+96     	; 0x2cde <Timer_init+0x94>
				/*Choose Mode*/
				SET_BIT(TCCR0, WGM00);
    2c7e:	a3 e5       	ldi	r26, 0x53	; 83
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e3 e5       	ldi	r30, 0x53	; 83
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	80 64       	ori	r24, 0x40	; 64
    2c8a:	8c 93       	st	X, r24
				SET_BIT(TCCR0, WGM01);
    2c8c:	a3 e5       	ldi	r26, 0x53	; 83
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	e3 e5       	ldi	r30, 0x53	; 83
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	88 60       	ori	r24, 0x08	; 8
    2c98:	8c 93       	st	X, r24
				/* to (nin-inverting mode) COM01 set to 1 to Compare Output Mode, Fast PWM Mode*/
				SET_BIT(TCCR0, COM01);
    2c9a:	a3 e5       	ldi	r26, 0x53	; 83
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	80 62       	ori	r24, 0x20	; 32
    2ca6:	8c 93       	st	X, r24
				/*Choose Pre_scaller*/
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    2ca8:	a3 e5       	ldi	r26, 0x53	; 83
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e3 e5       	ldi	r30, 0x53	; 83
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	98 2f       	mov	r25, r24
    2cb4:	98 7f       	andi	r25, 0xF8	; 248
    2cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cba:	85 81       	ldd	r24, Z+5	; 0x05
    2cbc:	89 2b       	or	r24, r25
    2cbe:	8c 93       	st	X, r24
				TCNT0 = Config_Ptr->timer_InitialValue; //initial value to count
    2cc0:	a2 e5       	ldi	r26, 0x52	; 82
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	8c 93       	st	X, r24
				/*Duty Cycle for speed of Motor*/
				OCR0 = Config_Ptr->timer_compare_MatchValue;
    2cce:	ac e5       	ldi	r26, 0x5C	; 92
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	8c 93       	st	X, r24
    2cdc:	12 c1       	rjmp	.+548    	; 0x2f02 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) ==   CTC_MODE) {
    2cde:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce2:	86 81       	ldd	r24, Z+6	; 0x06
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	81 f5       	brne	.+96     	; 0x2d48 <Timer_init+0xfe>
				/*Active non PWM Mode*/
				SET_BIT(TCCR0, FOC0);
    2ce8:	a3 e5       	ldi	r26, 0x53	; 83
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e3 e5       	ldi	r30, 0x53	; 83
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 68       	ori	r24, 0x80	; 128
    2cf4:	8c 93       	st	X, r24
				/*Choose Mode*/
				/* Normal port operation, OC0 disconnected */
				SET_BIT(TCCR0, WGM01);
    2cf6:	a3 e5       	ldi	r26, 0x53	; 83
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e3 e5       	ldi	r30, 0x53	; 83
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	88 60       	ori	r24, 0x08	; 8
    2d02:	8c 93       	st	X, r24
				/*Choose Pre_scaller*/
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    2d04:	a3 e5       	ldi	r26, 0x53	; 83
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e3 e5       	ldi	r30, 0x53	; 83
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	98 2f       	mov	r25, r24
    2d10:	98 7f       	andi	r25, 0xF8	; 248
    2d12:	e9 81       	ldd	r30, Y+1	; 0x01
    2d14:	fa 81       	ldd	r31, Y+2	; 0x02
    2d16:	85 81       	ldd	r24, Z+5	; 0x05
    2d18:	89 2b       	or	r24, r25
    2d1a:	8c 93       	st	X, r24
				TCNT0 = Config_Ptr->timer_InitialValue; //initial value to count
    2d1c:	a2 e5       	ldi	r26, 0x52	; 82
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e9 81       	ldd	r30, Y+1	; 0x01
    2d22:	fa 81       	ldd	r31, Y+2	; 0x02
    2d24:	80 81       	ld	r24, Z
    2d26:	91 81       	ldd	r25, Z+1	; 0x01
    2d28:	8c 93       	st	X, r24
				OCR0 = Config_Ptr->timer_compare_MatchValue;
    2d2a:	ac e5       	ldi	r26, 0x5C	; 92
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d30:	fa 81       	ldd	r31, Y+2	; 0x02
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	8c 93       	st	X, r24
				/*Timer/Counter0 Output Compare Match Interrupt Enable */
				SET_BIT(TIMSK, OCIE0);
    2d38:	a9 e5       	ldi	r26, 0x59	; 89
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e9 e5       	ldi	r30, 0x59	; 89
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	82 60       	ori	r24, 0x02	; 2
    2d44:	8c 93       	st	X, r24
    2d46:	dd c0       	rjmp	.+442    	; 0x2f02 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) == NORMAL_MODE) {
    2d48:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4c:	86 81       	ldd	r24, Z+6	; 0x06
    2d4e:	88 23       	and	r24, r24
    2d50:	09 f0       	breq	.+2      	; 0x2d54 <Timer_init+0x10a>
    2d52:	d7 c0       	rjmp	.+430    	; 0x2f02 <Timer_init+0x2b8>
				/*Active non PWM Mode*/
				SET_BIT(TCCR0, FOC0);
    2d54:	a3 e5       	ldi	r26, 0x53	; 83
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e3 e5       	ldi	r30, 0x53	; 83
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	80 68       	ori	r24, 0x80	; 128
    2d60:	8c 93       	st	X, r24
				/*Choose Pre_scaller*/
				TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock);
    2d62:	a3 e5       	ldi	r26, 0x53	; 83
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e3 e5       	ldi	r30, 0x53	; 83
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	98 2f       	mov	r25, r24
    2d6e:	98 7f       	andi	r25, 0xF8	; 248
    2d70:	e9 81       	ldd	r30, Y+1	; 0x01
    2d72:	fa 81       	ldd	r31, Y+2	; 0x02
    2d74:	85 81       	ldd	r24, Z+5	; 0x05
    2d76:	89 2b       	or	r24, r25
    2d78:	8c 93       	st	X, r24
				TCNT0 = Config_Ptr->timer_InitialValue; //initial value to count
    2d7a:	a2 e5       	ldi	r26, 0x52	; 82
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d80:	fa 81       	ldd	r31, Y+2	; 0x02
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	8c 93       	st	X, r24
				/*Timer/Counter0 Overflow Interrupt Enable*/
				SET_BIT(TIMSK, TOIE0);
    2d88:	a9 e5       	ldi	r26, 0x59	; 89
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e9 e5       	ldi	r30, 0x59	; 89
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	81 60       	ori	r24, 0x01	; 1
    2d94:	8c 93       	st	X, r24
    2d96:	b5 c0       	rjmp	.+362    	; 0x2f02 <Timer_init+0x2b8>
			}
		} else if ((Config_Ptr->timer_ID) == TIMER1) {
    2d98:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9c:	84 81       	ldd	r24, Z+4	; 0x04
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <Timer_init+0x15a>
    2da2:	a2 c0       	rjmp	.+324    	; 0x2ee8 <Timer_init+0x29e>
			if ((Config_Ptr->timer_mode) == PWM_MODE) {
    2da4:	e9 81       	ldd	r30, Y+1	; 0x01
    2da6:	fa 81       	ldd	r31, Y+2	; 0x02
    2da8:	86 81       	ldd	r24, Z+6	; 0x06
    2daa:	83 30       	cpi	r24, 0x03	; 3
    2dac:	d9 f5       	brne	.+118    	; 0x2e24 <Timer_init+0x1da>
				/*Compare Output Mode, Fast PWM(1) AS non-inverting mode*/
				SET_BIT(TCCR1A, COM1A1);
    2dae:	af e4       	ldi	r26, 0x4F	; 79
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	ef e4       	ldi	r30, 0x4F	; 79
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	80 68       	ori	r24, 0x80	; 128
    2dba:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1);
    2dbc:	af e4       	ldi	r26, 0x4F	; 79
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	ef e4       	ldi	r30, 0x4F	; 79
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	80 62       	ori	r24, 0x20	; 32
    2dc8:	8c 93       	st	X, r24
				/*The FOC1A/FOC1B bits are only active when
				 * the WGM13:0 bits specifies a non-PWM mode*/

				/*Fast PWM, 8-bit   MODE 5*/
				SET_BIT(TCCR1A, WGM10);
    2dca:	af e4       	ldi	r26, 0x4F	; 79
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	ef e4       	ldi	r30, 0x4F	; 79
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	81 60       	ori	r24, 0x01	; 1
    2dd6:	8c 93       	st	X, r24
				SET_BIT(TCCR1B, WGM12);
    2dd8:	ae e4       	ldi	r26, 0x4E	; 78
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	ee e4       	ldi	r30, 0x4E	; 78
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	88 60       	ori	r24, 0x08	; 8
    2de4:	8c 93       	st	X, r24

				/*
				 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
				 * of TCCR1B Register
				 */
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    2de6:	ae e4       	ldi	r26, 0x4E	; 78
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	ee e4       	ldi	r30, 0x4E	; 78
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	98 2f       	mov	r25, r24
    2df2:	98 7f       	andi	r25, 0xF8	; 248
    2df4:	e9 81       	ldd	r30, Y+1	; 0x01
    2df6:	fa 81       	ldd	r31, Y+2	; 0x02
    2df8:	85 81       	ldd	r24, Z+5	; 0x05
    2dfa:	89 2b       	or	r24, r25
    2dfc:	8c 93       	st	X, r24

				/*Initial value for timer 1*/
				TCNT1 = Config_Ptr->timer_InitialValue;
    2dfe:	ac e4       	ldi	r26, 0x4C	; 76
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e9 81       	ldd	r30, Y+1	; 0x01
    2e04:	fa 81       	ldd	r31, Y+2	; 0x02
    2e06:	80 81       	ld	r24, Z
    2e08:	91 81       	ldd	r25, Z+1	; 0x01
    2e0a:	11 96       	adiw	r26, 0x01	; 1
    2e0c:	9c 93       	st	X, r25
    2e0e:	8e 93       	st	-X, r24

				OCR1A = Config_Ptr->timer_compare_MatchValue;
    2e10:	aa e4       	ldi	r26, 0x4A	; 74
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e9 81       	ldd	r30, Y+1	; 0x01
    2e16:	fa 81       	ldd	r31, Y+2	; 0x02
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	11 96       	adiw	r26, 0x01	; 1
    2e1e:	9c 93       	st	X, r25
    2e20:	8e 93       	st	-X, r24
    2e22:	6f c0       	rjmp	.+222    	; 0x2f02 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) ==  CTC_MODE) {
    2e24:	e9 81       	ldd	r30, Y+1	; 0x01
    2e26:	fa 81       	ldd	r31, Y+2	; 0x02
    2e28:	86 81       	ldd	r24, Z+6	; 0x06
    2e2a:	81 30       	cpi	r24, 0x01	; 1
    2e2c:	a1 f5       	brne	.+104    	; 0x2e96 <Timer_init+0x24c>
				/*Compare Output Mode, non-PWM Normal port operation
				 *  COM1A1/COM1A0/COM1B1/COM1B0 = 0 */

				/*The FOC1A/FOC1B bits are only active when
				 * the WGM13:0 bits specifies a non-PWM mode*/
				SET_BIT(TCCR1A, FOC1A);
    2e2e:	af e4       	ldi	r26, 0x4F	; 79
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	ef e4       	ldi	r30, 0x4F	; 79
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	88 60       	ori	r24, 0x08	; 8
    2e3a:	8c 93       	st	X, r24
				/*choose MODE 4 =====> Top = OCR1A ====>*/
				SET_BIT(TCCR1B, WGM12);
    2e3c:	ae e4       	ldi	r26, 0x4E	; 78
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	ee e4       	ldi	r30, 0x4E	; 78
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	88 60       	ori	r24, 0x08	; 8
    2e48:	8c 93       	st	X, r24

				/*
				 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
				 * of TCCR1B Register
				 */
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    2e4a:	ae e4       	ldi	r26, 0x4E	; 78
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	ee e4       	ldi	r30, 0x4E	; 78
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	98 2f       	mov	r25, r24
    2e56:	98 7f       	andi	r25, 0xF8	; 248
    2e58:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5c:	85 81       	ldd	r24, Z+5	; 0x05
    2e5e:	89 2b       	or	r24, r25
    2e60:	8c 93       	st	X, r24

				/*Initial value for timer 1*/
				TCNT1 = Config_Ptr->timer_InitialValue;
    2e62:	ac e4       	ldi	r26, 0x4C	; 76
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e9 81       	ldd	r30, Y+1	; 0x01
    2e68:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	11 96       	adiw	r26, 0x01	; 1
    2e70:	9c 93       	st	X, r25
    2e72:	8e 93       	st	-X, r24

				OCR1A = Config_Ptr->timer_compare_MatchValue;
    2e74:	aa e4       	ldi	r26, 0x4A	; 74
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7c:	82 81       	ldd	r24, Z+2	; 0x02
    2e7e:	93 81       	ldd	r25, Z+3	; 0x03
    2e80:	11 96       	adiw	r26, 0x01	; 1
    2e82:	9c 93       	st	X, r25
    2e84:	8e 93       	st	-X, r24

				/*enable interrupt of timer 1 FOR compare output capture */
				SET_BIT(TIMSK, OCIE1A);
    2e86:	a9 e5       	ldi	r26, 0x59	; 89
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e9 e5       	ldi	r30, 0x59	; 89
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 61       	ori	r24, 0x10	; 16
    2e92:	8c 93       	st	X, r24
    2e94:	36 c0       	rjmp	.+108    	; 0x2f02 <Timer_init+0x2b8>
			} else if ((Config_Ptr->timer_mode) == NORMAL_MODE) {
    2e96:	e9 81       	ldd	r30, Y+1	; 0x01
    2e98:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9a:	86 81       	ldd	r24, Z+6	; 0x06
    2e9c:	88 23       	and	r24, r24
    2e9e:	89 f5       	brne	.+98     	; 0x2f02 <Timer_init+0x2b8>
				/*non-PWM Normal port operation
				 *  COM1A1/COM1A0/COM1B1/COM1B0 = 0 */
				SET_BIT(TCCR1A, FOC1A);
    2ea0:	af e4       	ldi	r26, 0x4F	; 79
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	ef e4       	ldi	r30, 0x4F	; 79
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	88 60       	ori	r24, 0x08	; 8
    2eac:	8c 93       	st	X, r24

				/*
				 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
				 * of TCCR1B Register
				 */
				TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock);
    2eae:	ae e4       	ldi	r26, 0x4E	; 78
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	ee e4       	ldi	r30, 0x4E	; 78
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	98 2f       	mov	r25, r24
    2eba:	98 7f       	andi	r25, 0xF8	; 248
    2ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec0:	85 81       	ldd	r24, Z+5	; 0x05
    2ec2:	89 2b       	or	r24, r25
    2ec4:	8c 93       	st	X, r24

				/*Initial value for timer 1*/
				TCNT1 = Config_Ptr->timer_InitialValue;
    2ec6:	ac e4       	ldi	r26, 0x4C	; 76
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	11 96       	adiw	r26, 0x01	; 1
    2ed4:	9c 93       	st	X, r25
    2ed6:	8e 93       	st	-X, r24

				SET_BIT(TIMSK, TOIE1);
    2ed8:	a9 e5       	ldi	r26, 0x59	; 89
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	e9 e5       	ldi	r30, 0x59	; 89
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	84 60       	ori	r24, 0x04	; 4
    2ee4:	8c 93       	st	X, r24
    2ee6:	0d c0       	rjmp	.+26     	; 0x2f02 <Timer_init+0x2b8>
			}
		} else if ((Config_Ptr->timer_ID) == TIMER2) {
    2ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eea:	fa 81       	ldd	r31, Y+2	; 0x02
    2eec:	84 81       	ldd	r24, Z+4	; 0x04
    2eee:	82 30       	cpi	r24, 0x02	; 2
    2ef0:	41 f4       	brne	.+16     	; 0x2f02 <Timer_init+0x2b8>
			if ((Config_Ptr->timer_mode) == PWM_MODE) {
    2ef2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef6:	86 81       	ldd	r24, Z+6	; 0x06
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	19 f0       	breq	.+6      	; 0x2f02 <Timer_init+0x2b8>

			} else if ((Config_Ptr->timer_mode) ==     CTC_MODE) {
    2efc:	e9 81       	ldd	r30, Y+1	; 0x01
    2efe:	fa 81       	ldd	r31, Y+2	; 0x02
    2f00:	86 81       	ldd	r24, Z+6	; 0x06

			} else if ((Config_Ptr->timer_mode) == NORMAL_MODE) {

			}
		}}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	00 d0       	rcall	.+0      	; 0x2f14 <Timer_deInit+0x6>
    2f14:	0f 92       	push	r0
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	3b 83       	std	Y+3, r19	; 0x03
    2f24:	2a 83       	std	Y+2, r18	; 0x02
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2a:	81 30       	cpi	r24, 0x01	; 1
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	b9 f0       	breq	.+46     	; 0x2f5e <Timer_deInit+0x50>
    2f30:	2a 81       	ldd	r18, Y+2	; 0x02
    2f32:	3b 81       	ldd	r19, Y+3	; 0x03
    2f34:	22 30       	cpi	r18, 0x02	; 2
    2f36:	31 05       	cpc	r19, r1
    2f38:	21 f1       	breq	.+72     	; 0x2f82 <Timer_deInit+0x74>
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f5       	brne	.+90     	; 0x2f9c <Timer_deInit+0x8e>
	    case TIMER0:
	            // Stop Timer0 by clearing the control register
         TCCR0 = 0x00; // Clear Timer/Counter Control Register
    2f42:	e3 e5       	ldi	r30, 0x53	; 83
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	10 82       	st	Z, r1
         TCNT0 = 0x00; // Clear Timer/Counter Register
    2f48:	e2 e5       	ldi	r30, 0x52	; 82
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	10 82       	st	Z, r1
         TIFR |= (1 << TOV0); // Clear overflow flag
    2f4e:	a8 e5       	ldi	r26, 0x58	; 88
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e8 e5       	ldi	r30, 0x58	; 88
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	81 60       	ori	r24, 0x01	; 1
    2f5a:	8c 93       	st	X, r24
    2f5c:	1f c0       	rjmp	.+62     	; 0x2f9c <Timer_deInit+0x8e>
        break;

        case TIMER1:
	      // Stop Timer1 by clearing the control register
	       TCCR1A = 0x00; // Clear Timer/Counter Control Register A
    2f5e:	ef e4       	ldi	r30, 0x4F	; 79
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	10 82       	st	Z, r1
	       TCCR1B = 0x00; // Clear Timer/Counter Control Register B
    2f64:	ee e4       	ldi	r30, 0x4E	; 78
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	10 82       	st	Z, r1
	       TCNT1 = 0x00; // Clear Timer/Counter Register
    2f6a:	ec e4       	ldi	r30, 0x4C	; 76
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	11 82       	std	Z+1, r1	; 0x01
    2f70:	10 82       	st	Z, r1
	       TIFR |= (1 << TOV1); // Clear overflow flag
    2f72:	a8 e5       	ldi	r26, 0x58	; 88
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e8 e5       	ldi	r30, 0x58	; 88
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	84 60       	ori	r24, 0x04	; 4
    2f7e:	8c 93       	st	X, r24
    2f80:	0d c0       	rjmp	.+26     	; 0x2f9c <Timer_deInit+0x8e>
	    break;

	    case TIMER2:
	            // Stop Timer2 by clearing the control register
	    	TCCR2 = 0x00; // Clear Timer/Counter Control Register
    2f82:	e5 e4       	ldi	r30, 0x45	; 69
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	10 82       	st	Z, r1
	        TCNT2 = 0x00; // Clear Timer/Counter Register
    2f88:	e4 e4       	ldi	r30, 0x44	; 68
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	10 82       	st	Z, r1
	        TIFR |= (1 << TOV2); // Clear overflow flag
    2f8e:	a8 e5       	ldi	r26, 0x58	; 88
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e8 e5       	ldi	r30, 0x58	; 88
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	80 64       	ori	r24, 0x40	; 64
    2f9a:	8c 93       	st	X, r24

	        default:
	            // Handle invalid timer ID if necessary
	            break;
	    }
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <Timer_setCallBack>:

void Timer_setCallBack(CallbackFunction a_ptr, Timer_ID_Type a_timer_ID) {
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <Timer_setCallBack+0x6>
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <Timer_setCallBack+0x8>
    2fb0:	0f 92       	push	r0
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	9a 83       	std	Y+2, r25	; 0x02
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	3d 83       	std	Y+5, r19	; 0x05
    2fc4:	2c 83       	std	Y+4, r18	; 0x04
    2fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fca:	81 30       	cpi	r24, 0x01	; 1
    2fcc:	91 05       	cpc	r25, r1
    2fce:	81 f0       	breq	.+32     	; 0x2ff0 <Timer_setCallBack+0x48>
    2fd0:	2c 81       	ldd	r18, Y+4	; 0x04
    2fd2:	3d 81       	ldd	r19, Y+5	; 0x05
    2fd4:	22 30       	cpi	r18, 0x02	; 2
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	91 f0       	breq	.+36     	; 0x2ffe <Timer_setCallBack+0x56>
    2fda:	8c 81       	ldd	r24, Y+4	; 0x04
    2fdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	a1 f4       	brne	.+40     	; 0x300a <Timer_setCallBack+0x62>
        case TIMER0:
        	g_callBackPtr = a_ptr;
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe6:	90 93 af 01 	sts	0x01AF, r25
    2fea:	80 93 ae 01 	sts	0x01AE, r24
    2fee:	0d c0       	rjmp	.+26     	; 0x300a <Timer_setCallBack+0x62>
            break;
        case TIMER1:
        	g_callBackPtr = a_ptr;
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	90 93 af 01 	sts	0x01AF, r25
    2ff8:	80 93 ae 01 	sts	0x01AE, r24
    2ffc:	06 c0       	rjmp	.+12     	; 0x300a <Timer_setCallBack+0x62>
            break;
        case TIMER2:
        	g_callBackPtr = a_ptr;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	9a 81       	ldd	r25, Y+2	; 0x02
    3002:	90 93 af 01 	sts	0x01AF, r25
    3006:	80 93 ae 01 	sts	0x01AE, r24
            break;
    }
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType *Config_Ptr) {
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <UART_init+0x6>
    3020:	00 d0       	rcall	.+0      	; 0x3022 <UART_init+0x8>
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	9c 83       	std	Y+4, r25	; 0x04
    3028:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    302a:	1a 82       	std	Y+2, r1	; 0x02
    302c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * disable Frame Error by writing 0 in FE bit
	 * U2X = 1 for double transmission speed
	 * */
	UCSRA = (1 << U2X);
    302e:	eb e2       	ldi	r30, 0x2B	; 43
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	82 e0       	ldi	r24, 0x02	; 2
    3034:	80 83       	st	Z, r24
	if ((Config_Ptr->parity) == UART_EVEN) {
    3036:	eb 81       	ldd	r30, Y+3	; 0x03
    3038:	fc 81       	ldd	r31, Y+4	; 0x04
    303a:	81 81       	ldd	r24, Z+1	; 0x01
    303c:	92 81       	ldd	r25, Z+2	; 0x02
    303e:	82 30       	cpi	r24, 0x02	; 2
    3040:	91 05       	cpc	r25, r1
    3042:	41 f4       	brne	.+16     	; 0x3054 <UART_init+0x3a>
		SET_BIT(UCSRA, UPM1);
    3044:	ab e2       	ldi	r26, 0x2B	; 43
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	eb e2       	ldi	r30, 0x2B	; 43
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	80 62       	ori	r24, 0x20	; 32
    3050:	8c 93       	st	X, r24
    3052:	15 c0       	rjmp	.+42     	; 0x307e <UART_init+0x64>
	} else if ((Config_Ptr->parity) == UART_ODD) {
    3054:	eb 81       	ldd	r30, Y+3	; 0x03
    3056:	fc 81       	ldd	r31, Y+4	; 0x04
    3058:	81 81       	ldd	r24, Z+1	; 0x01
    305a:	92 81       	ldd	r25, Z+2	; 0x02
    305c:	81 30       	cpi	r24, 0x01	; 1
    305e:	91 05       	cpc	r25, r1
    3060:	71 f4       	brne	.+28     	; 0x307e <UART_init+0x64>
		SET_BIT(UCSRA, UPM0);
    3062:	ab e2       	ldi	r26, 0x2B	; 43
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	eb e2       	ldi	r30, 0x2B	; 43
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	80 61       	ori	r24, 0x10	; 16
    306e:	8c 93       	st	X, r24
		SET_BIT(UCSRA, UPM1);
    3070:	ab e2       	ldi	r26, 0x2B	; 43
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	eb e2       	ldi	r30, 0x2B	; 43
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	80 62       	ori	r24, 0x20	; 32
    307c:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	if ((Config_Ptr->bit_data) == UART_8_BIT_DATA_MODE) {
    307e:	eb 81       	ldd	r30, Y+3	; 0x03
    3080:	fc 81       	ldd	r31, Y+4	; 0x04
    3082:	80 81       	ld	r24, Z
    3084:	88 23       	and	r24, r24
    3086:	21 f4       	brne	.+8      	; 0x3090 <UART_init+0x76>
		UCSRB = (1 << RXEN) | (1 << TXEN);
    3088:	ea e2       	ldi	r30, 0x2A	; 42
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	88 e1       	ldi	r24, 0x18	; 24
    308e:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
    3090:	e0 e4       	ldi	r30, 0x40	; 64
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	86 e8       	ldi	r24, 0x86	; 134
    3096:	80 83       	st	Z, r24
	if ((Config_Ptr->stop_bit) == UART_2_STOP) {
    3098:	eb 81       	ldd	r30, Y+3	; 0x03
    309a:	fc 81       	ldd	r31, Y+4	; 0x04
    309c:	83 81       	ldd	r24, Z+3	; 0x03
    309e:	94 81       	ldd	r25, Z+4	; 0x04
    30a0:	a5 81       	ldd	r26, Z+5	; 0x05
    30a2:	b6 81       	ldd	r27, Z+6	; 0x06
    30a4:	81 30       	cpi	r24, 0x01	; 1
    30a6:	91 05       	cpc	r25, r1
    30a8:	a1 05       	cpc	r26, r1
    30aa:	b1 05       	cpc	r27, r1
    30ac:	39 f4       	brne	.+14     	; 0x30bc <UART_init+0xa2>
		SET_BIT(UCSRC, USBS);
    30ae:	a0 e4       	ldi	r26, 0x40	; 64
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	e0 e4       	ldi	r30, 0x40	; 64
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	88 60       	ori	r24, 0x08	; 8
    30ba:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    30bc:	eb 81       	ldd	r30, Y+3	; 0x03
    30be:	fc 81       	ldd	r31, Y+4	; 0x04
    30c0:	87 81       	ldd	r24, Z+7	; 0x07
    30c2:	90 85       	ldd	r25, Z+8	; 0x08
    30c4:	a1 85       	ldd	r26, Z+9	; 0x09
    30c6:	b2 85       	ldd	r27, Z+10	; 0x0a
    30c8:	88 0f       	add	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	aa 1f       	adc	r26, r26
    30ce:	bb 1f       	adc	r27, r27
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	aa 1f       	adc	r26, r26
    30d6:	bb 1f       	adc	r27, r27
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	aa 1f       	adc	r26, r26
    30de:	bb 1f       	adc	r27, r27
    30e0:	9c 01       	movw	r18, r24
    30e2:	ad 01       	movw	r20, r26
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	92 e1       	ldi	r25, 0x12	; 18
    30e8:	aa e7       	ldi	r26, 0x7A	; 122
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 23 19 	call	0x3246	; 0x3246 <__udivmodsi4>
    30f4:	da 01       	movw	r26, r20
    30f6:	c9 01       	movw	r24, r18
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    30fe:	e0 e4       	ldi	r30, 0x40	; 64
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	89 2f       	mov	r24, r25
    3108:	99 27       	eor	r25, r25
    310a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    310c:	e9 e2       	ldi	r30, 0x29	; 41
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	80 83       	st	Z, r24
}
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	0f 92       	push	r0
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    312e:	eb e2       	ldi	r30, 0x2B	; 43
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	80 72       	andi	r24, 0x20	; 32
    313a:	90 70       	andi	r25, 0x00	; 0
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	b9 f3       	breq	.-18     	; 0x312e <UART_sendByte+0xc>
		;
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3140:	ec e2       	ldi	r30, 0x2C	; 44
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    3158:	eb e2       	ldi	r30, 0x2B	; 43
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	88 23       	and	r24, r24
    3160:	dc f7       	brge	.-10     	; 0x3158 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3162:	ec e2       	ldi	r30, 0x2C	; 44
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
}
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	00 d0       	rcall	.+0      	; 0x3174 <UART_sendString+0x6>
    3174:	0f 92       	push	r0
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	9b 83       	std	Y+3, r25	; 0x03
    317c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    317e:	19 82       	std	Y+1, r1	; 0x01
    3180:	0e c0       	rjmp	.+28     	; 0x319e <UART_sendString+0x30>
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	8a 81       	ldd	r24, Y+2	; 0x02
    318a:	9b 81       	ldd	r25, Y+3	; 0x03
    318c:	fc 01       	movw	r30, r24
    318e:	e2 0f       	add	r30, r18
    3190:	f3 1f       	adc	r31, r19
    3192:	80 81       	ld	r24, Z
    3194:	0e 94 91 18 	call	0x3122	; 0x3122 <UART_sendByte>
		i++;
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	8f 5f       	subi	r24, 0xFF	; 255
    319c:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	8a 81       	ldd	r24, Y+2	; 0x02
    31a6:	9b 81       	ldd	r25, Y+3	; 0x03
    31a8:	fc 01       	movw	r30, r24
    31aa:	e2 0f       	add	r30, r18
    31ac:	f3 1f       	adc	r31, r19
    31ae:	80 81       	ld	r24, Z
    31b0:	88 23       	and	r24, r24
    31b2:	39 f7       	brne	.-50     	; 0x3182 <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) // Receive until #
{
    31c0:	0f 93       	push	r16
    31c2:	1f 93       	push	r17
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <UART_receiveString+0xa>
    31ca:	0f 92       	push	r0
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	9b 83       	std	Y+3, r25	; 0x03
    31d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31d4:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	8c 01       	movw	r16, r24
    31e2:	02 0f       	add	r16, r18
    31e4:	13 1f       	adc	r17, r19
    31e6:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_recieveByte>
    31ea:	f8 01       	movw	r30, r16
    31ec:	80 83       	st	Z, r24
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <UART_receiveString+0x4e>

	while (Str[i] != '#') {
		i++;
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	8f 5f       	subi	r24, 0xFF	; 255
    31f4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3200:	8c 01       	movw	r16, r24
    3202:	02 0f       	add	r16, r18
    3204:	13 1f       	adc	r17, r19
    3206:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_recieveByte>
    320a:	f8 01       	movw	r30, r16
    320c:	80 83       	st	Z, r24
{
	uint8 i = 0;

	Str[i] = UART_recieveByte();

	while (Str[i] != '#') {
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	9b 81       	ldd	r25, Y+3	; 0x03
    3218:	fc 01       	movw	r30, r24
    321a:	e2 0f       	add	r30, r18
    321c:	f3 1f       	adc	r31, r19
    321e:	80 81       	ld	r24, Z
    3220:	83 32       	cpi	r24, 0x23	; 35
    3222:	31 f7       	brne	.-52     	; 0x31f0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	9b 81       	ldd	r25, Y+3	; 0x03
    322e:	fc 01       	movw	r30, r24
    3230:	e2 0f       	add	r30, r18
    3232:	f3 1f       	adc	r31, r19
    3234:	10 82       	st	Z, r1
}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	08 95       	ret

00003246 <__udivmodsi4>:
    3246:	a1 e2       	ldi	r26, 0x21	; 33
    3248:	1a 2e       	mov	r1, r26
    324a:	aa 1b       	sub	r26, r26
    324c:	bb 1b       	sub	r27, r27
    324e:	fd 01       	movw	r30, r26
    3250:	0d c0       	rjmp	.+26     	; 0x326c <__udivmodsi4_ep>

00003252 <__udivmodsi4_loop>:
    3252:	aa 1f       	adc	r26, r26
    3254:	bb 1f       	adc	r27, r27
    3256:	ee 1f       	adc	r30, r30
    3258:	ff 1f       	adc	r31, r31
    325a:	a2 17       	cp	r26, r18
    325c:	b3 07       	cpc	r27, r19
    325e:	e4 07       	cpc	r30, r20
    3260:	f5 07       	cpc	r31, r21
    3262:	20 f0       	brcs	.+8      	; 0x326c <__udivmodsi4_ep>
    3264:	a2 1b       	sub	r26, r18
    3266:	b3 0b       	sbc	r27, r19
    3268:	e4 0b       	sbc	r30, r20
    326a:	f5 0b       	sbc	r31, r21

0000326c <__udivmodsi4_ep>:
    326c:	66 1f       	adc	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	88 1f       	adc	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	1a 94       	dec	r1
    3276:	69 f7       	brne	.-38     	; 0x3252 <__udivmodsi4_loop>
    3278:	60 95       	com	r22
    327a:	70 95       	com	r23
    327c:	80 95       	com	r24
    327e:	90 95       	com	r25
    3280:	9b 01       	movw	r18, r22
    3282:	ac 01       	movw	r20, r24
    3284:	bd 01       	movw	r22, r26
    3286:	cf 01       	movw	r24, r30
    3288:	08 95       	ret

0000328a <__prologue_saves__>:
    328a:	2f 92       	push	r2
    328c:	3f 92       	push	r3
    328e:	4f 92       	push	r4
    3290:	5f 92       	push	r5
    3292:	6f 92       	push	r6
    3294:	7f 92       	push	r7
    3296:	8f 92       	push	r8
    3298:	9f 92       	push	r9
    329a:	af 92       	push	r10
    329c:	bf 92       	push	r11
    329e:	cf 92       	push	r12
    32a0:	df 92       	push	r13
    32a2:	ef 92       	push	r14
    32a4:	ff 92       	push	r15
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	ca 1b       	sub	r28, r26
    32b4:	db 0b       	sbc	r29, r27
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	09 94       	ijmp

000032c2 <__epilogue_restores__>:
    32c2:	2a 88       	ldd	r2, Y+18	; 0x12
    32c4:	39 88       	ldd	r3, Y+17	; 0x11
    32c6:	48 88       	ldd	r4, Y+16	; 0x10
    32c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    32ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    32cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    32ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    32d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    32d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    32d4:	b9 84       	ldd	r11, Y+9	; 0x09
    32d6:	c8 84       	ldd	r12, Y+8	; 0x08
    32d8:	df 80       	ldd	r13, Y+7	; 0x07
    32da:	ee 80       	ldd	r14, Y+6	; 0x06
    32dc:	fd 80       	ldd	r15, Y+5	; 0x05
    32de:	0c 81       	ldd	r16, Y+4	; 0x04
    32e0:	1b 81       	ldd	r17, Y+3	; 0x03
    32e2:	aa 81       	ldd	r26, Y+2	; 0x02
    32e4:	b9 81       	ldd	r27, Y+1	; 0x01
    32e6:	ce 0f       	add	r28, r30
    32e8:	d1 1d       	adc	r29, r1
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	ed 01       	movw	r28, r26
    32f6:	08 95       	ret

000032f8 <itoa>:
    32f8:	fb 01       	movw	r30, r22
    32fa:	9f 01       	movw	r18, r30
    32fc:	e8 94       	clt
    32fe:	42 30       	cpi	r20, 0x02	; 2
    3300:	c4 f0       	brlt	.+48     	; 0x3332 <itoa+0x3a>
    3302:	45 32       	cpi	r20, 0x25	; 37
    3304:	b4 f4       	brge	.+44     	; 0x3332 <itoa+0x3a>
    3306:	4a 30       	cpi	r20, 0x0A	; 10
    3308:	29 f4       	brne	.+10     	; 0x3314 <itoa+0x1c>
    330a:	97 fb       	bst	r25, 7
    330c:	1e f4       	brtc	.+6      	; 0x3314 <itoa+0x1c>
    330e:	90 95       	com	r25
    3310:	81 95       	neg	r24
    3312:	9f 4f       	sbci	r25, 0xFF	; 255
    3314:	64 2f       	mov	r22, r20
    3316:	77 27       	eor	r23, r23
    3318:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodhi4>
    331c:	80 5d       	subi	r24, 0xD0	; 208
    331e:	8a 33       	cpi	r24, 0x3A	; 58
    3320:	0c f0       	brlt	.+2      	; 0x3324 <itoa+0x2c>
    3322:	89 5d       	subi	r24, 0xD9	; 217
    3324:	81 93       	st	Z+, r24
    3326:	cb 01       	movw	r24, r22
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	a1 f7       	brne	.-24     	; 0x3314 <itoa+0x1c>
    332c:	16 f4       	brtc	.+4      	; 0x3332 <itoa+0x3a>
    332e:	5d e2       	ldi	r21, 0x2D	; 45
    3330:	51 93       	st	Z+, r21
    3332:	10 82       	st	Z, r1
    3334:	c9 01       	movw	r24, r18
    3336:	0c 94 9d 19 	jmp	0x333a	; 0x333a <strrev>

0000333a <strrev>:
    333a:	dc 01       	movw	r26, r24
    333c:	fc 01       	movw	r30, r24
    333e:	67 2f       	mov	r22, r23
    3340:	71 91       	ld	r23, Z+
    3342:	77 23       	and	r23, r23
    3344:	e1 f7       	brne	.-8      	; 0x333e <strrev+0x4>
    3346:	32 97       	sbiw	r30, 0x02	; 2
    3348:	04 c0       	rjmp	.+8      	; 0x3352 <strrev+0x18>
    334a:	7c 91       	ld	r23, X
    334c:	6d 93       	st	X+, r22
    334e:	70 83       	st	Z, r23
    3350:	62 91       	ld	r22, -Z
    3352:	ae 17       	cp	r26, r30
    3354:	bf 07       	cpc	r27, r31
    3356:	c8 f3       	brcs	.-14     	; 0x334a <strrev+0x10>
    3358:	08 95       	ret

0000335a <__udivmodhi4>:
    335a:	aa 1b       	sub	r26, r26
    335c:	bb 1b       	sub	r27, r27
    335e:	51 e1       	ldi	r21, 0x11	; 17
    3360:	07 c0       	rjmp	.+14     	; 0x3370 <__udivmodhi4_ep>

00003362 <__udivmodhi4_loop>:
    3362:	aa 1f       	adc	r26, r26
    3364:	bb 1f       	adc	r27, r27
    3366:	a6 17       	cp	r26, r22
    3368:	b7 07       	cpc	r27, r23
    336a:	10 f0       	brcs	.+4      	; 0x3370 <__udivmodhi4_ep>
    336c:	a6 1b       	sub	r26, r22
    336e:	b7 0b       	sbc	r27, r23

00003370 <__udivmodhi4_ep>:
    3370:	88 1f       	adc	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	5a 95       	dec	r21
    3376:	a9 f7       	brne	.-22     	; 0x3362 <__udivmodhi4_loop>
    3378:	80 95       	com	r24
    337a:	90 95       	com	r25
    337c:	bc 01       	movw	r22, r24
    337e:	cd 01       	movw	r24, r26
    3380:	08 95       	ret

00003382 <_exit>:
    3382:	f8 94       	cli

00003384 <__stop_program>:
    3384:	ff cf       	rjmp	.-2      	; 0x3384 <__stop_program>
